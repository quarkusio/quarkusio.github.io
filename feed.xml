<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

    <channel>
        <title>Quarkus</title>
        <link>https://quarkus.io</link>
        <description>Quarkus: Supersonic Subatomic Java</description>
        <lastBuildDate>Thu, 19 Jun 2025 16:42:52 +0000</lastBuildDate>
        
        
        <item>
            <title>Quarkus 3.23.4 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-23-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.23.4, the third (we skipped 3.23.1) maintenance release for our 3.23 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.23, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.23.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.23&quot;&gt;Quarkus 3.23 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.23.4&quot;&gt;3.23.4&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-23-4-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #57 - June</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-57/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus MCP Server is blazing a trail as the first Java MCP server with Streamable HTTP support—unlocking new possibilities for developers. Read more about in the blog post &quot;Quarkus MCP Server: The First Java Server SDK to Support Streamable HTTP!&quot; by Max Rydahl Andersen. Learn how Quarkus MCP Client can use access tokens to access secure MCP servers in Sergey Beryozkin&amp;#8217;s blog post &quot;Use Quarkus MCP client to access secure MCP HTTP servers&quot;. Leverage ChatGPT and existing Maven skills, to rapidly develop and deploy a new API with Quarkus. Ease the learning curve and achieving quick validation on Heroku. See how in &quot;How To Introduce a New API Quickly Using Quarkus and ChatGPT&quot; by John Vester. Explore LLM guardrails, why they matter, and how you can effectively implement them to ensure safe and trustworthy AI interactions in &quot;Ensuring Safe and Reliable AI Interactions with LLM Guardrails&quot; by Brian Vermeer. Learn about Prasbanth&amp;#8217;s first experience to see how the Java ecosystem is adapting to the world of cloud-native applications — and how that experience left him motivated to continue this journey in &quot;From Traditional Java to Cloud-Native with Quarkus: My First Boston Java Users Meetup Experience&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/57/&quot;&gt;Newsletter #57: June&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 12 Jun 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-57/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.23.3 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-23-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.23.3, the second (we skipped 3.23.1) maintenance release for our 3.23 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.23, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.23.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.23&quot;&gt;Quarkus 3.23 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.23.3&quot;&gt;3.23.3&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 11 Jun 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-23-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.23.2 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-23-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.23.2, the first (we skipped 3.23.1) maintenance release for our 3.23 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.23, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.23.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.23&quot;&gt;Quarkus 3.23 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.23.1&quot;&gt;3.23.1&lt;/a&gt; and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.23.2&quot;&gt;3.23.2&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-23-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.23 - Named datasources for Hibernate Reactive, OIDC bearer step up authentication</title>
            <link>
                https://quarkus.io/blog/quarkus-3-23-0-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.23.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;3.23 comes with a lot of small improvements and some bugfixes together with a couple of new features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47631&quot;&gt;#47631&lt;/a&gt; - Enable named data sources for Hibernate Reactive&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47445&quot;&gt;#47445&lt;/a&gt; - OIDC: Add bearer token step up authentication&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.23, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.23.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.23&quot;&gt;Quarkus 3.23 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;named-data-sources-for-hibernate-reactive&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#named-data-sources-for-hibernate-reactive&quot;&gt;&lt;/a&gt;Named data sources for Hibernate Reactive&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With 3.22, we started the journey of bringing the Hibernate Reactive extension up to par with the Hibernate ORM one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 3.23, it&amp;#8217;s now possible to point Hibernate Reactive to a named datasource.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next step will be to have support for multiple named persistence units for Hibernate Reactive and hopefully it will arrive in 3.24.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;oidc-bearer-step-up-authentication&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#oidc-bearer-step-up-authentication&quot;&gt;&lt;/a&gt;OIDC bearer step up authentication&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.23 introduces support for the OAuth 2.0 Step Up Authentication Challenge Protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can learn more about it in the &lt;a href=&quot;https://quarkus.io/guides/security-oidc-bearer-token-authentication#step-up-authentication&quot;&gt;dedicated section&lt;/a&gt; of the OIDC Bearer token authentication guide.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-cxf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-cxf&quot;&gt;&lt;/a&gt;Quarkus CXF&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus CXF 3.23 was released and is now available in &lt;a href=&quot;https://code.quarkus.io/?extension-search=origin:platform%20quarkus-cxf&quot;&gt;Quarkus Platform 3.23&lt;/a&gt;.
Check the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.23.0.html&quot;&gt;Quarkus CXF 3.23.0&lt;/a&gt; and &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.23.1.html&quot;&gt;3.23.1&lt;/a&gt; release notes for more information about what is new in these releases.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been upgraded to 3.23.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.23.0.CR1&quot;&gt;3.23.0.CR1&lt;/a&gt; and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.23.0&quot;&gt;3.23.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1083 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.23 release, thanks to Aditya Thakur, Alexandre Dutra, Alexey Loubyansky, Andrii Denysenko, Andy Damevin, appiepollo14, ayagmar, Bruno Baptista, Clement Escoffier, Fedor Dudinsky, Foivos Zakkak, Fouad Almalki, George Gastaldi, Georgios Andrianakis, Guillaume Smet, Holly Cummins, iedo, Ladislav Thon, Luca Molteni, luca-bassoricci, Lucien Brule, Magnus Gustafsson, Marc Nuri, mariofusco, marko-bekhta, Martin Bartoš, Martin Kouba, Martin Panzer, Matej Novotny, Matheus Cruz, Max Rydahl Andersen, melloware, Michael Edgar, Michal Vavřík, Michiel Dockx, Mikhail Polivakha, Olivier V, Ozan Gunalp, Peter Palaga, Phillip Krüger, Robert Stupp, Roberto Cortez, Rolfe Dlugy-Hegwer, Rostislav Svoboda, Sebastian Vogl, Sergey Beryozkin, Severin Gehwolf, shjones, Steve Hawkins, Stuart Douglas, Tamas Cservenak, and Yoann Rodière.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 28 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-23-0-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus MCP Server: The First Java Server SDK to Support Streamable HTTP!</title>
            <link>
                https://quarkus.io/blog/streamable-http-mcp/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Model Context Protocol (MCP) is taking the developer world by storm, and now, with its latest spec update: Streamable HTTP support has arrived!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re thrilled to announce that Quarkus MCP Server is the very first Java-based MCP server SDK to embrace this innovation, making it easier than ever for you to build, experiment, and deploy MCP-powered solutions—wherever you need them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server/releases/tag/1.2.0&quot;&gt;Quarkus MCP Server 1.2&lt;/a&gt; now supports Streamable HTTP alongside &lt;code&gt;stdio&lt;/code&gt; and &lt;code&gt;SSE&lt;/code&gt; transports. This enables new possibilities for connecting your MCP servers to mobile apps and cloud services. While the implementation is fully functional, some advanced features like &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26/basic/transports#resumability-and-redelivery&quot;&gt;Resumability and Redelivery&lt;/a&gt; are planned for future releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-streamable-http-matters&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-streamable-http-matters&quot;&gt;&lt;/a&gt;Why Streamable HTTP Matters&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Streamable HTTP is the approach MCP spec have taken for real-time, efficient, and scalable communication between clients and servers. It opens the door to new integrations and user experiences, especially for platforms and devices where traditional transports like SSE or stdio aren&amp;#8217;t ideal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And now, thanks to Quarkus MCP Server, Java developers are at the forefront of this evolution. Whether you&amp;#8217;re building AI assistants, developer tools, or next-gen chatbots, Streamable HTTP gives you the flexibility to reach more users, faster.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;easy-upgrade&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#easy-upgrade&quot;&gt;&lt;/a&gt;Easy upgrade&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ready to try it out? Just update your Maven dependency to the latest Quarkus MCP Server SSE transport:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.mcp&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-mcp-server-sse&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s it! You&amp;#8217;re now equipped to serve Streamable HTTP from your Java MCP server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to see how to write your own MCP server? Check out our previous post: &lt;a href=&quot;https://quarkus.io/blog/mcp-server/&quot;&gt;Introducing MCP Servers&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;quarkus-mcp-servers-power-and-simplicity&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-mcp-servers-power-and-simplicity&quot;&gt;&lt;/a&gt;Quarkus MCP Servers: Power and Simplicity&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-servers&quot;&gt;Quarkus MCP Servers project&lt;/a&gt; brings a suite of ready-to-use MCP servers, all built on Quarkus. With version 1.0.0.CR4, streamable HTTP support is baked in—no extra configuration required. We just updated the dependency, and it was ready to go!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To enable Streamable HTTP, simply launch any server in Quarkus MCP Servers with the &lt;code&gt;--sse&lt;/code&gt; flag:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;jbang jvminsight@mcp-java --sse&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;connecting-clients&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#connecting-clients&quot;&gt;&lt;/a&gt;Connecting Clients&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The default URL for Streamable HTTP is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;http://&amp;lt;your-ip&amp;gt;:8080/mcp/&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(For SSE, use &lt;code&gt;&lt;a href=&quot;http://&amp;lt;your-ip&amp;gt;:8080/mcp/sse&quot; class=&quot;bare&quot;&gt;http://&amp;lt;your-ip&amp;gt;:8080/mcp/sse&lt;/a&gt;&lt;/code&gt; as before.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While Streamable HTTP is still new, some pioneering clients already support it. Notably, the open source iOS app &lt;a href=&quot;https://github.com/daodao97/chatmcp&quot;&quot;&gt;ChatMCP&lt;/a&gt; (available on &lt;a href=&quot;https://testflight.apple.com/join/dCXksFJV&quot;&gt;TestFlight&lt;/a&gt;) and a non-open source version on the &lt;a href=&quot;https://apps.apple.com/dk/app/chatmcp/id6745196560&quot;&gt;iOS App Store&lt;/a&gt; both work seamlessly with MCP and support or even require Streamable HTTP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a quick demo of ChatMCP in action with the jvminsight server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;360&quot; height=&quot;640&quot; src=&quot;https://www.youtube.com/embed/6GomKEMucYs?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;kotlin-lightweight-and-fun&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kotlin-lightweight-and-fun&quot;&gt;&lt;/a&gt;Kotlin: Lightweight and Fun&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus supports both Java and Kotlin, giving you flexibility in how you build your MCP servers. Want to experiment? Here&amp;#8217;s a playful example of a Kotlin MCP server you can run instantly with JBang. It fetches a random image from &lt;a href=&quot;https://picsum.photos/&quot; class=&quot;bare&quot;&gt;https://picsum.photos/&lt;/a&gt; and returns it as a base64-encoded image, as the MCP spec requires.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-kotlin hljs&quot; data-lang=&quot;kotlin&quot;&gt;///usr/bin/env jbang &quot;$0&quot; &quot;$@&quot; ; exit $?

//KOTLIN
//DEPS io.quarkus:quarkus-bom:${quarkus.version:3.20.0}@pom
//DEPS io.quarkiverse.mcp.servers:mcp-server-shared:1.0.0.CR4

import io.quarkiverse.mcp.server.*
import java.net.URL
import java.util.Base64.getEncoder
import kotlin.io.readBytes

class demo {

   @Tool(description = &quot;Get a random picture&quot;)
   fun randomimage(@ToolArg(description = &quot;seed for randomness&quot;) seed: String,
                   @ToolArg(description = &quot;width&quot;, defaultValue = &quot;300&quot;) width: Int,
                   @ToolArg(description = &quot;height&quot;, defaultValue = &quot;300&quot;) height : Int): ImageContent {

      val image = URL(&quot;https://picsum.photos/seed/$seed/$width/$height&quot;).readBytes()

      return ImageContent(
         getEncoder().encodeToString(image),
         &quot;image/jpeg&quot;
      )
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Save this as &lt;code&gt;demo.kt&lt;/code&gt; and run it with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;jbang demo.kt --sse&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now use the &lt;code&gt;randomimage&lt;/code&gt; tool in ChatMCP or any other MCP client that supports Streamable HTTP. It&amp;#8217;s that easy—and a great way to start experimenting!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Streamable HTTP is an important step for the MCP ecosystem, and Quarkus MCP Server is putting Java developers in the driver&amp;#8217;s seat. Whether you&amp;#8217;re building tools, bots, or entirely new experiences, now&amp;#8217;s the perfect time to dive in and see what you can create.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can&amp;#8217;t wait to see what you build. Try it out, share your feedback, and help shape the future of MCP — powered by Quarkus!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Fri, 23 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/streamable-http-mcp/
            </guid>
            
            
            
            <author>Max Rydahl Andersen (https://twitter.com/maxandersen)</author>
            
        </item>
        
        <item>
            <title>Use Quarkus MCP client to access secure MCP HTTP servers</title>
            <link>
                https://quarkus.io/blog/secure-mcp-client/
            </link>
            <description>
                &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MCP servers that use the &lt;em&gt;Streamable HTTP&lt;/em&gt; or HTTP/SSE transports may require MCP client authentication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/&quot;&gt;Getting ready for secure MCP with Quarkus MCP Server&lt;/a&gt; blog post, we explained how to enforce MCP client authentication with the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server&quot;&gt;Quarkus MCP Server&lt;/a&gt; and demonstrated how &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/#mcp-server-devui&quot;&gt;MCP Server DevUI&lt;/a&gt; can use Keycloak access tokens to access the MCP server in dev mode and how &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/#mcp-inspector&quot;&gt;MCP Inspector&lt;/a&gt; and &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/#use-curl-to-access-the-mcp-server&quot;&gt;curl&lt;/a&gt; can use GitHub access tokens to access the MCP server in prod mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, we will explain how &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html&quot;&gt;Quarkus MCP Client&lt;/a&gt; can use access tokens to access secure MCP servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will show how to log in to Quarkus LangChain4j AI &lt;code&gt;Poem Service&lt;/code&gt; application with GitHub OAuth2 and have Google AI Gemini use tools with the help from Quarkus MCP Client that can propagate the GitHub access token to the secure Quarkus MCP Server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;demo-architecture&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#demo-architecture&quot;&gt;&lt;/a&gt;Demo architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_client/poem_service_architecture.png&quot; alt=&quot;Poem Service Architecture&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see in the diagram above, the user logs in into the Quarkus REST &lt;code&gt;Poem Service&lt;/code&gt; application endpoint. To support the user request to create a poem, the &lt;code&gt;Poem Service&lt;/code&gt; uses &lt;code&gt;AI Gemini&lt;/code&gt; and requests &lt;code&gt;MCP Client&lt;/code&gt; to complete a tool call to help &lt;code&gt;AI Gemini&lt;/code&gt; to find out the name of the logged-in user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An essential point is that both &lt;code&gt;Poem Service&lt;/code&gt; and &lt;code&gt;MCP Client&lt;/code&gt; are part of the same single Quarkus REST application that only users who logged in with GitHub can access. The users do not login to &lt;code&gt;MCP Client&lt;/code&gt;, they login to the &lt;code&gt;Poem Service&lt;/code&gt; application, using the &lt;code&gt;MCP client&lt;/code&gt; is an implementation detail of how this application completes the user request.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, this demo does not demonstrate an implementation of the &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization&quot;&gt;MCP Authorization&lt;/a&gt; flow which is primarily of interest to public MCP clients implemented as Single-page applications (SPA), such as as Anthropic Claude, that will be able to initiate a user login into an imported MCP server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This demo shows a typical &lt;code&gt;OAuth2&lt;/code&gt; authorization code flow where a user logs-in to a REST endpoint and authorizes it to access another service on the user&amp;#8217;s behalf. It also strengthens the message about the &lt;a href=&quot;https://quarkus.io/blog/gemini-personal-assistant/#integrated-ai-security&quot;&gt;AI security being an integral part of your application security&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, let&amp;#8217;s temporarily update the diagram by removing the &lt;code&gt;AI Gemini&lt;/code&gt;, replacing &lt;code&gt;MCP Client&lt;/code&gt; with &lt;code&gt;REST Client&lt;/code&gt;, &lt;code&gt;MCP Server&lt;/code&gt; with &lt;code&gt;Poem Creator service&lt;/code&gt; and &lt;code&gt;GitHub&lt;/code&gt; with &lt;code&gt;OAuth2&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_client/typical_oauth2_authorization.png&quot; alt=&quot;Typical OAuth2 Authorization&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will very likely find similarities between this diagram and what you do in your projects. It is the OAuth2 authorization code flow in action: the user logs in to the application and authorizes it to access another service offering a poem creation on the user&amp;#8217;s behalf.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The demo shows that Quarkus MCP Client can work effectively in such architectures by being able to use access tokens acquired during the user login, without you having to write any custom code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are now ready to start working on the &lt;code&gt;Secure MCP Client Server&lt;/code&gt; demo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find the complete project source in the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-sse-client-server&quot;&gt;Quarkus LangChain4j Secure MCP Client Server sample&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-mcp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-mcp-server&quot;&gt;&lt;/a&gt;Step 1 - Create and start MCP server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let&amp;#8217;s create a secure Quarkus MCP SSE server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you already created the MCP server &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/#initial-mcp-server&quot;&gt;as described&lt;/a&gt; in the the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/&quot;&gt;Getting ready for secure MCP with Quarkus MCP Server&lt;/a&gt; blog post, then you will find instructions below familiar and should be able to reuse the project you created earlier with minor updates.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MCP server requires authentication to establish Server-Sent Events (SSE) connection and also when invoking the tools. Additionally, the MCP server endpoint that provides access to tools requires that the security identity has a &lt;code&gt;read:name&lt;/code&gt; permission.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-dependencies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-dependencies&quot;&gt;&lt;/a&gt;MCP server maven dependencies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the following dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.mcp&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-mcp-server-sse&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &amp;lt;version&amp;gt;1.1.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-oidc&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-hibernate-orm-panache&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-jdbc-postgresql&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-mcp-server-sse&lt;/code&gt; is required to support MCP SSE transport.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-oidc&lt;/code&gt; is required to secure access to MCP SSE endpoints. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-hibernate-orm-panache&lt;/code&gt; and &lt;code&gt;quarkus-jdbc-postgresql&lt;/code&gt; are required to support the &lt;a href=&quot;#security-identity-augmentation&quot;&gt;Security Identity Augmentation&lt;/a&gt;. Their versions are defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-tool&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-tool&quot;&gt;&lt;/a&gt;MCP server tool&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s create a tool that can return the name of the currently logged-in user. It can be invoked only if the current MCP request is authenticated but also if the security identity has a &lt;code&gt;read:name&lt;/code&gt; permission:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import io.quarkiverse.mcp.server.TextContent;
import io.quarkiverse.mcp.server.Tool;
import io.quarkus.security.PermissionsAllowed;
import io.quarkus.security.identity.SecurityIdentity;
import jakarta.inject.Inject;

public class UserNameProvider {

    @Inject
    SecurityIdentity securityIdentity;

    @Tool(name = &quot;user-name-provider&quot;, description = &quot;Provides a name of the currently logged-in user&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    @PermissionsAllowed(&quot;read:name&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    TextContent provideUserName() {
        return new TextContent(securityIdentity.getPrincipal().getName()); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Provide a tool that can return the name of the current user.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Require authenticated tool access with an additional authorization &lt;code&gt;read:name&lt;/code&gt; permission constraint - yes, the only difference with an unauthenticated MCP server tool is &lt;code&gt;@PermissionsAllowed(&quot;read:name&quot;)&lt;/code&gt;, that&amp;#8217;s it!
See also how the main MCP SSE endpoint is secured in the &lt;a href=&quot;#mcp-server-configuration&quot;&gt;MCP Server Configuration&lt;/a&gt; section below.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use the injected &lt;code&gt;SecurityIdentity&lt;/code&gt; to return the current user&amp;#8217;s name. Alternatively, it can be acquired from the injected &lt;code&gt;quarkus.oidc.UserInfo&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;security-identity-augmentation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#security-identity-augmentation&quot;&gt;&lt;/a&gt;Security Identity Augmentation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To meet the &lt;code&gt;@PermissionsAllowed(&quot;read:name&quot;)&lt;/code&gt; authorization constraint, the security identity created after verifying the GitHub access token must be augmented to have a &lt;code&gt;read:name&lt;/code&gt; permission.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The demo expects that a database has a record with a GitHub account name and the assigned permission. The security identity augmentor uses the identity name to retrieve this record and enhance the identity with the discovered permission.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s see how this rather complex task can be easily achieved in Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, we create a Panache entity that keeps the account name and permission values:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import io.quarkus.hibernate.orm.panache.PanacheEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;

@Entity
public class Identity extends PanacheEntity {
    @Column(unique = true)
    public String name;
    public String permission;

    public static Identity findByName(String name) { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        return find(&quot;name&quot;, name).firstResult();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Utility method to find an identity record with a matching GitHub account name.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Second, we create an &lt;code&gt;import.sql&lt;/code&gt; script to have a demo record added to the database:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;INSERT INTO identity(id, name, permission) VALUES (1, &apos;${user.name}&apos;, &apos;read:name&apos;); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Insert a demo record. You will provide your GitHub account name when starting MCP server.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, we create a security identity augmentor:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import io.quarkus.security.identity.AuthenticationRequestContext;
import io.quarkus.security.identity.SecurityIdentity;
import io.quarkus.security.identity.SecurityIdentityAugmentor;
import io.quarkus.security.runtime.QuarkusSecurityIdentity;
import io.smallrye.mutiny.Uni;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.context.control.ActivateRequestContext;
import jakarta.inject.Inject;

@ApplicationScoped
public class SecurityIdentityPermissionAugmentor implements SecurityIdentityAugmentor { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    @Inject
    HibernateBlockingAugmentor hibernateBlockingAugmentor;

    @Override
    public Uni&amp;lt;SecurityIdentity&amp;gt; augment(SecurityIdentity identity, AuthenticationRequestContext context) {
        return context.runBlocking(() -&amp;gt; hibernateBlockingAugmentor.augment(identity)); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    }

    @ApplicationScoped
    static class HibernateBlockingAugmentor {

        @ActivateRequestContext
        public SecurityIdentity augment(SecurityIdentity securityIdentity) {
            Identity identity = Identity.findByName(securityIdentity.getPrincipal().getName()); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;

            QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder(securityIdentity); &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
            return builder.addPermissionAsString(identity.permission).build(); &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Custom &lt;code&gt;SecurityIdentityAugmentor&lt;/code&gt; can augment the already verified security identity.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Run the augmentation in a blocking mode because it requires access to the database.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Find the recorded &lt;code&gt;Identity&lt;/code&gt; matching the current user&amp;#8217;s name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Initialize a security identity builder from the current identity.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add the permission allocated to this user and create an updated &lt;code&gt;SecurityIdentity&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is all, the augmentation step is done with a few lines of code only.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-configuration&quot;&gt;&lt;/a&gt;MCP Server Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s configure our secure MCP server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.mcp.server.traffic-logging.enabled=true &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
quarkus.mcp.server.traffic-logging.text-limit=1000

quarkus.http.auth.permission.authenticated.paths=/mcp/sse &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
quarkus.http.auth.permission.authenticated.policy=authenticated

quarkus.oidc.provider=github &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
quarkus.oidc.application-type=service &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

quarkus.hibernate-orm.database.generation=drop-and-create &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.sql-load-script=import.sql

quarkus.http.port=8081 &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enable MCP server traffic logging&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enforce an authenticated access to the main MCP SSE endpoint during the initial handshake. See also how the tool is secured with an annotation in the &lt;a href=&quot;#mcp-server-tool&quot;&gt;MCP server tool&lt;/a&gt; section above, though you can also secure access to the tool by listing both main and tools endpoints in the configuration, for example: &lt;code&gt;quarkus.http.auth.permission.authenticated.paths=/mcp/sse,/mcp/messages/*&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Requires that only GitHub access tokens can be used to access MCP server.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;By default, &lt;code&gt;quarkus.oidc.provider=github&lt;/code&gt; supports an authorization code flow only. &lt;code&gt;quarkus.oidc.application-type=service&lt;/code&gt; overrides it and requires the use of bearer tokens.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Database that keeps the identity records is supported by the PostgreSQL DevService.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Start MCP server on port &lt;code&gt;8081&lt;/code&gt; - this is done for the Quarkus LangChain4j &lt;code&gt;Poem Service&lt;/code&gt; application that uses an MCP client to be able to start on the default &lt;code&gt;8080&lt;/code&gt; port.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;start-mcp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#start-mcp-server&quot;&gt;&lt;/a&gt;Start the MCP server in dev mode&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;mvn quarkus:dev -Duser.name=&quot;Your GitHub account name&quot; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use your GitHub account name, for example, &lt;code&gt;mvn quarkus:dev -Duser.name=&quot;John Doe&quot;&lt;/code&gt;. It is required to correctly import the user name and permission data to the database.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MCP server&amp;#8217;s security-related configuration remains exactly the same in prod mode, therefore we are not going to talk about running the MCP server in prod to save some blog post space. Please check the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-sse-client-server&quot;&gt;Quarkus LangChain4j Secure MCP Client Server sample&lt;/a&gt; if you would like to run MCP server in prod mode - you will only need to make sure PostresSQL is available in prod mode too.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-poem-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-poem-service&quot;&gt;&lt;/a&gt;Step 2 - Create and start Poem Service that uses AI Gemini and MCP client&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MCP server is now running and ready to accept tool calls. Let&amp;#8217;s create an AI &lt;code&gt;Poem Service&lt;/code&gt; that will work with AI Gemini and use an MCP client to complete tool calls.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;poem-service-maven-dependencies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#poem-service-maven-dependencies&quot;&gt;&lt;/a&gt;Poem Service Maven dependencies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the following dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-langchain4j-ai-gemini&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-langchain4j-mcp&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-langchain4j-oidc-mcp-auth-provider&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-oidc&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-rest-qute&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-langchain4j-ai-gemini&lt;/code&gt; brings support for AI Gemini.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-langchain4j-mcp&lt;/code&gt; provides core MCP Client support.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-langchain4j-oidc-mcp-auth-provider&lt;/code&gt; provides an implementation of &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html#_authorization&quot;&gt;McpClientAuthProvider&lt;/a&gt; that can supply access tokens acquired during the GitHub OAuth2 authorization code flow.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-oidc&lt;/code&gt; supports GitHub OAuth2 login to secure access to &lt;code&gt;Poem Service&lt;/code&gt;. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-rest-qute&lt;/code&gt; generates an HTML page to welcome the logged-in user. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;register-github-application&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#register-github-application&quot;&gt;&lt;/a&gt;Register GitHub OAuth2 application&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Register a GitHub OAuth2 application that you will authorize when logging in to the &lt;code&gt;Poem Service&lt;/code&gt; application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Follow the &lt;a href=&quot;https://quarkus.io/guides/security-openid-connect-providers#github&quot;&gt;GitHub OAuth2 registration&lt;/a&gt; process, and make sure to register the &lt;code&gt;&lt;a href=&quot;http://localhost:8080/login&quot; class=&quot;bare&quot;&gt;http://localhost:8080/login&lt;/a&gt;&lt;/code&gt; callback URL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use the generated GitHub client id and secret to either set &lt;code&gt;GITHUB_CLIENT_ID&lt;/code&gt; and &lt;code&gt;GITHUB_CLIENT_SECRET&lt;/code&gt; environment properties or update the &lt;code&gt;quarkus.oidc.client-id=${github_client_id}&lt;/code&gt; and &lt;code&gt;quarkus.oidc.credentials.secret=${github_client_secret}&lt;/code&gt; properties in application.properties by replacing &lt;code&gt;${github_client_id}&lt;/code&gt; with the generated client id and &lt;code&gt;${github_client_secret}&lt;/code&gt; with the generated client secret.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, Quarkus GitHub provider submits the client id and secret in the HTTP Authorization header. However, GitHub may require that both client id and secret are submitted as form parameters instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you get HTTP 401 error after logging in to GitHub and being redirected back to Quarkus MCP server, try to replace &lt;code&gt;quarkus.oidc.credentials.secret=${github.client.secret}&lt;/code&gt; property with the following two properties instead:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.oidc.credentials.client-secret.method=post
quarkus.oidc.credentials.client-secret.value=${github.client.secret}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;ai-gemini-key&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ai-gemini-key&quot;&gt;&lt;/a&gt;AI Gemini API key&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Poem Service&lt;/code&gt; relies on AI Gemini to create a poem for the logged-in user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Get &lt;a href=&quot;https://aistudio.google.com/app/apikey&quot;&gt;AI Gemini API key&lt;/a&gt; and either set an &lt;code&gt;AI_GEMINI_API_KEY&lt;/code&gt; environment property or update the &lt;code&gt;quarkus.langchain4j.ai.gemini.api-key=${ai_gemini_api_key}&lt;/code&gt; property in &lt;code&gt;application.properties&lt;/code&gt; by replacing &lt;code&gt;${ai_gemini_api_key}&lt;/code&gt; with the API key value.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;github-login-endpoint&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#github-login-endpoint&quot;&gt;&lt;/a&gt;GitHub Login Endpoint&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Poem Service&lt;/code&gt; needs to have an endpoint that manages a GitHub OAuth2 login. Typically, such an endpoint welcomes the logged-in user and offers links for the user to navigate to the rest of the secured application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s implement this login endpoint:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import io.quarkus.qute.Template;
import io.quarkus.qute.TemplateInstance;
import io.quarkus.oidc.UserInfo;
import io.quarkus.security.Authenticated;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;

/**
 * Login resource which returns a poem welcome page to the authenticated user
 */
@Path(&quot;/login&quot;)
@Authenticated &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
public class LoginResource {

    @Inject
    UserInfo userInfo; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

    @Inject
    Template poem;

    @GET
    @Produces(&quot;text/html&quot;)
    public TemplateInstance poem() {
        return poem.data(&quot;name&quot;, userInfo.getName()); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Require an authenticated access. It forces an authorization code flow for users who did not login with GitHub yet and a session verification for the already authenticated users.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;GitHub access tokens are binary and Quarkus OIDC indirectly verifies them by using them to request GitHub specific &lt;code&gt;UserInfo&lt;/code&gt; representation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;After the user logs in to GitHub and is redirected to this endpoint, an HTML page with a user name and a link to the &lt;a href=&quot;#jaxrs-poem-resource&quot;&gt;Poem Resource endpoint&lt;/a&gt; is generated with a simple &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j/blob/main/samples/secure-mcp-sse-client-server/secure-mcp-client/src/main/resources/templates/poem.html&quot;&gt;Qute template&lt;/a&gt; and returned to the user.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jaxrs-poem-resource&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jaxrs-poem-resource&quot;&gt;&lt;/a&gt;Create Poem Resource endpoint&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Poem Resource&lt;/code&gt; endpoint accepts poem requests from authenticated users and delegates these requests to AI &lt;code&gt;Poem Service&lt;/code&gt; that uses &lt;code&gt;AI Gemini&lt;/code&gt;. &lt;code&gt;AI Gemini&lt;/code&gt; relies on the MCP client to get the name of the logged-in user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import dev.langchain4j.agent.tool.Tool;
import dev.langchain4j.service.UserMessage;
import io.quarkiverse.langchain4j.RegisterAiService;
import io.quarkiverse.langchain4j.mcp.runtime.McpToolBox;
import io.quarkus.security.Authenticated;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path(&quot;/poem&quot;)
@Authenticated &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
public class PoemResource {

    static final String USER_MESSAGE = &quot;&quot;&quot;
            Write a short 1 paragraph poem about a Java programming language.
            Please start by greeting the currently logged in user by name and asking to enjoy reading the poem.&quot;&quot;&quot;;

    @RegisterAiService
    public interface PoemService { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        @UserMessage(USER_MESSAGE)
        @McpToolBox(&quot;user-name&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        String writePoem();
    }

    @Inject
    PoemService poemService;

    @GET
    public String getPoem() {
        return poemService.writePoem(); &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Require authenticated poem requests.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;AI Poem Service interface.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Refer to the MCP client &lt;code&gt;user-name&lt;/code&gt; configuration, see the &lt;a href=&quot;#poem-service-configuration&quot;&gt;Poem Service Configuration&lt;/a&gt; section below.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;poem-service-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#poem-service-configuration&quot;&gt;&lt;/a&gt;Poem Service Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s see how the &lt;code&gt;Poem Service&lt;/code&gt; configuration looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.langchain4j.mcp.user-name.transport-type=http &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
quarkus.langchain4j.mcp.user-name.url=http://localhost:8081/mcp/sse/ &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

quarkus.oidc.provider=github &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
quarkus.oidc.client-id=${github_client_id} &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
quarkus.oidc.credentials.secret=${github_client_secret} &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

quarkus.langchain4j.ai.gemini.api-key=${ai_gemini_api_key} &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
quarkus.langchain4j.ai.gemini.log-requests=true &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
quarkus.langchain4j.ai.gemini.log-responses=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enable MCP client HTTP transport. In this demo we use SSE, with &lt;code&gt;Streamable HTTP&lt;/code&gt; to be supported in the future.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Point to the Quarkus MCP server endpoint that you started in the &lt;a href=&quot;#start-mcp-server&quot;&gt;Start the MCP server in dev mode&lt;/a&gt; step.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Require GitHub OAuth2 login.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;GitHub client id and secret that were generated during the &lt;a href=&quot;#register-github-application&quot;&gt;Register GitHub OAuth2 application&lt;/a&gt; step.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;AI Gemini key that you acquired during the &lt;a href=&quot;#ai-gemini-key&quot;&gt;AI Gemini API key&lt;/a&gt; step.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enable AI Gemini request and response logging&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please pay attention to the fact that the MCP client configuration has a &lt;code&gt;user-name&lt;/code&gt; name. You referred to this configuration with the &lt;code&gt;@McpToolBox(&quot;user-name&quot;)&lt;/code&gt; annotation in the &lt;a href=&quot;#jaxrs-poem-resource&quot;&gt;Create Poem Resource endpoint&lt;/a&gt; step.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;start-poem-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#start-poem-service&quot;&gt;&lt;/a&gt;Start Poem Service in dev mode&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;mvn quarkus:dev&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All the Poem Service configuration remains exactly the same in prod mode, therefore we are not going to talk about running it in prod to save some blog post space. Please check the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-sse-client-server&quot;&gt;Quarkus LangChain4j Secure MCP Client Server sample&lt;/a&gt; if you would like to run it in prod mode.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are ready to test our AI &lt;code&gt;Poem Service&lt;/code&gt; application.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step-3-test-poem-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-3-test-poem-service&quot;&gt;&lt;/a&gt;Step 3 - Test Poem Service&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Access &lt;a href=&quot;http://localhost:8080&quot; class=&quot;bare&quot;&gt;http://localhost:8080&lt;/a&gt; and login to &lt;code&gt;Poem Service&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_client/login_to_poem_service.png&quot; alt=&quot;Login to Poem Service&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should get a response with your name and a link to the &lt;code&gt;Poem Service&lt;/code&gt; endpoint:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_client/poem_service_welcome_page.png&quot; alt=&quot;Poem Service Welcome Page&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, Quarkus MCP Client was not involved in getting your name produced, it was done by the &lt;a href=&quot;#github-login-endpoint&quot;&gt;GitHub Login Endpoint&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on the link to get a poem created and have AI Gemini producing a poem about Java for you:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_client/poem_service_response.png&quot; alt=&quot;Poem Service Response&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time, Quarkus MCP Client helped AI Gemini to get your name from the secure Quarkus MCP server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;access-token-delegation-considerations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#access-token-delegation-considerations&quot;&gt;&lt;/a&gt;Access token delegation considerations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In general, access tokens issued by social providers such as GitHub are not designed to be used in your distributed application architecture, with a service such as &lt;code&gt;Poem Service&lt;/code&gt; accessing GitHub API indirectly through another service such as &lt;code&gt;Quarkus MCP server&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus REST service that has users logged in with GitHub can access GitHub API directly. For example, &lt;code&gt;Poem Service&lt;/code&gt; can use a great Quarkus LangChain4j capability to mark REST Clients as tools to access GitHub API. See how &lt;a href=&quot;https://quarkus.io/blog/gemini-personal-assistant/#implementation&quot;&gt;it was done with the Google Calendar service&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this demo, we show the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html&quot;&gt;Quarkus MCP Client&lt;/a&gt;&apos;s capability to interoperate with MCP servers and use access tokens to access secure MCP servers. We use GitHub OAuth2 because it is easily accessible to most developers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Providers such as &lt;code&gt;Keycloak&lt;/code&gt; and &lt;code&gt;Auth0&lt;/code&gt; can create access tokens that are meant to be propagated from one service to another one. You will quite likely have your Quarkus MCP server implementations dealing with such tokens in the enterprise. Alternatively, when possible, the AI service application which accepts an authenticated user can request the token issuer to exchange its access token for another token that will be used to access the downstream MCP Server instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus AI Service applications may have to and can support a delegation flow such as &lt;code&gt;GitHub access token &amp;#8594; Poem Service &amp;#8594; MCP Client &amp;#8594; MCP Server tool &amp;#8594; GitHub API&lt;/code&gt; with additional security measures that the Quarkus team wil discuss in the future blog posts and the identity augmentation like the one shown in this demo.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, we demonstrated how &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html&quot;&gt;Quarkus MCP Client&lt;/a&gt; can access secure MCP servers by propagating access tokens available to the Quarkus LangChain4j AI Service application after the OAuth2 authorization code flow is complete.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stay tuned for more upcoming blog posts about using MCP securely with Quarkus MCP client and MCP Server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/secure-mcp-client/
            </guid>
            
            
            
            <author>Sergey Beryozkin (https://twitter.com/sberyozkin)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.20.1 released - LTS maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-20-1-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.20.1, our first maintenance release for the 3.20 LTS stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.20.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.20, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update --stream=3.20&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.20.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.20.1&quot;&gt;the full changelog of 3.20.1 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 20 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-20-1-released/
            </guid>
            
            
            
            <author>Jan Martiška (https://twitter.com/janmartiska)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.15.5 released - LTS maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-15-5-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.15.5, our next maintenance release for the 3.15 LTS stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.15.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.15, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update --stream=3.15&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.15.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.15.5&quot;&gt;the full changelog of 3.15.5 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 20 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-15-5-released/
            </guid>
            
            
            
            <author>Jan Martiška (https://twitter.com/janmartiska)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.22.3 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-22-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.22.3, the second (we skipped 3.22.0) maintenance release for our 3.22 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.22, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.22.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.22&quot;&gt;Quarkus 3.22 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.22.3&quot;&gt;3.22.3&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 15 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-22-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #56 - May</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-56/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Read &quot;AI-Powered Form Wizards: Chat, Click, Done&quot; By Loïc Magnette to discover how Conversational AI Forms transform static forms into dynamic, guided experiences that boost data quality and ease of use. Learn how MCP clients can access Quarkus MCP SSE servers with access tokens in &quot;Getting ready for secure MCP with Quarkus MCP Server&quot; by Sergey Beryozkin. Markus Eisele&amp;#8217;s &quot;Deploy Java Like a Pro: Your First Quarkus App on OpenShift in Minutes&quot; is a fun, hands-on guide for Java developers to build a REST API with Quarkus, PostgreSQL, and deploy it to OpenShift Developer Sandbox with no Kubernetes expertise required. Check out &quot;Quarkus 3 application on AWS Lambda- Part 1&quot; by Vadym Kazulkin for an introduction to the sample application and first Lambda performance measurements. Take a look back to see the way forward in &quot;Why Standards Matter More Today: From Fear of Lock-In to Foundations for Choice&quot; by Markus Eisele.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/56/&quot;&gt;Newsletter #56: May&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 13 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-56/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Agentic AI with Quarkus - part 3</title>
            <link>
                https://quarkus.io/blog/agentic-ai-with-quarkus-p3/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://quarkus.io/blog/agentic-ai-with-quarkus/&quot;&gt;first part&lt;/a&gt; of this blog post series briefly introduced agentic AI and discussed workflow patterns. Subsequently, the &lt;a href=&quot;https://quarkus.io/blog/agentic-ai-with-quarkus-p2/&quot;&gt;second installment&lt;/a&gt; explored the proper agentic patterns, showing how to implement them using Quarkus and its LangChain4j extension.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This third article aims to clarify the differences between these two approaches, discuss their pros and cons, and demonstrate with a practical example how to migrate an AI-infused service using a workflow pattern to a pure agentic implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In essence, the most relevant difference between the two is that workflow patterns are programmatically orchestrated through handcrafted code paths, while agents autonomously decide their own processes and tool usage, maintaining control over how they execute tasks. This makes them more flexible and adaptable to various scenarios, but it also makes them less predictable and, in some cases, more prone to hallucinations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/agentic/wrokflowVsAgents.png&quot; alt=&quot;AI Workflow Vs. Pure Agentic AI&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. AI Workflow Vs. Pure Agentic AI&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;from-workflow-to-agents&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#from-workflow-to-agents&quot;&gt;&lt;/a&gt;From Workflow to Agents&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/agentic-ai-with-quarkus/#routing&quot;&gt;Routing&lt;/a&gt; is one of the workflow patterns presented in the first article of this series. There, we used a first LLM service to categorize the user request and then used that category to programmatically reroute that request to one of three other LLMs acting as medical, legal, or technical experts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/agentic/routing-pattern.png&quot; alt=&quot;Routing pattern&quot; width=&quot;70%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Routing pattern&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In that example, each expert was implemented as a separate and independent LLM service, and the routing to one of them was performed programmatically by the application code. Tracing the execution of a request like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl http://localhost:8080/expert/request/I%20broke%20my%20leg%20what%20should%20I%20do&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The resulting traces show the sequence of steps performed to fulfill the user request: first, the relatively fast, less than 2 seconds, classification phase conducted by the Router Agent, then the more expensive invocation of the selected expert service, which took almost 25 seconds to generate its answer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/agentic/routing-workflow-trace.png&quot; alt=&quot;Tracing routing workflow pattern execution&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Tracing routing workflow pattern execution&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this example, we use the same model to classify and generate the response. However, it is possible to use specialized models for the classification and each experts.
Now, let’s see how we can transform this workflow approach into a more agentic one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus integration makes it straightforward to turn these AI “expert” services into &lt;em&gt;tools&lt;/em&gt; that another AI service can invoke. You only need to annotate the AI service methods with &lt;code&gt;@Tool&lt;/code&gt; and configure the caller AI service with &lt;code&gt;@Toolbox&lt;/code&gt;. This approach preserves the possibility of also invoking the single expert directly as an independent LLM service, and also using specialized models for each expert. Note that this &lt;code&gt;@Tool&lt;/code&gt; annotation is not related with the presence of any MCP server and has the purpose of exposing the AI service also as a tool for other AI services. It is planned to discuss MCP in the next blog post of this series.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public interface MedicalExpert {

    @UserMessage(&quot;&quot;&quot;
            You are a medical expert.
            Analyze the following user request under a medical point of view and provide the best possible answer.
            The user request is {request}.
            &quot;&quot;&quot;)
    @Tool(&quot;A medical expert&quot;) // &amp;lt;-- Allows to use this LLM also as a tool for other LLMs
    String medicalRequest(String request);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This way, it is possible to provide a second alternative implementation of the same expert interrogation service, this time using a pure agentic approach. The Router Agent is replaced by a single LLM, having the three experts as &lt;em&gt;tools&lt;/em&gt;, that can autonomously decide to which expert the question must be delegated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@RegisterAiService(modelName = &quot;tool-use&quot;)
@ApplicationScoped
public interface ExpertsSelectorAgent {

    @UserMessage(&quot;&quot;&quot;
            Analyze the following user request and categorize it as &apos;legal&apos;, &apos;medical&apos; or &apos;technical&apos;,
            then forward the request as it is to the corresponding expert provided as a tool.
            Finally return the answer that you received from the expert without any modification.

            The user request is: &apos;{request}&apos;.
            &quot;&quot;&quot;)
    @ToolBox({MedicalExpert.class, LegalExpert.class, TechnicalExpert.class})
    String askToExpert(String request);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@ToolBox&lt;/code&gt; annotation is used to specify the list of tools the agent can use, in this case, the three experts. Note that, similarly to what has been done for other agentic examples in the previous post of this series, this AI service has been configured to use a model capable of reasoning and requesting tool invocations. In our example, the model is configured in the &lt;code&gt;application.properties&lt;/code&gt; file and is using  &lt;code&gt;qwen2.5&lt;/code&gt; with 7 billion parameters. In addition, the &lt;code&gt;temperature&lt;/code&gt; is set to 0 to make the classification more predictable and minimize the possibility of hallucinations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.langchain4j.ollama.tool-use.chat-model.model-id=qwen2.5:7b
quarkus.langchain4j.ollama.tool-use.chat-model.temperature=0
quarkus.langchain4j.ollama.tool-use.timeout=180s&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, the agentic implementation of this expert interrogation service is also ready and can be exposed with a different REST endpoint, making it possible to use and compare these two alternative solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@GET
@Produces(MediaType.TEXT_PLAIN)
@Path(&quot;request-agentic/{request}&quot;)
public String requestAgentic(String request) {
    Log.infof(&quot;User request is: %s&quot;, request);
    return expertsSelectorAgent.askToExpert(request);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;comparing-the-workflow-and-agentic-approaches&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#comparing-the-workflow-and-agentic-approaches&quot;&gt;&lt;/a&gt;Comparing the workflow and agentic approaches&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The two approaches are equivalent in terms of functionality, but they differ in how they are implemented and the levels of control and flexibility they offer. In particular, the pure agentic solution is much simpler and more elegant, as it does not require additional code to route the request to the right expert. The agent can do that by itself. It could also use more than one expert for a single query if needed, which would be impossible with the workflow approach, where the routing is hardcoded in the application code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other hand, the workflow approach is more predictable and easier to debug, as the routing logic is explicit and can be easily traced. It can also be tested and controlled separately. For instance, the behavior of the Router Agent alone could be controlled and corrected with an output guardrail. Moreover, it also allows for more complex workflows, where the routing decision can depend on multiple factors and not just the user’s request.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, as evidenced by tracing of the agentic execution, its current implementation has a significant drawback: the overall time to fulfill the user request is significantly increased.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/agentic/routing-agentic-trace.png&quot; alt=&quot;Tracing agentic routing execution&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Tracing agentic routing execution&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This depends on how the agent uses the LLM expert as a tool: even though it has been explicitly required to forward the expert’s response as it is and without any modification, it seems to ignore this instruction. It can&amp;#8217;t avoid wasting significant time reprocessing the expert&amp;#8217;s answer before returning it. In other words, this is a side-effect of the fact that the agent is in complete control of the execution, and there is no way to forward this control to a different LLM, as it would be convenient in this case.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/agentic-ai-with-quarkus-p3/
            </guid>
            
            
            
            <author>Mario Fusco (https://twitter.com/mariofusco)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.22.2 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-22-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.22.2, the first (we skipped 3.22.0) maintenance release for our 3.22 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.22, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.22.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.22&quot;&gt;Quarkus 3.22 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.22.2&quot;&gt;3.22.2&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 07 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-22-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>The internals (and a few externals) of Quarkus test classloading have changed</title>
            <link>
                https://quarkus.io/blog/test-classloading-rewrite/
            </link>
            <description>
                &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-changing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-changing&quot;&gt;&lt;/a&gt;What&amp;#8217;s changing?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The internals of Quarkus test classloading have been rewritten in 3.22.
It does not affect production and dev modes, or some Quarkus test modes, such as &lt;code&gt;@QuarkusIntegrationTest&lt;/code&gt;, &lt;code&gt;@QuarkusComponentTest&lt;/code&gt;.
However, &lt;code&gt;@QuarkusTest&lt;/code&gt; has changed.
This change should make Quarkus testing work better, and it allowed us to fix a pile of longstanding bugs.
It will also allow us to improve the integration with test frameworks such as Pact.
However, it did introduce a few bugs we know about, and most likely also some bugs we don&amp;#8217;t yet know about.
We&amp;#8217;re keen to get feedback from the community so that we can get fixing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why&quot;&gt;&lt;/a&gt;Why?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In previous versions, Quarkus tests were invoked using the default JUnit classloader, and then executed in a different, Quarkus-aware, classloader.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This mostly worked very well, and meant that &lt;code&gt;QuarkusTest&lt;/code&gt; tests mostly behaved as if they were part of the same application as the code under test.
The Quarkus test framework could start and stop Quarkus instances at the right point in the test lifecycle, inject CDI dependencies, and do other useful Quarkus bytecode manipulation.
However, some use cases didn&amp;#8217;t work. Tests using advanced JUnit 5 features like &lt;code&gt;@TestTemplate&lt;/code&gt; and &lt;code&gt;@ParameterizedTest&lt;/code&gt; sometimes found that the same test code might appear to run in several classloaders in a single test, or that injected dependencies weren&amp;#8217;t always available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While Quarkus extensions can do all sorts of marvellous bytecode manipulation to improve the developer experience, they cannot manipulate test classes with the same freedom that they do normal application classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over time, test-related defects were building up that couldn&amp;#8217;t be changed without a fundamental rewrite of how Quarkus loads and executes tests.
The Quarkus test code itself was also growing ever-more complex as it tried to work around various JUnit edge cases. Moving test instances from one classloader to another involved serializing and deserialization, which is harder to implement on newer JVM versions with tighter class security. For example, Quarkus used to use XStream as the serialization provider, but XStream no longer works with Java 17 and higher, because of reflection restrictions in the newer JVMs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What if, instead, Quarkus tests were simply run in the same classloader used to to load them?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-you-need-to-do&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-you-need-to-do&quot;&gt;&lt;/a&gt;What you need to do&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From Quarkus 3.22 onwards, this is exactly how &lt;code&gt;@QuarkusTest&lt;/code&gt; classloading works.
What do your tests need to change in order to work with the new architecture?
&lt;strong&gt;Nothing&lt;/strong&gt; (hopefully!).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the goals of this change was that the rewrite didn&amp;#8217;t touch any tests in our test suite, to make sure they&amp;#8217;d all continue working without updates.
In practice, there have been a few hiccups and we&amp;#8217;ve also discovered some edge cases in the broader ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;known-regressions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#known-regressions&quot;&gt;&lt;/a&gt;Known regressions&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;All dev services now start in the JUnit discovery phase&lt;/strong&gt;. &lt;a href=&quot;https://quarkus.io/guides/dev-services&quot;&gt;Quarkus Dev Services&lt;/a&gt; are currently started during &lt;a href=&quot;https://quarkus.io/guides/reaugmentation#what-is-augmentation&quot;&gt;the augmentation phase&lt;/a&gt;, along with bytecode manipulation and other application initialization steps. With the new testing design, all augmentation happens at the beginning of the test run, during the JUnit discovery phase. This means all Dev Services also start at the beginning of the test run. If several test classes with different Dev Service configuration are augmented before any tests are run, multiple differently-configured Dev Services may be running at the same time. This can cause port conflicts and cross-talk on configuration values. We&amp;#8217;re hoping to have a &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/45785&quot;&gt;fix&lt;/a&gt; for this in the next release. As a workaround, splitting conflicting tests into separate projects should fix symptoms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Config access from JUnit conditions&lt;/strong&gt;. Using a &lt;code&gt;ConfigProvider&lt;/code&gt; from a custom JUnit condition will &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/47081&quot;&gt;trigger a &lt;code&gt;ServiceConfigurationError&lt;/code&gt;&lt;/a&gt;. The workaround is to set the thread context classloader to &lt;code&gt;this.getClass().getClassLoader()&lt;/code&gt; before reading config, and then set it back afterwards. This is fixed in 3.23.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Nested test issues&lt;/strong&gt;. If nested &lt;code&gt;@QuarkusTest&lt;/code&gt; tests are mixed in the same project with plain tests, the plain tests &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/47657&quot;&gt;will not be able to access Quarkus config&lt;/a&gt;, because the thread context classloader does not get correctly reset. As a workaround, you can manually set the thread context classloader to the system classloader in the plain tests. The nested tests also &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/47671&quot;&gt;have problems in dev mode&lt;/a&gt;. Most of these issues are fixed in 3.23, and the remaining cases are sorted out in 3.24.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;junit-platform.properties&lt;/strong&gt; Including a &lt;code&gt;junit-platform.properties&lt;/code&gt; in a project &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/47646&quot;&gt;causes problems&lt;/a&gt; for tests using &lt;code&gt;@QuarkusTest&lt;/code&gt;. This is fixed in 3.24, but note that &lt;code&gt;junit-platform.properties&lt;/code&gt; files can also &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/48125&quot;&gt;interfere with multi-profile tests&lt;/a&gt;. To register a class orderer, it is best to &lt;a href=&quot;https://quarkus.io/guides/getting-started-testing#testing_different_profiles&quot;&gt;configure the orderer&lt;/a&gt; in the Quarkus application properties.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Gradle source sets&lt;/strong&gt;. In some cases classes in one gradle source set &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/47760&quot;&gt;cannot access package-private fields and classes in a different source set&lt;/a&gt;. This causes an &lt;code&gt;IllegalAccessError&lt;/code&gt;. The workaround is to switch from package-private to public. This is fixed in 3.24.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;IDE support&lt;/strong&gt;. Running &lt;code&gt;QuarkusTest&lt;/code&gt; tests from the Eclipse IDE is &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/47656&quot;&gt;more challenging&lt;/a&gt;. Running a class as a JUnit test gives an error. To workaround, you can individual test methods, or run a whole package also works, or add &lt;code&gt;-uniqueId [engine:junit-jupiter]/[class:&amp;lt;your.class.name.here&amp;gt;]&lt;/code&gt; to the program arguments in the run configuration. This is fixed in Eclipse 4.37. Similar, in Visual Studio Code, running all tests in a class or package &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/48014&quot;&gt;will fail&lt;/a&gt;, but running individual test methods will work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Increased memory footprint running tests.&lt;/strong&gt; For suites using multiple profiles and resources, more heap or metaspace may be needed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;things-to-watch-out-for&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#things-to-watch-out-for&quot;&gt;&lt;/a&gt;Things to watch out for&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Test order change&lt;/strong&gt;. As part of the rewrite, the execution order of some tests has swapped around. Of course, we all know tests should not depend on execution order if they don&amp;#8217;t set an order explicitly. However, it&amp;#8217;s easy to not notice that a test requires a certain order&amp;#8230;&amp;#8203; until the order changes. We discovered some tests in our own suite that were sensitive to the execution order, and other people may make similar discoveries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Test timing change&lt;/strong&gt;. We also discovered that the rewrite exposed some timing issues in tests. Because classloading is frontloaded at the beginning of the test run, rather than between test executions, there&amp;#8217;s less time for asynchronous operations to finish between tests. For example, there may no longer be time for external state to &apos;reset&apos; before the next test starts. This might expose some heisenbugs in test suites.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dropped-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dropped-support&quot;&gt;&lt;/a&gt;Dropped support&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;@TestProfile&lt;/code&gt; on &lt;code&gt;@Nested&lt;/code&gt; tests.&lt;/strong&gt; Mixing different test profiles and test resources on &lt;code&gt;@Nested&lt;/code&gt; tests is no longer supported. By definition, every &lt;code&gt;@TestProfile&lt;/code&gt; must get its own Quarkus application and classloader. Having multiple classloaders execute one test isn&amp;#8217;t compatible with loading the test with the classloader used to run it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Version 2.x of the Maven Surefire plugin&lt;/strong&gt;. Versions below 3.x of the Maven Surefire plugin will no longer work with &lt;code&gt;@QuarkusTest&lt;/code&gt;. Version 3 of the Surefire plugin was released in 2023, so version 2 is now rather old.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Parallel test execution.&lt;/strong&gt; Running Quarkus tests in parallel has &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/42296&quot;&gt;never been supported&lt;/a&gt;, but it would work in some circumstances. It is now less likely to work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#next-steps&quot;&gt;&lt;/a&gt;Next steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main work of the test classloading rewrite has been delivered in 3.22, and has unlocked a bunch of possible improvements.
Some test defects weren&amp;#8217;t directly fixed by the main change, but the architecture is now in place to enable a fix.
More excitingly, test-related extensions, like the Pact extensions, can now add new features to reduce test boilerplate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As always, if you spot issues or oddities, please let us know on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;zulip&lt;/a&gt; or &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;raise an issue&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/orgs/quarkusio/projects/30&quot;&gt;working group for test classloading&lt;/a&gt; is still underway, and welcomes contributions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 30 Apr 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/test-classloading-rewrite/
            </guid>
            
            
            
            <author>Holly Cummins (https://twitter.com/holly_cummins)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.22 - Compose Dev Services, improved test class loading infrastructure...</title>
            <link>
                https://quarkus.io/blog/quarkus-3-22-1-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.22.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It comes with several important features, together with some infrastructure improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/46848&quot;&gt;#46848&lt;/a&gt; - Compose Dev Services&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/34681&quot;&gt;#34681&lt;/a&gt; - Improved testing class loader infrastructure&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44473&quot;&gt;#44473&lt;/a&gt; - Allow Hibernate ORM and Hibernate Reactive to be used in the same application&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/46398&quot;&gt;#46398&lt;/a&gt; - Apply validation modes to the Hibernate Reactive session factory config / Add tests for Reactive + Validator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/46728&quot;&gt;#46728&lt;/a&gt; - Dedicated Dev UI interface to execute HQL (Hibernate ORM) queries&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47012&quot;&gt;#47012&lt;/a&gt; - Add Jakarta Data documentation, dependency management and tests&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/46864&quot;&gt;#46864&lt;/a&gt; - Allow setting Clear-Site-Data on OIDC logout&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47254&quot;&gt;#47254&lt;/a&gt; - Add OIDC expanded configuration reference&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47127&quot;&gt;#47127&lt;/a&gt; - Support customization of gRPC server building&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47435&quot;&gt;#47435&lt;/a&gt; - Make Stork optional for REST Client&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.22, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.22.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.22&quot;&gt;Quarkus 3.22 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;compose-dev-services&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#compose-dev-services&quot;&gt;&lt;/a&gt;Compose Dev Services&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dev Services is one of the key developer joy feature of Quarkus.
It has been around for quite some time and is very handy to get simple containers started in dev and test modes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.22 introduces the ability to compose and orchestrate complex container setups as Dev Services,
by leveraging the Compose approach offered by Docker and Podman.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can learn all about it in the &lt;a href=&quot;https://quarkus.io/guides/compose-dev-services&quot;&gt;dedicated guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;improved-testing-class-loader-infrastructure&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#improved-testing-class-loader-infrastructure&quot;&gt;&lt;/a&gt;Improved testing class loader infrastructure&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This one has been in the works for quite some time and we are pleased to announce a new testing class loader infrastructure.
It fixes a lot of issues but might also introduce some issues - even if we tried hard to squash all of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can learn (a lot!) more about it in &lt;a href=&quot;https://quarkus.io/blog/test-classloading-rewrite/&quot;&gt;Holly&amp;#8217;s blog post presenting this work&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you encounter any weird class loading issues in your tests, please report back!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hibernate-orm-and-hibernate-reactive&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hibernate-orm-and-hibernate-reactive&quot;&gt;&lt;/a&gt;Hibernate ORM and Hibernate Reactive&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We used to not be able to mix Hibernate ORM and Hibernate Reactive in the same application.
This limitation has now been lifted and you can leverage the strengths of both extensions in the same app.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, Hibernate Validator is now properly integrated with Hibernate Reactive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, Quarkus 3.22 includes a new Dev UI feature:
you can execute HQL queries (as in Hibernate Query Language) directly in the Dev UI,
allowing you to very easily test your HQL queries and iterate on them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jakarta-data&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jakarta-data&quot;&gt;&lt;/a&gt;Jakarta Data&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jakarta Data has been supported by Quarkus since its inception but it wasn&amp;#8217;t properly documented.
It has now a &lt;a href=&quot;https://quarkus.io/guides/hibernate-orm#jakarta-data&quot;&gt;dedicated section&lt;/a&gt; in the Hibernate ORM guide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jakarta Data dependencies have been added to our BOM.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;oidc&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#oidc&quot;&gt;&lt;/a&gt;OIDC&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting with 3.22, on OIDC logout, you have the ability to set &lt;code&gt;Clear-Site-Data&lt;/code&gt; header by using the &lt;code&gt;quarkus.oidc.logout.clear-site-data&lt;/code&gt; configuration property.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also added a &lt;a href=&quot;https://quarkus.io/guides/security-oidc-expanded-configuration&quot;&gt;brand new guide&lt;/a&gt; with extensive coverage of the OIDC configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;grpc&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#grpc&quot;&gt;&lt;/a&gt;gRPC&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is now possible to customize the gRPC server building by implementing the &lt;code&gt;ServerBuilderCustomizer&lt;/code&gt; interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find out more about in the &lt;a href=&quot;https://quarkus.io/guides/grpc-service-implementation#custom-server-building&quot;&gt;new section&lt;/a&gt; added to the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;stork&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#stork&quot;&gt;&lt;/a&gt;Stork&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To avoid having to initialize Stork even if not needed, Stork is no longer a hard dependency of the REST Client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to leverage Stork with the REST Client, you need to add the Stork extension to your build file.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-cxf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-cxf&quot;&gt;&lt;/a&gt;Quarkus CXF&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus CXF 3.22 was released and is now available in &lt;a href=&quot;https://code.quarkus.io/?extension-search=origin:platform%20quarkus-cxf&quot;&gt;Quarkus Platform 3.22&lt;/a&gt;.
Check the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.22.0.html&quot;&gt;Quarkus CXF 3.22.0&lt;/a&gt; release notes for more information about what is new in this release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been upgraded to 3.22.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;amazon-services&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#amazon-services&quot;&gt;&lt;/a&gt;Amazon Services&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Amazon Services extensions have been upgraded to version 3.5.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.22.0.CR1&quot;&gt;3.22.0.CR1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.22.0&quot;&gt;3.22.0&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.22.1&quot;&gt;3.22.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1075 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.22 release, thanks to Aixi-dev, Ales Justin, Alexey Loubyansky, Andreas Eberle, Andy Damevin, Antonio Musarra, Auri Munoz, Barry LaFond, Bruno Baptista, Clemens Classen, Clement Escoffier, Davide D&amp;#8217;Alto, Digvijay Singh, elmodeer, Eric Deandrea, Esben Nedergaard, Fabian, Fabian Senn, feibl, Foivos Zakkak, franz1981, George Gastaldi, Georgios Andrianakis, Giancarlo Calderón Cárdenas, Guillaume Smet, Harry Chan, Holly Cummins, holomekc, Inaki Villar, ineednousername, Jan Martiska, Jeremie Bresson, Johnathan Gilday, Juan Antonio Breña Moral, Julien Ponge, Junes, Karm Michal Babacek, Katia Aresti, Ladislav Thon, Loïc Mathieu, Luca Basso Ricci, Luca Molteni, Marco Belladelli, mariofusco, marko-bekhta, Martin Bartoš, Martin Kouba, Martin Panzer, Matej Novotny, Matheus Cruz, Matheus Oliveira da Silva, Maximilian Zellhofer, Michael Edgar, Michael Musgrove, Michal Vavřík, Michiel Dockx, Mikhail Polivakha, Ozan Gunalp, Ozzy, Paulo Casaes, Peter Palaga, Phillip Krüger, Roberto Balarezo, Roberto Cortez, Rod Cheater, Rostislav Svoboda, Rüdiger zu Dohna, Sergey Beryozkin, shjones, Stuart Douglas, Stéphane Épardaud, Tamas Cservenak, Vardhman, w0pp, Yassine Haouzane, Yoann Rodière, and Yoshikazu Nojima.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 30 Apr 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-22-1-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Getting ready for secure MCP with Quarkus MCP Server</title>
            <link>
                https://quarkus.io/blog/secure-mcp-sse-server/
            </link>
            <description>
                &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26&quot;&gt;The latest version of the Model Context Protocol (MCP) specification&lt;/a&gt; introduces an &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization&quot;&gt;authorization&lt;/a&gt; flow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While it will take a bit of time for the new MCP specification to be widely supported, you can already add authentication to client and server following the &lt;a href=&quot;https://modelcontextprotocol.io/specification/2024-11-05&quot;&gt;previous MCP version&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You only need an MCP client that can receive an access token and pass it to the MCP server and, obviously, an MCP server that verifies the token.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post, we will detail how you can enforce authentication with the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server&quot;&gt;Quarkus MCP SSE Server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will first use Keycloak as an OpenID Connect (OIDC) provider to login and use a Keycloak JWT access token to access the server with &lt;code&gt;Quarkus MCP SSE Server Dev UI&lt;/code&gt; in dev mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Secondly, we will show how to log in using GitHub OAuth2 and use a GitHub binary access token to access the server in prod mode with both &lt;a href=&quot;https://modelcontextprotocol.io/docs/tools/inspector&quot;&gt;MCP inspector&lt;/a&gt; and the &lt;code&gt;curl&lt;/code&gt; tools.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;initial-mcp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#initial-mcp-server&quot;&gt;&lt;/a&gt;Step 1 - Create an MCP server using the SSE transport&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let&amp;#8217;s create a secure Quarkus MCP SSE server that requires authentication to establish Server-Sent Events (SSE) connection and also when invoking the tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find the complete project source in the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server/tree/main/samples/secure-mcp-sse-server&quot;&gt;Quarkus MCP SSE Server samples&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;initial-dependencies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#initial-dependencies&quot;&gt;&lt;/a&gt;Maven dependencies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the following dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.mcp&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-mcp-server-sse&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &amp;lt;version&amp;gt;1.1.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;

&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-oidc&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-mcp-server-sse&lt;/code&gt; is required to support MCP SSE transport.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-oidc&lt;/code&gt; is required to secure access to MCP SSE endpoints. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tool&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tool&quot;&gt;&lt;/a&gt;Tool&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s create a tool that can be invoked only if the current MCP request is authenticated:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package org.acme;

import io.quarkiverse.mcp.server.TextContent;
import io.quarkiverse.mcp.server.Tool;
import io.quarkus.security.Authenticated;
import io.quarkus.security.identity.SecurityIdentity;
import jakarta.inject.Inject;

public class ServerFeatures {

    @Inject
    SecurityIdentity identity;

    @Tool(name = &quot;user-name-provider&quot;, description = &quot;Provides a name of the current user&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    @Authenticated &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    TextContent provideUserName() {
        return new TextContent(identity.getPrincipal().getName()); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Provide a tool that can return a name of the current user. Note the &lt;code&gt;user-name-provider&lt;/code&gt; tool name, you will use it later for a tool call.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Require authenticated tool access - yes, the only difference with an unauthenticated MCP server tool is &lt;code&gt;@Authenticated&lt;/code&gt;, that&amp;#8217;s it!
See also how the main MCP SSE endpoint is secured in the &lt;a href=&quot;#initial-configuration&quot;&gt;Configuration&lt;/a&gt; section below.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use the injected &lt;code&gt;SecurityIdentity&lt;/code&gt; to return the current user&amp;#8217;s name.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;initial-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#initial-configuration&quot;&gt;&lt;/a&gt;Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, let&amp;#8217;s configure our secure MCP server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.http.auth.permission.authenticated.paths=/mcp/sse &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
quarkus.http.auth.permission.authenticated.policy=authenticated&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enforce an authenticated access to the main MCP SSE endpoint during the initial handshake. See also how the tool is secured with an annotation in the &lt;a href=&quot;#tool&quot;&gt;Tool&lt;/a&gt; section above, though you can also secure access to the tool by listing both main and tools endpoints in the configuration, for example: &lt;code&gt;quarkus.http.auth.permission.authenticated.paths=/mcp/sse,/mcp/messages/*&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are ready to test our secure MCP server in dev mode.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step-2-access-the-mcp-server-in-dev-mode&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-2-access-the-mcp-server-in-dev-mode&quot;&gt;&lt;/a&gt;Step 2 - Access the MCP server in dev mode&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;start-the-mcp-server-in-dev-mode&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#start-the-mcp-server-in-dev-mode&quot;&gt;&lt;/a&gt;Start the MCP server in dev mode&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;mvn quarkus:dev&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The configuration properties that we set in the &lt;a href=&quot;#initial-configuration&quot;&gt;Configuration&lt;/a&gt; section above are sufficient to start the application in dev mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The OIDC configuration is provided in dev mode automatically by &lt;a href=&quot;https://quarkus.io/guides/security-openid-connect-dev-services&quot;&gt;Dev Services for Keycloak&lt;/a&gt;. It creates a default realm, client and adds two users, &lt;code&gt;alice&lt;/code&gt; and &lt;code&gt;bob&lt;/code&gt;, for you to get started with OIDC immediately. You can also register a custom Keycloak realm to work with the existing realm, client and user registrations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also login to other OIDC and OAuth2 providers in OIDC Dev UI, see the &lt;a href=&quot;#mcp-server-devui&quot;&gt;Use Quarkus MCP Server Dev UI to access the MCP server&lt;/a&gt; section for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;oidc-devui&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#oidc-devui&quot;&gt;&lt;/a&gt;Use OIDC Dev UI to login and copy access token&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to &lt;a href=&quot;http://localhost:8080/q/dev&quot;&gt;Dev UI&lt;/a&gt;, find the OpenId Connect card:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_sse_server/oidc_devui.png&quot; alt=&quot;OIDC in DevUI&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Follow the &lt;code&gt;Keycloak Provider&lt;/code&gt; link and &lt;a href=&quot;https://quarkus.io/guides/security-openid-connect-dev-services#develop-service-applications&quot;&gt;login to Keycloak&lt;/a&gt; using an &lt;code&gt;alice&lt;/code&gt; name and an &lt;code&gt;alice&lt;/code&gt; password.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can login to other providers such as &lt;code&gt;Auth0&lt;/code&gt; or &lt;a href=&quot;https://quarkus.io/guides/security-openid-connect-providers#github&quot;&gt;GitHub&lt;/a&gt; from OIDC DevUI as well. The only requirement is to update your application registration to allow callbacks to DevUI. For example, see how you can &lt;a href=&quot;https://quarkus.io/guides/security-oidc-auth0-tutorial#looking-at-auth0-tokens-in-the-oidc-dev-ui&quot;&gt;login to Auth0 from Dev UI&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After logging in with &lt;code&gt;Keycloak&lt;/code&gt; as &lt;code&gt;alice&lt;/code&gt;, copy the acquired access token using a provided copy button:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_sse_server/login_and_copy_access_token.png&quot; alt=&quot;Login and copy access token&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-devui&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-devui&quot;&gt;&lt;/a&gt;Use Quarkus MCP Server Dev UI to access the MCP server&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Make sure to login and copy the access token as explained in the &lt;a href=&quot;#oidc-devui&quot;&gt;Use OIDC Dev UI to login and copy access token&lt;/a&gt; section above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to &lt;a href=&quot;http://localhost:8080/q/dev&quot;&gt;Dev UI&lt;/a&gt;, find the MCP Server card:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_sse_server/mcp_server_devui.png&quot; alt=&quot;MCP Server in DevUI&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Select its &lt;code&gt;Tools&lt;/code&gt; option and choose to &lt;code&gt;Call&lt;/code&gt; the &lt;code&gt;user-name-provider&lt;/code&gt; tool:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_sse_server/mcp_server_choose_tool.png&quot; alt=&quot;Choose MCP Server tool&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Paste the copied Keycloak access token into the Tool&amp;#8217;s &lt;code&gt;Bearer token&lt;/code&gt; field, and request a new MCP SSE session:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_sse_server/mcp_server_bearer_token.png&quot; alt=&quot;MCP Server Bearer token&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Make a tool call and get a response which contains the &lt;code&gt;alice&lt;/code&gt; user name:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_sse_server/mcp_server_tool_response.png&quot; alt=&quot;MCP Server tool response&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All is good in dev mode; it is time to see how it will work in prod mode.
Before that, stop the MCP server, which runs in dev mode.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step-3-access-the-mcp-server-in-prod-mode&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-3-access-the-mcp-server-in-prod-mode&quot;&gt;&lt;/a&gt;Step 3 - Access the MCP server in prod mode&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;register-github-application&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#register-github-application&quot;&gt;&lt;/a&gt;Register GitHub OAuth2 application&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before it was all in dev mode - using Quarkus devservices to try things out. Now, let&amp;#8217;s move to prod mode. If you already have a Keycloak instance running then you can use it. But to illustrate how OAuth2 works with more than just Keycloak, we will switch to GitHub OAuth2 when the application runs in &lt;em&gt;prod mode&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, start with registering a GitHub OAuth2 application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Follow the &lt;a href=&quot;https://quarkus.io/guides/security-openid-connect-providers#github&quot;&gt;GitHub OAuth2 registration&lt;/a&gt; process, and make sure to register the &lt;code&gt;&lt;a href=&quot;http://localhost:8080/login&quot; class=&quot;bare&quot;&gt;http://localhost:8080/login&lt;/a&gt;&lt;/code&gt; callback URL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, use the client id and secret generated during the GitHub OAuth2 application registration to &lt;a href=&quot;#update-config-to-support-github&quot;&gt;update the configuration to support GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;update-config-to-support-github&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update-config-to-support-github&quot;&gt;&lt;/a&gt;Update the configuration to support GitHub&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;#initial-configuration&quot;&gt;configuration&lt;/a&gt; that was used to run the MCP server in dev mode was suffient because Keycloak Dev Service was supporting the OIDC login.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To work with GitHub in prod mode, we update the configuration as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.http.auth.permission.authenticated.paths=/mcp/sse &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
quarkus.http.auth.permission.authenticated.policy=authenticated

%prod.quarkus.oidc.provider=github &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
%prod.quarkus.oidc.application-type=service &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;

%prod.quarkus.oidc.login.provider=github &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
%prod.quarkus.oidc.login.client-id=github-application-client-id &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
%prod.quarkus.oidc.login.credentials.secret=github-application-client-secret &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enforce an authenticated access to the main MCP SSE endpoint during the initial handshake. See also how the tool is secured with an annotation in the &lt;a href=&quot;#tool&quot;&gt;Tool&lt;/a&gt; section above.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Default Quarkus OIDC configuration requires that only GitHub access tokens can be used to access MCP SSE server.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;By default, &lt;code&gt;quarkus.oidc.provider=github&lt;/code&gt; supports an authorization code flow only. &lt;code&gt;quarkus.oidc.application-type=service&lt;/code&gt; overrides it and requires the use of bearer tokens.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use GitHub authorization code flow to support the login endpoint with a dedicated Quarkus OIDC &lt;code&gt;login&lt;/code&gt; &lt;a href=&quot;https://quarkus.io/guides/security-openid-connect-multitenancy&quot;&gt;tenant&lt;/a&gt; configuration.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use the client id and secret generated in the &lt;a href=&quot;#register-github-application&quot;&gt;Register GitHub OAuth2 application&lt;/a&gt; section.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note the use of the &lt;code&gt;%prod.&lt;/code&gt; prefixes. It ensures the configuration properties prefixed with &lt;code&gt;%prod.&lt;/code&gt; are only effective in prod mode and do not interfere with dev mode.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;implement-login-endpoint&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#implement-login-endpoint&quot;&gt;&lt;/a&gt;Implement Login endpoint&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently, MCP clients can not use the authorization code flow themselves. Therefore, we implement an OAuth2 login endpoint that will return a GitHub token for the user to use with MCP clients, which can work with bearer tokens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add another dependency to support Qute templates:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-rest-qute&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-rest-qute&lt;/code&gt; is required to generate HTML pages. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and implement the login endpoint:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package org.acme;

import io.quarkus.oidc.AccessTokenCredential;
import io.quarkus.oidc.UserInfo;
import io.quarkus.qute.Template;
import io.quarkus.qute.TemplateInstance;
import io.quarkus.security.Authenticated;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;

@Path(&quot;/login&quot;)
@Authenticated
public class LoginResource {

    @Inject
    UserInfo userInfo; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    @Inject
    AccessTokenCredential accessToken; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

    @Inject
    Template accessTokenPage;

    @GET
    @Produces(&quot;text/html&quot;)
    public TemplateInstance poem() {
        return accessTokenPage
           .data(&quot;name&quot;, userInfo.getName())
           .data(&quot;accessToken&quot;, accessToken.getToken()); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;GitHub access tokens are binary and Quarkus OIDC indirectly verifies them by using them to request GitHub specific &lt;code&gt;UserInfo&lt;/code&gt; representation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AccessTokenCredential&lt;/code&gt; is used to capture a binary GitHub access token.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;After the user logs in to GitHub and is redirected to this endpoint, the access token will be returned to the user in an HTML page generated with a simple &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server/tree/main/samples/secure-mcp-sse-server/src/main/resources/templates/accessTokenPage.html&quot;&gt;Qute template&lt;/a&gt;.
Of course, you would not do that in a real application. It is just an example to demonstrate the capability.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;package-and-run-the-mcp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#package-and-run-the-mcp-server&quot;&gt;&lt;/a&gt;Package and run the MCP Server&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Package the MCP server application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;mvn package&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;java -jar target/quarkus-app/quarkus-run.jar&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also run the MCP server from its Maven coordinates directly with &lt;code&gt;jbang&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;mvn install
jbang org.acme:secure-mcp-sse-server:1.0.0-SNAPSHOT:runner&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;login-to-github-and-copy-the-access-token&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#login-to-github-and-copy-the-access-token&quot;&gt;&lt;/a&gt;Login to GitHub and copy the access token&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Access &lt;code&gt;&lt;a href=&quot;http://localhost:8080/login&quot; class=&quot;bare&quot;&gt;http://localhost:8080/login&lt;/a&gt;&lt;/code&gt;, login to GitHub, and copy the returned access token:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_sse_server/github_access_token.png&quot; alt=&quot;GitHub access token&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, Quarkus GitHub provider submits the client id and secret in the HTTP Authorization header.
However, GitHub may require that both client id and secret are submitted as form parameters instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you get HTTP 401 error after logging in to GitHub and being redirected back to Quarkus MCP server,
try to replace &lt;code&gt;%prod.quarkus.oidc.login.credentials.secret=${github.client.secret}&lt;/code&gt; property
with the following two properties instead:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;%prod.quarkus.oidc.login.credentials.client-secret.method=post
%prod.quarkus.oidc.login.credentials.client-secret.value=${github.client.secret}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-inspector&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-inspector&quot;&gt;&lt;/a&gt;Use MCP Inspector to access the MCP server&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://modelcontextprotocol.io/docs/tools/inspector&quot;&gt;MCP Inspector&lt;/a&gt; is an interactive developer tool for testing and debugging MCP servers. Let&amp;#8217;s use it to invoke our MCP server with the authentication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Launch &lt;a href=&quot;https://modelcontextprotocol.io/docs/tools/inspector&quot;&gt;MCP inspector&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;npx @modelcontextprotocol/inspector&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensure that you have &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector/releases/tag/0.6.0&quot;&gt;modelcontextprotocol/inspector&lt;/a&gt; version 0.6.0 or later installed as it adds support for specifying bearer token authentication.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Navigate to the URL provided into a browser.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Change the &lt;em&gt;Transport Type&lt;/em&gt; dropdown to &lt;code&gt;SSE&lt;/code&gt; and the &lt;em&gt;URL&lt;/em&gt; to &lt;code&gt;&lt;a href=&quot;http://localhost:8080/mcp/sse&quot; class=&quot;bare&quot;&gt;http://localhost:8080/mcp/sse&lt;/a&gt;&lt;/code&gt; so that it targets the running Quarkus MCP Server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Select the &lt;em&gt;Authorization&lt;/em&gt; button and paste the copied GitHub access token from the browser to the &lt;code&gt;Bearer Token&lt;/code&gt; field and connect to the Quarkus MCP SSE server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_sse_server/mcp_inspector_connect.png&quot; alt=&quot;MCP Inspector Connect&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, make a &lt;code&gt;user-name-provider&lt;/code&gt; tool call:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_sse_server/mcp_inspector_tool_call.png&quot; alt=&quot;MCP Inspector Tool Call&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will see the name from your GitHub account returned.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;use-curl-to-access-the-mcp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#use-curl-to-access-the-mcp-server&quot;&gt;&lt;/a&gt;Use curl to access the MCP server&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, let&amp;#8217;s use &lt;code&gt;curl&lt;/code&gt; and also learn a little bit how both the MCP protocol and MCP SSE transport work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, open a new terminal window and access the main SSE endpoint without the GitHub access token:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl -v localhost:8080/mcp/sse&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will get HTTP 401 error.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use the access token that was obtained previously to access MCP server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell script hljs&quot; data-lang=&quot;shell script&quot;&gt;curl -v -H &quot;Authorization: Bearer gho_...&quot; localhost:8080/mcp/sse&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and get an SSE response such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;&amp;lt; content-type: text/event-stream
&amp;lt;
event: endpoint
data: /messages/ZTZjZDE5MzItZDE1ZC00NzBjLTk0ZmYtYThiYTgwNzI1MGJ&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The SSE connection is created.  Note the unique path in the received &lt;code&gt;data&lt;/code&gt;, we need this path to invoke the tools.
We cannot invoke the tool directly, we first need to follow the MCP handshake protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Open another terminal window and use the same GitHub access token to initialize the curl as MCP client, and access the tool, using the value of the &lt;code&gt;data&lt;/code&gt; property to build the target URL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Send the client initialization request:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl -v -H &quot;Authorization: Bearer gho_...&quot; -H &quot;Content-Type: application/json&quot; --data @initialize.json http://localhost:8080/mcp/messages/ZTZjZDE5MzItZDE1ZC00NzBjLTk0ZmYtYThiYTgwNzI1MGJ&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;where the &lt;code&gt;initialize.json&lt;/code&gt; file has a content like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-json hljs&quot; data-lang=&quot;json&quot;&gt;{
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;id&quot;: 1,
  &quot;method&quot;: &quot;initialize&quot;,
  &quot;params&quot;: {
    &quot;protocolVersion&quot;: &quot;2024-11-05&quot;,
    &quot;capabilities&quot;: {
      &quot;roots&quot;: {
        &quot;listChanged&quot;: true
      },
      &quot;sampling&quot;: {}
    },
    &quot;clientInfo&quot;: {
      &quot;name&quot;: &quot;CurlClient&quot;,
      &quot;version&quot;: &quot;1.0.0&quot;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Send the client initialization confirmation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl -v -H &quot;Authorization: Bearer gho_...&quot; -H &quot;Content-Type: application/json&quot; --data @initialized.json http://localhost:8080/mcp/messages/ZTZjZDE5MzItZDE1ZC00NzBjLTk0ZmYtYThiYTgwNzI1MGJ&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;where the &lt;code&gt;initialized.json&lt;/code&gt; file has a content like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-json hljs&quot; data-lang=&quot;json&quot;&gt;{
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;method&quot;: &quot;notifications/initialized&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, send the request that will invoke the tool:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl -v -H &quot;Authorization: Bearer gho_...&quot; -H &quot;Content-Type: application/json&quot; --data @call.json http://localhost:8080/mcp/messages/ZTZjZDE5MzItZDE1ZC00NzBjLTk0ZmYtYThiYTgwNzI1MGJ&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;where the &lt;code&gt;call.json&lt;/code&gt; file has a content like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-json hljs&quot; data-lang=&quot;json&quot;&gt;{
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;id&quot;: 2,
  &quot;method&quot;: &quot;tools/call&quot;,
  &quot;params&quot;: {
    &quot;name&quot;: &quot;user-name-provider&quot;,
    &quot;arguments&quot;: {
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now look at the terminal window containing the SSE connection and you will see the name from your GitHub account returned.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, we explained how you can easily create a Quarkus MCP SSE server that requires authentication, obtain an access token and use it to access the MCP server tool in dev mode with &lt;code&gt;Quarkus MCP SSE Server Dev UI&lt;/code&gt; and prod mode with both the &lt;a href=&quot;https://modelcontextprotocol.io/docs/tools/inspector&quot;&gt;MCP inspector&lt;/a&gt; and the curl tools.
You can use any MCP client that allows passing a bearer token to the server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice, that there is no real difference in how OAuth2 is done for either Quarkus MCP server or REST endpoints. The most complex part is to get the settings configured correctly for your OAuth2 provider - but when all is done you just apply a few annotations to mark relevant methods as secure and Quarkus handles the authentication for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This blog post uses the previous version of the MCP protocol. The Quarkus team is keeping a close eye on the MCP Authorization specification evolution and working on having all possible MCP Authorization scenarios supported.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stay tuned for more updates!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 28 Apr 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/secure-mcp-sse-server/
            </guid>
            
            
            
            <author>Sergey Beryozkin (https://twitter.com/sberyozkin)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.21.4 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-21-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.21.4, the fourth maintenance release for our 3.21 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.21, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.21.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.21&quot;&gt;Quarkus 3.21 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.21.4&quot;&gt;3.21.4&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 24 Apr 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-21-4-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.21.3 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-21-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.21.3, the third maintenance release for our 3.21 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.21, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.21.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.21&quot;&gt;Quarkus 3.21 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.21.3&quot;&gt;3.21.3&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 16 Apr 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-21-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #55 - April</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-55/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Max Rydahl Andersen discusses Red Hat&amp;#8217;s Middleware engineering moving to IBM and how Quarkus remains an open-source project supported by a vibrant global community in his blog post &quot;Quarkus &amp;amp; Red Hat&amp;#8217;s evolving middleware strategy&quot;. Jeff Beck&amp;#8217;s blog post &quot;The Quarkus Edge: How Real Customers Achieve Speed, Performance, and Agility&quot; that highlights real-world success stories from telco, transportation, and banking industries, showcasing how enterprises use Quarkus to achieve massive performance gains, lower costs, and improved developer productivity in cloud-native applications. Get a hands-on look at Quarkus&apos; developer experience advantages, focusing on coding constructs, testing, and configuration and not just speed in &quot;Ten Reasons for Spring Developers to Explore Quarkus&quot; by Markus Eisele. By Markus Eisele shows Quarkus is not simply &quot;catching up&quot; to Spring Boot in AI integration; it&amp;#8217;s carving its own path, leveraging its cloud-native foundation and community agility to offer a compelling platform for building modern, high-performance AI applications in &quot;Quarkus: A Lean and Agile Foundation for Enterprise Generative AI&quot;. Check out this blog post to learn how Quarkus LangChain4j and OIDC can help to create secure agentic Google Gemini AI services in &quot;Secure Agentic AI with Quarkus and Google Gemini&quot; by Sergey Beryozkin. Jianguo_Ma shows you how to observe Red Hat Quarkus applications with Azure Application Insights using OpenTelemetry. Read &quot;Migrating from AWS Lambda to EKS: Our Journey and Key Learnings&quot; by Asim Naqvi to see the details their migration journey from AWS Lambda to EKS, the challenges we faced, our architectural decisions, and the impact of moving to Kubernetes (EKS) and Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/55/&quot;&gt;Newsletter #55: April&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Fri, 11 Apr 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-55/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Optimizing Java for the Cloud-Native Era with Quarkus</title>
            <link>
                https://quarkus.io/blog/mmaler-blogpost-1-intro/
            </link>
            <description>
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/mmaler-blog-posts/optimizing-java-with-quarkus-cloud.png&quot; alt=&quot;optimizing java with quarkus cloud&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intro&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post explores how Quarkus can help organizations reduce costs, streamline development, and modernize their Java applications for today’s cloud-native environments.
It outlines the real-world benefits of adopting Quarkus and highlights how its core features address the performance and scalability challenges commonly associated with traditional Java frameworks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus is already being adopted across industries.
One example is Orange, a global telecom provider that selected Quarkus to support its 5G API initiative, and benefited from fast startup times, a lightweight footprint, and seamless integration with Kubernetes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;After evaluating multiple frameworks, Orange chose Quarkus as the optimal solution for exposing 5G APIs, thanks to its fast startup, lightweight footprint, modularity, and seamless Kubernetes deployment.
Quarkus successfully deployed 10 APIs across 4G/5G network cores, with smooth upgrades and optimized resource usage.
This solidified Quarkus as a key technology for telecom innovation.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a collection of user stories from the community, see the &lt;a href=&quot;https://quarkus.io/userstories/&quot;&gt;Quarkus user stories blog&lt;/a&gt; series.
These stories highlight how different teams and organizations are using Quarkus in the real world.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-does-quarkus-have-to-offer&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-does-quarkus-have-to-offer&quot;&gt;&lt;/a&gt;What does Quarkus have to offer?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;developer-joy-with-live-coding-and-dev-mode&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#developer-joy-with-live-coding-and-dev-mode&quot;&gt;&lt;/a&gt;Developer joy with live coding and dev mode&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus streamlines the traditional write-compile-deploy-refresh cycle by offering live coding support out of the box. As developers make changes, Quarkus automatically detects, recompiles, and redeploys the application, which eliminates the need for manual restarts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While similar functionality has existed through third-party tools, Quarkus integrates it natively and without licensing overhead. This significantly boosts productivity and enhances the developer experience.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cost-efficiency-and-performance&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cost-efficiency-and-performance&quot;&gt;&lt;/a&gt;Cost efficiency and performance&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By optimizing for low memory usage and fast startup times, Quarkus enables higher-density deployments and rapid scaling.
For comparable workloads, Quarkus typically consumes fewer resources such as CPU and memory, which can lead to significant cost savings in cloud environments.
However, organizations considering the switch should always measure and evaluate their specific workloads to validate these benefits in practice.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;reactive-at-its-core&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#reactive-at-its-core&quot;&gt;&lt;/a&gt;Reactive at its core&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At its core, Quarkus is built on Eclipse Vert.x, a high-performance reactive toolkit.
Still, it allows developers to work primarily in an imperative style while leveraging the performance benefits of its reactive underpinnings.
This hybrid approach allows developers to squeeze out even more efficiency from traditional imperative programming while offering the flexibility to adopt reactive patterns where they make sense.
Unlike traditional reactive-only frameworks, Quarkus enables developers to combine both imperative and reactive styles in a single application.
This is particularly beneficial for systems requiring high throughput and low latency, ensuring that applications remain robust under heavy load.
Quarkus&amp;#8217;s reactive model makes it ideal for event-driven architectures and microservices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A basic example of reactive messaging in Quarkus:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@ApplicationScoped
public class PriceConverter {

    @Incoming(&quot;prices&quot;)
    @Outgoing(&quot;converted-prices&quot;)
    public double convert(double priceInEuro) {
        return priceInEuro * 1.1;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this example, prices are received from one channel (&lt;code&gt;prices&lt;/code&gt;), converted, and sent to another channel (&lt;code&gt;converted-prices&lt;/code&gt;).
This pattern supports high-throughput, event-driven processing with clean and efficient logic.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An example of a reactive HTTP endpoint using reactive routes in Quarkus:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@ApplicationScoped
public class GreetingRoute {

    @Route(path = &quot;/hello&quot;, methods = HttpMethod.GET)
    public Uni&amp;lt;String&amp;gt; hello() {
        return Uni.createFrom().item(&quot;Hello from reactive route!&quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This route handles HTTP GET requests reactively using &lt;code&gt;Uni&lt;/code&gt; from Mutiny, making it easy to build non-blocking, low-latency APIs.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;which-of-your-current-development-pains-could-quarkus-solve&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#which-of-your-current-development-pains-could-quarkus-solve&quot;&gt;&lt;/a&gt;Which of your current development pains could Quarkus solve?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One often-overlooked benefit of Quarkus is how it improves onboarding and standardization across teams.
With built-in conventions, automatic service provisioning, and curated extension defaults, Quarkus helps developers get up to speed quickly and encourages consistent patterns across projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dev-services&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dev-services&quot;&gt;&lt;/a&gt;Dev Services&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus Dev Services reduce friction during development and testing by automatically provisioning required services such as databases, message brokers, or identity providers.
For example, if your application includes PostgreSQL, Kafka, or Keycloak extensions, Quarkus can spin up the necessary containers without any manual setup.
This allows you to focus on coding instead of configuring infrastructure, accelerating your local development workflow.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;vast-extension-ecosystem&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vast-extension-ecosystem&quot;&gt;&lt;/a&gt;Vast extension ecosystem&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus offers a rich extension ecosystem that simplifies integration with essential technologies such as databases, messaging systems, authentication providers, and cloud services.
In addition to official extensions, the Quarkiverse community provides a growing collection of open-source extensions maintained by contributors across the ecosystem.
This broadens the range of supported technologies and enables developers to benefit from shared solutions and community expertise.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Popular extensions include:
* &lt;code&gt;quarkus-hibernate-orm&lt;/code&gt; and &lt;code&gt;quarkus-jdbc-postgresql&lt;/code&gt; for seamless data persistence.
* &lt;code&gt;quarkus-smallrye-reactive-messaging&lt;/code&gt; and &lt;code&gt;quarkus-kafka-client&lt;/code&gt; for reactive messaging and Apache Kafka integration.
* &lt;code&gt;quarkus-oidc&lt;/code&gt; for implementing OpenID Connect authentication and securing applications.
* &lt;code&gt;quarkus-micrometer&lt;/code&gt; and &lt;code&gt;quarkus-opentelemetry&lt;/code&gt; for observability, metrics, and tracing.
* &lt;code&gt;quarkus-container-image-docker&lt;/code&gt; and &lt;code&gt;quarkus-kubernetes&lt;/code&gt; for containerization and deployment to Kubernetes platforms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These extensions are widely adopted because they reduce boilerplate, provide reliable default configurations out of the box, and follow cloud-native best practices—making it easy to plug Quarkus into real-world architectures.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;ok-i-would-like-to-try-it-but-is-it-easy-enough-to-migrate-my-workflow-to-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ok-i-would-like-to-try-it-but-is-it-easy-enough-to-migrate-my-workflow-to-quarkus&quot;&gt;&lt;/a&gt;“OK, I would like to try it, but is it easy enough to migrate my workflow to Quarkus?”&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Migrating to a new framework can feel daunting, even when it promises better performance, lower costs, and an improved developer experience.
It’s like being offered a better house in a better neighborhood, but hesitating because of the hassle of packing, moving, and settling in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Quarkus, the transition doesn’t have to be disruptive.
Thanks to its compatibility with standard Java APIs, support for Jakarta EE and Spring, and a wide range of extensions, many projects can adopt Quarkus incrementally without rewriting existing code.
Whether you&amp;#8217;re coming from a traditional Java EE application server, a Spring-based stack, or another framework such as Micronaut or Dropwizard, Quarkus provides familiar APIs, tooling, and migration guides to ease the transition.
The platform supports commonly used Jakarta specifications like JAX-RS, CDI, JPA, and Bean Validation out of the box.
For Spring users, the compatibility layer includes support for widely used annotations and components.
See the &lt;a href=&quot;https://quarkus.io/guides/spring-di&quot;&gt;Spring DI guide&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Need assistance getting started?
You’re not alone.
The Quarkus team offers expert guidance throughout the migration journey, from initial architecture reviews to production readiness.
Whether you&amp;#8217;re evaluating the framework or planning a full transition, support is available to help ensure a smooth and successful adoption.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All it takes is a decision to move forward.
Your team deserves a faster, leaner, and cloud-native future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;concluding-note&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#concluding-note&quot;&gt;&lt;/a&gt;Concluding note&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus is redefining Java development by combining modern features with the robustness of the Java ecosystem.
Its focus on developer productivity, performance, and seamless integration positions it as a formidable framework for building efficient, cloud-native applications.
Whether you&amp;#8217;re looking to optimize costs, enhance development speed, or adopt a reactive approach, Quarkus is a game-changer for Java developers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The end.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/mmaler-blogpost-1-intro/
            </guid>
            
            
            
            <author>Michal Mickey Maléř (https://twitter.com/mickeymaler)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.21.2 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-21-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.21.2, the second maintenance release for our 3.21 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;noticeable-changes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#noticeable-changes&quot;&gt;&lt;/a&gt;Noticeable changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;junit-update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#junit-update&quot;&gt;&lt;/a&gt;JUnit update&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We had to update JUnit from 5.10 to 5.12 to solve an alignment issue with Mockito.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JUnit 5.11 comes with &lt;a href=&quot;https://junit.org/junit5/docs/5.11.1/release-notes/#release-notes-5.11.0-junit-platform-bug-fixes&quot;&gt;several changes&lt;/a&gt; to how hierarchies of tests are handled
so you might have to adjust your tests accordingly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.21, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.21.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.21&quot;&gt;Quarkus 3.21 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.21.2&quot;&gt;3.21.2&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 09 Apr 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-21-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.21.1 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-21-1-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.21.1, the first maintenance release for our 3.21 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.21, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.21.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.21&quot;&gt;Quarkus 3.21 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.21.1&quot;&gt;3.21.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-21-1-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.21 - TLS Registry support for MongoDB Client</title>
            <link>
                https://quarkus.io/blog/quarkus-3-21-0-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, together with &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-20-0-released/&quot;&gt;Quarkus 3.20 LTS&lt;/a&gt;, we released Quarkus 3.21.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whereas Quarkus 3.20 LTS is the direct continuation of Quarkus 3.19, Quarkus 3.21 comes with new features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It comes with a lot of small enhancements and the support for the TLS Registry in the MongoDB Client extension.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.21, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.21.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.21&quot;&gt;Quarkus 3.21 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tls-registry-support-for-mongodb-client&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tls-registry-support-for-mongodb-client&quot;&gt;&lt;/a&gt;TLS registry support for MongoDB Client&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We continue to deploy the TLS registry we included a while ago to centralize and simplify the TLS configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this version, we added TLS registry support to the MongoDB Client extension.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-cxf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-cxf&quot;&gt;&lt;/a&gt;Quarkus CXF&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus CXF 3.21 was released and is now available in &lt;a href=&quot;https://code.quarkus.io/?extension-search=origin:platform%20quarkus-cxf&quot;&gt;Quarkus Platform 3.21&lt;/a&gt;.
Check the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.21.0.html&quot;&gt;Quarkus CXF 3.21.0&lt;/a&gt; release notes for more information about what is new in this release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been upgraded to 3.20.0.
You can consult the &lt;a href=&quot;https://camel.apache.org/blog/camel-quarkus-release-3.20.0&quot;&gt;release notes&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;amazon-services&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#amazon-services&quot;&gt;&lt;/a&gt;Amazon Services&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Amazon Services extensions have been upgraded to version 3.3.1.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.21.0.CR1&quot;&gt;3.21.0.CR1&lt;/a&gt; and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.21.0&quot;&gt;3.21.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1068 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.21 release, thanks to Ales Justin, Alexander Schwartz, Alexey Loubyansky, Andrea Boriero, Andreas Maechler, Andy Damevin, Auri Munoz, Bill Burke, Bruno Baptista, Clement Escoffier, cmoulliard, David Cotton, dc1248, Dennis Kronbügel, Fabian, Felix König, Foivos Zakkak, Francesco Nigro, Georg Leber, George Gastaldi, Georgios Andrianakis, Giancarlo Calderón Cárdenas, Guillaume Nodet, Guillaume Smet, Holly Cummins, i10320, Ioannis Canellos, Jakub Jedlicka, Jan Martiska, jcjveraa, Jose Carvajal, Karm Michal Babacek, Katia Aresti, Khosbilegt Bilegsaikhan, Ladislav Thon, Loïc Mathieu, Luis Rubiera, Marco Belladelli, marko-bekhta, Martin Kouba, Martin Panzer, masecla22, Matej Novotny, Matheus Cruz, Maximilian Zellhofer, Melloware, Michal Maléř, Michal Vavřík, Ozan Gunalp, Peter Palaga, PhilKes, Phillip Krüger, Robert Stupp, Robert Toyonaga, Roberto Cortez, Rolfe Dlugy-Hegwer, Ryan Dens, Rüdiger zu Dohna, Sanne Grinovero, Sergey Beryozkin, Severin Gehwolf, shjones, SpaceFox, Stephan Strate, Steve Hawkins, Stuart Douglas, Tamas Cservenak, Thom Castermans, Thomas Canava, Thomas Segismont, w0pp, Welton Rodrigo Torres Nascimento, Willem Jan Glerum, xstefank, Yoann Rodière, and Yoshikazu Nojima.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-21-0-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.20 - new LTS version</title>
            <link>
                https://quarkus.io/blog/quarkus-3-20-0-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is our pleasure to announce the release of Quarkus 3.20, which is our new LTS (Long Term Support) version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This version is built on the top of Quarkus 3.19 with some additional bugfixes.
New features landed in &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-21-0-released/&quot;&gt;Quarkus 3.21&lt;/a&gt;, which was also released today.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to know more about our LTS policy, the &lt;a href=&quot;https://quarkus.io/blog/lts-releases/&quot;&gt;LTS announcement&lt;/a&gt; is a must read.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;LTS releases are supported for 12 months.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are coming from the previous LTS, Quarkus 3.15, there are a lot of exciting new features and we recommend reading the following announcements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-3-16-1-released/&quot;&gt;Quarkus 3.16 - OpenTelemetry Logging, LGTM Quarkus dashboard and too many things to list here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-3-17-0-released/&quot;&gt;Quarkus 3.17 - Observability improvements, programmatic permission checkers, MicroProfile REST Client 4.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-3-18-1-released/&quot;&gt;Quarkus 3.18 - Micrometer for WebSockets Next, Security WebAuthn based on WebAuthn4J, Kubernetes Client 7&amp;#8230;&amp;#8203;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-3-19-1-released/&quot;&gt;Quarkus 3.19 - UBI 9 images, Micrometer to OpenTelemetry bridge, JEP 483 new AOT cache&amp;#8230;&amp;#8203;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.20, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.20 LTS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are upgrading from 3.19, there&amp;#8217;s nothing to do as 3.20 is the direct continuation of 3.19.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are upgrading from the previous LTS, Quarkus 3.15, please refer to the following migration guides:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.16&quot;&gt;Migration guide for 3.16&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.17&quot;&gt;Migration guide for 3.17&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.18&quot;&gt;Migration guide for 3.18&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.19&quot;&gt;Migration guide for 3.19&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.20&quot;&gt;Migration guide for 3.20&lt;/a&gt; - this one is empty as 3.20 is the continuation of 3.19&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; should handle most of the heavy lifting for you,
but there are still cases that should be handled manually and we recommend reading these migration guides carefully.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been updated to 3.20.0.
You can find everything you need to know about it in the &lt;a href=&quot;https://camel.apache.org/blog/camel-quarkus-release-3.20.0&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-cxf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-cxf&quot;&gt;&lt;/a&gt;Quarkus CXF&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus CXF 3.20 was released and is now available in &lt;a href=&quot;https://code.quarkus.io/?extension-search=origin:platform%20quarkus-cxf&quot;&gt;Quarkus Platform 3.20&lt;/a&gt;.
Check the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.20.0.html&quot;&gt;Quarkus CXF 3.20.0&lt;/a&gt; release notes for more information about what is new in this release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;amazon-services&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#amazon-services&quot;&gt;&lt;/a&gt;Amazon Services&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Amazon Services extensions have been upgraded to version 3.3.1.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The core part of Quarkus 3.20.0 is a rebadged release of Quarkus 3.19.4 so nothing new here.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1068 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.20 release, thanks to Ales Justin, Alexey Loubyansky, Andreas Maechler, Andy Damevin, Auri Munoz, brunobat, Clement Escoffier, cmoulliard, David Cotton, Dennis Kronbügel, Fabian, Foivos Zakkak, Georg Leber, George Gastaldi, Georgios Andrianakis, Guillaume Smet, Jakub Jedlicka, Jan Martiska, jcjveraa, Karm Michal Babacek, Katia Aresti, Ladislav Thon, Marco Belladelli, Martin Kouba, Martin Panzer, masecla22, Maximilian Zellhofer, melloware, Michal Maléř, Michal Vavřík, Ozan Gunalp, Peter Palaga, Phillip Kruger, Robert Stupp, Roberto Cortez, Rolfe Dlugy-Hegwer, Ryan Dens, Rüdiger zu Dohna, Sergey Beryozkin, shjones, Stephan Strate, Steve Hawkins, Stuart Douglas, Thomas Canava, w0pp, Welton Rodrigo Torres Nascimento, Willem Jan Glerum, xstefank, and Yoshikazu Nojima.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The list is a bit smaller than usual as 3.20 only contains bugfixes on top of 3.19.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-20-0-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Movie similarity search using vector databases</title>
            <link>
                https://quarkus.io/blog/movie-similarity-search-using-vector-databases/
            </link>
            <description>
                &lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With LLMs becoming increasingly popular we often see them being used even for tasks that are not directly related to text generation.
Such case is using LLMs for recommendation systems. In this post we&amp;#8217;ll see how you can build such a system using &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html&quot;&gt;Quarkus LangChain4j&lt;/a&gt;
but without using LLMs. More specifically we&amp;#8217;ll create a simple movie similarity search system using a vector database. The role
of &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html&quot;&gt;Quarkus LangChain4j&lt;/a&gt; in this story is to abstract the underlying vector database through the &lt;code&gt;EmbeddingStore&lt;/code&gt; interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A relevant sample has been recently added to the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/&quot;&gt;Quarkus LangChain4j samples&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;embeddings&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#embeddings&quot;&gt;&lt;/a&gt;Embeddings&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An embedding is a way to represent unstructured data (text, images etc.) in a structured way. This is done by mapping the data into a vector.
As we are able to perform mathematical operations on vectors, such as calculating the distance between them, we can use embeddings to calculate
how close (or similar) two pieces of data are. In our case, comparing the embeddings of the movie overview can give us a measure of how similar
the two movies are. This is the premise of this post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;how-are-embeddings-created&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-are-embeddings-created&quot;&gt;&lt;/a&gt;How are embeddings created?&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are multiple ways to create embeddings. &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html&quot;&gt;Quarkus LangChain4j&lt;/a&gt; provides the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/in-process-embedding.html&quot;&gt;In-process embedding&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/llms.html&quot;&gt;Model provider&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post we&amp;#8217;ll use the former. Did I mention that we won&amp;#8217;t be using LLMs?
Instead, we&amp;#8217;ll be using &lt;a href=&quot;https://github.com/pgvector/pgvector&quot;&gt;pgvector&lt;/a&gt; which is a PostgreSQL extension that provides vector operations and indexing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our project will need the following dependencies, for &lt;a href=&quot;https://github.com/pgvector/pgvector&quot;&gt;pgvector&lt;/a&gt; and &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/in-process-embedding.html&quot;&gt;in-process embedding&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;dev.langchain4j&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;langchain4j-embeddings-bge-small-en-q&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;quarkus-langchain4j-pgvector&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To be able to use these dependencies without needing to specify versions, the BOM can be imported to the &lt;code&gt;dependencyManagement&lt;/code&gt; of the project:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-langchain4j-bom&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.25.0&amp;lt;/version&amp;gt;
    &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
    &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To properly use the in-process embedding model we need to configure it in the &lt;code&gt;application.properties&lt;/code&gt; file.
We also need to configure the pgvector dimension and ensure it&amp;#8217;s aligned with the dimension of the embedding model.
In our case, it&amp;#8217;s 384 (the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html&quot;&gt;Quarkus LangChain4j&lt;/a&gt; documentation provides the size used by each model).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, the &lt;code&gt;application.properties&lt;/code&gt; file should look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.langchain4j.pgvector.dimension=384
quarkus.langchain4j.embedding-model.provider=dev.langchain4j.model.embedding.onnx.bgesmallenq.BgeSmallEnQuantizedEmbeddingModel&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: We can use any other document store supported by &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html&quot;&gt;Quarkus LangChain4j&lt;/a&gt;, in fact that&amp;#8217;s one of the key benefits of using it, the abstraction
of embeddings stores.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;storing-the-embedding&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#storing-the-embedding&quot;&gt;&lt;/a&gt;Storing the embedding&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To store the embedding we&amp;#8217;ll need an &lt;code&gt;EmbeddingStoreIngestor&lt;/code&gt; The ingestor is created using the &lt;code&gt;EmbeddingModel&lt;/code&gt; and the &lt;code&gt;EmbeddingStore&lt;/code&gt;, both provided
as beans and can be easily injected. Alternatively, the user can specify a document splitter, for splitting large documents into smaller chunks, but we won&amp;#8217;t be needing that
in this post, as the movie overview are relatively small.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/similarity-search-using-vector-dbs/ingestion.png&quot; alt=&quot;ingestion&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before passing the unstructured text to the ingestor we need to wrap it in a &lt;code&gt;Document&lt;/code&gt; object. The &lt;code&gt;Document&lt;/code&gt; also contains a &lt;code&gt;Metadata&lt;/code&gt; object which holds key-value pairs.
The &lt;code&gt;Metadata&lt;/code&gt; is really handy as we can add there information needed for correlating the &lt;code&gt;Document&lt;/code&gt; with other data. In our case we&amp;#8217;ll use the &lt;code&gt;Metadata&lt;/code&gt; to store the id of the movie.
That id will help us correlate the movie overview with the actual movie.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The simplified code below shows, how the actual ingestor is created and how the embedding is stored.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@Inject
EmbeddingModel embeddingModel;

@Inject
EmbeddingStore embeddingStore;

public EmbeddingStoreIngestor createIngestor()  {
    return EmbeddingStoreIngestor.builder()
    .embeddingModel(embeddingModel)
    .embeddingStore(embeddingStore)
    .build();
}

public void ingest(Long movieId, String overview) {
      Metadata metadata = Metadata.from(Map.of(&quot;id&quot;, id));
      Document document = Document.from(overview, metadata);
      createIngestor().ingest(document);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, how exactly do we use the movie id ? This depends really on how we store the rest of the movie data. In our case, we&amp;#8217;ll store the movie data in a PostgreSQL database.
This means that the movie id, corresponds to the id of the Movie in the database.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;querying-the-embedding&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#querying-the-embedding&quot;&gt;&lt;/a&gt;Querying the embedding&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To query the embedding we&amp;#8217;ll use the &lt;code&gt;EmbeddingStore&lt;/code&gt; and the &lt;code&gt;EmbeddingModel&lt;/code&gt; in order to execute &lt;code&gt;EmbeddingSearchRequest&lt;/code&gt;.
The code is pretty straight forward. We use the movie overview to create a search request. The &lt;code&gt;EmbeddingSearchRequest&lt;/code&gt; builder
also allows us to specify the maximum number of results and also the minimum similarity threshold. The later allows us to filter
out embeddings that are not similar enough to the query embedding. In other words, it tells the store that if there are not enough similar results
to avoid adding irrelevant results to the response.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import java.util.List;

import dev.langchain4j.data.embedding.Embedding;
import dev.langchain4j.data.segment.TextSegment;
import dev.langchain4j.model.embedding.EmbeddingModel;
import dev.langchain4j.store.embedding.EmbeddingSearchRequest;
import dev.langchain4j.store.embedding.EmbeddingStore;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.transaction.Transactional;

@ApplicationScoped
public class MovieRecommendationService {

  @Inject
  EmbeddingStore&amp;lt;TextSegment&amp;gt; embeddingStore;

  @Inject
  EmbeddingModel embeddingModel;

  @Transactional
  public List&amp;lt;Movie&amp;gt; searchSimilarMovies(String overview) {

    Embedding embedding = embeddingModel.embed(overview).content();
    EmbeddingSearchRequest request = EmbeddingSearchRequest.builder()
    .queryEmbedding(embedding)
    .minScore(0.5)
    .maxResults(10)
    .build();

    return embeddingStore.search(request).matches().stream().map(m -&amp;gt; {
      Long id = m.embedded().metadata().getLong(&quot;id&quot;);
      Movie movie = Movie.findById(id);
      return movie;
    }).toList();

  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;loading-the-movies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#loading-the-movies&quot;&gt;&lt;/a&gt;Loading the movies&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To populate the movies in the database, we&amp;#8217;ll use a CSV file containing the top 1000 movies from IMDB.
The important columns for us are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;title&lt;/code&gt; the movie title&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;overview&lt;/code&gt; the movie overview&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;link&lt;/code&gt; the link to the image poster&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To easily map CSV entries to &lt;code&gt;Movie&lt;/code&gt; objects we&amp;#8217;ll use &lt;code&gt;Jackson&lt;/code&gt;. Specifically, we will use the &lt;code&gt;@JsonProperty&lt;/code&gt;
annotation to map the CSV columns to the &lt;code&gt;Movie&lt;/code&gt; fields. Also, we&amp;#8217;ll use &lt;code&gt;@JsonIgnoreProperties(ignoreUnknown = true)&lt;/code&gt;
to ignore unknown fields.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, a simplified version of our Movie entity object looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package org.acme;

import io.quarkus.hibernate.orm.panache.PanacheEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;


@Entity
@JsonIgnoreProperties(ignoreUnknown = true)
public class Movie extends PanacheEntity {

    @JsonProperty(&quot;Poster_Link&quot;)
    public String link;
    @JsonProperty(&quot;Series_Title&quot;)
    public String title;
    @JsonProperty(&quot;Overview&quot;)
    @Column(length = 1000)
    public String overview;

    public static List&amp;lt;Movie&amp;gt; searchByTitleLike(String title) {
      return find(&quot;title like ?1&quot;, &quot;%&quot; + title + &quot;%&quot;).list();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, now we are ready to load our movies from the CSV to our relational and vector databases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Key points:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Observing the &lt;code&gt;StartupEvent&lt;/code&gt; allows us to load the movies when the application starts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CSVMapper is used to map the CSV entries to &lt;code&gt;Movie&lt;/code&gt; objects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We save each movie using a @Transaction method because we need that &lt;code&gt;id&lt;/code&gt; that&amp;#8217;s often generated by the database&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We ingest the documents in a batch. This can make a huge difference especially, if we move from in-process to remote embedding models.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package org.acme;

import io.quarkus.logging.Log;
import io.quarkus.runtime.StartupEvent;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Observes;
import jakarta.transaction.Transactional;

import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.eclipse.microprofile.config.inject.ConfigProperty;

import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.dataformat.csv.CsvMapper;
import com.fasterxml.jackson.dataformat.csv.CsvSchema;

import dev.langchain4j.data.document.Document;
import dev.langchain4j.data.document.Metadata;
import dev.langchain4j.model.embedding.EmbeddingModel;
import dev.langchain4j.store.embedding.EmbeddingStore;
import dev.langchain4j.store.embedding.EmbeddingStoreIngestor;

@ApplicationScoped
public class MovieLoader {


  public void load(@Observes StartupEvent event, @ConfigProperty(name = &quot;movies.file&quot;) Path moviesFile,
                   EmbeddingStore embeddingStore, EmbeddingModel embeddingModel) throws Exception {
    if (!Files.exists(moviesFile)) {
      throw new IllegalStateException(&quot;Missing movies file: &quot; + moviesFile);
    }

    embeddingStore.removeAll();

    EmbeddingStoreIngestor ingester = EmbeddingStoreIngestor.builder()
    .embeddingModel(embeddingModel)
    .embeddingStore(embeddingStore)
    .build();

    List&amp;lt;Document&amp;gt; docs = new ArrayList&amp;lt;&amp;gt;();
    try (MappingIterator&amp;lt;Movie&amp;gt; it = new CsvMapper().readerFor(Movie.class).with(CsvSchema.emptySchema().withHeader()).readValues(moviesFile.toFile())) {
      for (Movie movie : it.readAll()) {
        Long id = save(movie).id;
        Metadata metadata = Metadata.from(Map.of(&quot;id&quot;, id, &quot;title&quot;, movie.title));
      Document document = Document.from(movie.overview, metadata);
      docs.add(document);

      }
    }

    Log.info(&quot;Ingesting movies...&quot;);
    ingester.ingest(docs);
    Log.info(&quot;Application initalized!&quot;);
  }

  @Transactional
  public Movie save(Movie m) {
    m.persist();
    return m;
  }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use the CSV mapper, we&amp;#8217;ll need to Jackson&amp;#8217;s CSV dataformat dependency:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.fasterxml.jackson.dataformat&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jackson-dataformat-csv&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The path of the movies file is specified in the &lt;code&gt;application.properties&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;movies.file=src/main/resources/movies.csv&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;bringing-it-all-together&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#bringing-it-all-together&quot;&gt;&lt;/a&gt;Bringing it all together&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The only thing that&amp;#8217;s left is to create a REST endpoint that allows us to search for similar movies. We could also use a simple UI.
Let&amp;#8217;s start with the REST endpoint. It&amp;#8217;s pretty straightforward. We need two methods, one for searching movies and one for searching similar movies.
For the former we just use the &lt;code&gt;Movie&lt;/code&gt; entity, for the latter we inject and use the &lt;code&gt;MovieRecommendationService&lt;/code&gt; we created earlier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import java.util.List;

@Path(&quot;/movies&quot;)
public class MovieResource {

    @Inject
    MovieRecommendationService recommendationService;

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Path(&quot;/by-title/{title}&quot;)
    public List&amp;lt;Movie&amp;gt; searchByTitle(String title) {
      return Movie.searchByTitleLike(title);
    }

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Path(&quot;/similar/{id}&quot;)
    public List&amp;lt;Movie&amp;gt; searchSimilar(Long id) {
      Movie m = Movie.findById(id);
      return recommendationService.searchSimilarMovies(m.overview);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the UI, let&amp;#8217;s just use a simple HTML page that uses the REST endpoint to search for similar movies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The key elements of that page are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;movie-box: a text field for entering the movie title&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;search-results: an unordered list for displaying the search results&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;movie-overview: div for displaying the overview of the selected movie&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;movie-poster: an image for displaying the movie poster&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;similar-results: an additional unordered list for displaying the similar movies&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s important to remember that the &lt;code&gt;Movie&lt;/code&gt; entity is using Jackson to map the CSV columns to the entity fields.
This means that when a &lt;code&gt;Movie&lt;/code&gt; is serialized to JSON, it will use the CSV column names as the field names and not
the entity field names. The HTML code below needs to take that into consideration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-html hljs&quot; data-lang=&quot;html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
	&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;{{_title_}}&amp;lt;/title&amp;gt;
		&amp;lt;meta charset=&quot;UTF-8&quot;/&amp;gt;
		&amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;/&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
    &amp;lt;h2&amp;gt;Movie Similarity Search&amp;lt;/h2&amp;gt;
    &amp;lt;input type=&quot;text&quot; id=&quot;movie-box&quot; placeholder=&quot;Enter a movie title&quot;&amp;gt;
    &amp;lt;h3 hidden=&quot;true&quot; id=&quot;movie-results-heading&quot;&amp;gt;Click on of the movies below&amp;lt;/h3&amp;gt;
    &amp;lt;ul id=&quot;search-results&quot;&amp;gt;&amp;lt;/ul&amp;gt;
    &amp;lt;img id=&quot;movie-poster&quot;&amp;gt;&amp;lt;img&amp;gt;
    &amp;lt;div id=&quot;movie-overview&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;h3 hidden=&quot;true&quot; id=&quot;similar-heading&quot;&amp;gt;Similar movies&amp;lt;/h3&amp;gt;
    &amp;lt;ul id=&quot;similar-results&quot;&amp;gt;&amp;lt;/ul&amp;gt;

    &amp;lt;script&amp;gt;
    document.getElementById(&quot;movie-box&quot;).addEventListener(&quot;input&quot;, async function() {
        const query = this.value.trim();
        if (query.length === 0) {
          document.getElementById(&quot;search-results&quot;).innerHTML = &quot;&quot;;
          return;
        }
      const response = await fetch(`/movies/by-title/${encodeURIComponent(query)}`);
        const movies = await response.json();

        if (movies.length &amp;gt; 0) {
          document.getElementById(&quot;movie-results-heading&quot;).hidden = false;
        }
        movies.forEach(movie =&amp;gt; {
          const li = document.createElement(&quot;li&quot;);
          li.textContent = movie.Series_Title;
          li.addEventListener(&quot;click&quot;, () =&amp;gt; displayMovie(movie));
          document.getElementById(&quot;search-results&quot;).appendChild(li);
        });
    });

    async function displayMovie(movie) {
      console.log(&apos;Displaying movie:&apos;, movie);
      document.getElementById(&quot;search-results&quot;).innerHTML = &quot;&quot;;
      document.getElementById(&quot;movie-poster&quot;).src = movie.Poster_Link;
      document.getElementById(&quot;movie-poster&quot;).style.display = &quot;block&quot;;
      document.getElementById(&quot;movie-overview&quot;).textContent = movie.Overview;
      document.getElementById(&quot;similar-heading&quot;).hidden = false;
      document.getElementById(&quot;movie-results-heading&quot;).hidden = true;
      document.getElementById(&quot;similar-results&quot;).innerHTML = &quot;&quot;;

      const response = await fetch(`/movies/similar/${encodeURIComponent(movie.id)}`);
      const similarMovies = await response.json();
        similarMovies.forEach(similarMovie =&amp;gt; {
           const li = document.createElement(&quot;li&quot;);
           li.textContent = similarMovie.Series_Title;
           li.addEventListener(&quot;click&quot;, () =&amp;gt; displayMovie(similarMovie));
           document.getElementById(&quot;similar-results&quot;).appendChild(li);
        });
    }
    &amp;lt;/script&amp;gt;
	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I won&amp;#8217;t go into much detail about the HTML code as it&amp;#8217;s outside the scope of this post.
The final results should look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/similarity-search-using-vector-dbs/movie-similarity-search-ui.png&quot; alt=&quot;movie similarity search ui&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The quality of the recommendations depends on the accuracy of the movie overview and also on the quality of the embeddings.
This means that better embedding models can lead to better recommendations. The vector database used could possibly also
affect the quality of the recommendations, but that&amp;#8217;s a topic for another post.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 24 Mar 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/movie-similarity-search-using-vector-databases/
            </guid>
            
            
            
            <author>Ioannis Canellos</author>
            
        </item>
        
        <item>
            <title>Sender-constraining access tokens with Quarkus OIDC</title>
            <link>
                https://quarkus.io/blog/sender-constraining-tokens/
            </link>
            <description>
                &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Single-page application (SPA) runs in the browser and uses &lt;a href=&quot;https://quarkus.io/guides/security-oidc-code-flow-authentication#overview-of-the-oidc-authorization-code-flow-mechanism&quot;&gt;OIDC authorization code flow&lt;/a&gt; to log-in users, without depending on Quarkus OIDC. When the authentication is complete, SPA sends the access token to access Quarkus on behalf of the authenticated user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Have a look at the simple diagram showing how this process works, copied to this post from the &lt;a href=&quot;https://quarkus.io/guides/security-oidc-bearer-token-authentication&quot;&gt;OIDC Bearer token guide&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sender-constraining-tokens/security-bearer-token-spa.png&quot; alt=&quot;SPA and Quarkus Service&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As illustrated in the picture above, the OIDC provider authenticates the current user, SPA receives ID and access tokens and uses the access token to access the Quarkus endpoint.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The security challenge that the OAuth2 experts have been trying to address is how to prove that the client such as SPA which is sending the token actually owns this token ? There is nothing in the HTTP &lt;code&gt;Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code&gt; header that proves that SPA did not leak the token.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Two specifications for sender-constraining access tokens have emerged over the years, &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8705&quot;&gt;RFC 8705: Mutual TLS Client Authentication and Certificate-Bound Access Tokens&lt;/a&gt; and &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9449&quot;&gt;RFC 9449: OAuth 2.0 Demonstrating Proof-of-Possession (DPoP)&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;mutual-tls-client-authentication-and-certificate-bound-access-tokens&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mutual-tls-client-authentication-and-certificate-bound-access-tokens&quot;&gt;&lt;/a&gt;Mutual TLS Client Authentication and Certificate-Bound Access Tokens&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8705&quot;&gt;Mutual TLS Client Authentication and Certificate-Bound Access Tokens&lt;/a&gt; specification describes how access tokens can be cryptographically bound to the MTLS client certificate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By proving that the access token is bound to the client certificate, the Quarkus application can get a high degree of confidence that the current access token is constrained to, owned by the client which authenticated to Quarkus over MTLS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sender-constraining-tokens/oidc-mtls-binding.png&quot; alt=&quot;OIDC DPoP&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Implementing the cryptographic binding is not complex in this case. The current access token is expected to contain a confirmation with the SHA-256 certificate thumbprint and it must match the thumbprint of the current MTLS client certificate. If the token is in JWT format, then it must include a confirmation claim. If the token is binary then the confirmation must be included in the remote token introspection response.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Such a binding can only be successful if the OpenId Connect provider has access to the same client certificate which is used during the MTLS authentication to Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The downside of using the MTLS token binding is that correctly configuring the OpenId Connect provider, ensuring that browsers can request an X509 certiticate authentication when SPA redirects the user to authenticate to the OIDC provider is complex.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Keycloak user, check the &lt;a href=&quot;https://www.keycloak.org/docs/latest/server_admin/#con-advanced-settings_server_administration_guide&quot;&gt;OAuth 2.0 Mutual TLS Certificate Bound Access Tokens Enabled&lt;/a&gt; in the Advanced Configuration section of the &lt;a href=&quot;https://www.keycloak.org/docs/latest/server_admin&quot;&gt;Keycloak Server Administration documentation&lt;/a&gt; and the &lt;a href=&quot;https://tech.aufomm.com/how-to-use-certificate-bound-access-token-with-kong-and-keycloak/&quot;&gt;How to Use Certificate-Bound Access Token with Kong and Keycloak&lt;/a&gt; community blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As far as Quarkus is concerned, you only need to set a single OIDC configuration property, &lt;code&gt;quarkus.oidc.token.binding.certificate=true&lt;/code&gt;, in addition to the Vert.x HTTP MTLS configuration, to enforce the MTLS token binding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://quarkus.io/guides/security-oidc-bearer-token-authentication#mutual-tls-token-binding&quot;&gt;Quarkus OIDC Mutual TLS Token Binding&lt;/a&gt; documentation for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;demonstrating-proof-of-possession-dpop&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#demonstrating-proof-of-possession-dpop&quot;&gt;&lt;/a&gt;Demonstrating Proof-of-Possession (DPoP)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9449&quot;&gt;Demonstrating Proof-of-Possession (DPoP)&lt;/a&gt; specification describes how access tokens can be cryptographically bound to special JWT tokens called DPoP proofs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sender-constraining-tokens/oidc-dpop.png&quot; alt=&quot;OIDC DPoP&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The SPA client generates a private and public key pair, and creates a DPoP proof token to complete the access token acquisition from the OIDC provider. It then forwards this DPoP token to Quarkus with a new DPoP proof. The access token must be bound to the DPoP proof by containing a public JSON Web Key (JWK) key thumbprint which matches the thumbprint of the public JWK key contained in the DPoP proof.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This binding can only be successful if the client uses the same public and private key pair for creating the DPoP proof to request the access token in the previous step and creating another DPoP proof for submitting it alongside the DPoP access token to Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus OIDC will also enforce &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9449#name-checking-dpop-proofs&quot;&gt;other DPoP proof check requirements&lt;/a&gt;. Support for custom &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9449#name-resource-server-provided-no&quot;&gt;DPoP nonce providers&lt;/a&gt; is also planned.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Adoption of DPoP, compared to that of the MTLS token binding, is expected to progress faster, because DPoP is an &lt;code&gt;application-level&lt;/code&gt; protocol, with no expectation that the transport-level MTLS authentication takes place. However, correctly creating DPoP proofs at the SPA level is not straightforward and requires care.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Keycloak user, then enabling an experimental &lt;code&gt;dpop&lt;/code&gt; feature is sufficient to get started. Also check the &lt;a href=&quot;https://www.keycloak.org/docs/latest/server_admin/#con-advanced-settings_server_administration_guide&quot;&gt;OAuth 2.0 Demonstrating Proof-of-Possession at the Application Layer (DPoP)&lt;/a&gt; in the Advanced Configuration section of the &lt;a href=&quot;https://www.keycloak.org/docs/latest/server_admin&quot;&gt;Keycloak Server Administration documentation&lt;/a&gt; and the &lt;a href=&quot;https://tech.aufomm.com/how-to-use-demonstrating-proof-of-possession-dpop-token-with-kong-and-keycloak/&quot;&gt;How to Use Demonstrating Proof-of-Possession (DPoP) Token with Kong and keycloak&lt;/a&gt; community blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As far as Quarkus is concerned, you only need to set a single OIDC configuration property, &lt;code&gt;quarkus.oidc.token.authorization-scheme=dpop&lt;/code&gt; to accept DPoP tokens and enforce their binding to the accompanying DPoP proofs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://quarkus.io/guides/security-oidc-bearer-token-authentication#demonstrating-proof-of-possession-dpop&quot;&gt;Quarkus OIDC Demonstrating Proof of Possession (DPoP)&lt;/a&gt; documentation for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;financial-grade-api-fapi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#financial-grade-api-fapi&quot;&gt;&lt;/a&gt;Financial-Grade API (FAPI)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://openid.net/wg/fapi/&quot;&gt;Financial-Grade API (FAPI)&lt;/a&gt; is a general high-security API profile built on top of OAuth2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8705&quot;&gt;RFC 8705: Mutual TLS Client Authentication and Certificate-Bound Access Tokens&lt;/a&gt; and &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9449&quot;&gt;RFC 9449: OAuth 2.0 Demonstrating Proof-of-Possession (DPoP)&lt;/a&gt; specifications are included in the Financial-Grade API 2.0 &lt;a href=&quot;https://openid.net/specs/fapi-security-profile-2_0-final.html#name-general&quot;&gt;General Security Profile&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, we have discussed two important OAuth2 specifications for sender-constraining access tokens, &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8705&quot;&gt;RFC 8705: Mutual TLS Client Authentication and Certificate-Bound Access Tokens&lt;/a&gt; and &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9449&quot;&gt;RFC 9449: OAuth 2.0 Demonstrating Proof-of-Possession (DPoP)&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both of these token security elevation technologies can be easily supported in Quarkus OIDC, by using a single configuration property only, without having to write a lot of custom code and configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please experiment with &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8705&quot;&gt;Mutual TLS Client Authentication and Certificate-Bound Access Tokens&lt;/a&gt; and &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9449&quot;&gt;Demonstrating Proof-of-Possession (DPoP)&lt;/a&gt; in Quarkus and let us know what you think.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/sender-constraining-tokens/
            </guid>
            
            
            
            <author>Sergey Beryozkin (https://twitter.com/sberyozkin)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.19.4 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-19-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.19.4, the third (we skipped 3.19.0) maintenance release for our 3.19 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next week, we will release both:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Quarkus 3.20 LTS, our next LTS release with 1-year maintenance - it is based on 3.19&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quarkus 3.21, a regular release including new features&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.19, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.19.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.19&quot;&gt;Quarkus 3.19 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.19.4&quot;&gt;3.19.4&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-19-4-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.15.4 released - LTS maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-15-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.15.4, our next maintenance release for the 3.15 LTS stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.15. However, as part of fixing a security issue,
one small potentially breaking change had to be applied: &lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45877&quot;&gt;#45877&lt;/a&gt;.
This may affect you if you consume Netty allocator metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.15, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update --stream=3.15&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.15.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.15.4&quot;&gt;the full changelog of 3.15.4 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-15-4-released/
            </guid>
            
            
            
            <author>Jan Martiška (https://twitter.com/janmartiska)</author>
            
        </item>
        
        <item>
            <title>How Orange leverages Quarkus for seamless access to Telco network capabilities</title>
            <link>
                https://quarkus.io/blog/orange-telco-core-network-api-management-with-quarkus/
            </link>
            <description>
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-user-stories/orange/orange-logo.png&quot; alt=&quot;Orange&quot; width=&quot;256&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a global telecommunications leader, &lt;a href=&quot;https://www.orange.com&quot;&gt;Orange&lt;/a&gt; has always been at the forefront of innovation.
Along with Deutsche Telekom, Telefónica, and Vodafone, Orange co-founded the &lt;a href=&quot;https://camaraproject.org&quot;&gt;Camara Project&lt;/a&gt;, an initiative aimed at simplifying the consumption of 5G APIs for third-party application developers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To achieve this goal, Orange needed a flexible and lightweight framework capable of handling constrained API exposure while ensuring compatibility with existing network core systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After a rigorous evaluation of multiple frameworks and toolkits — including Quarkus, Ktor, Micronaut, and Vert.x — Orange selected Quarkus as the ideal solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/patriceconil/&quot;&gt;Patrice Conil&lt;/a&gt;, software craftsman at Orange, told us why.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-quarkus-a-framework-evaluation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-quarkus-a-framework-evaluation&quot;&gt;&lt;/a&gt;Why Quarkus? A Framework Evaluation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The team at Orange identified application startup time as a barrier to dynamic Kubernetes pod management.
So they embarked on a comparative study to test alternatives to Spring Boot in a well-defined API wrapper exposure context.
Key evaluation criteria included:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learning Curve: How easily could a Spring developer transition?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kotlin Compatibility: Could the framework work seamlessly with Kotlin?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Runtime footprint: Could it operate efficiently in a constrained environment?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ease of Deployment: How smoothly could it be deployed on Kubernetes?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After extensive testing, Quarkus stood out for multiple reasons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Simplicity: A relatively simple learning curve, especially for those familiar with JAX-RS / Jakarta REST.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dev Mode: Very fast startup, live reload and zero configuration Dev Services (Vault, Redis) result in great developer productivity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modularity: Only required dependencies were embedded, keeping applications lean.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Documentation: Well-organized, versioned documentation with working examples.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Native Compilation: The ability to generate compact native binaries for Kubernetes deployment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Despite the strong competition from a vibrant JVM ecosystem, these advantages made Quarkus the preferred choice for exposing 5G APIs at Orange.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;lessons-learned-from-adopting-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#lessons-learned-from-adopting-quarkus&quot;&gt;&lt;/a&gt;Lessons Learned from Adopting Quarkus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;migration-development-experience&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#migration-development-experience&quot;&gt;&lt;/a&gt;Migration &amp;amp; Development Experience&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Transitioning from Spring to Quarkus was not overly complex, especially for those familiar with JAX-RS / Jakarta REST.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://quarkus.io/guides/dev-services&quot;&gt;Dev Services&lt;/a&gt; significantly enhanced productivity in dev and test modes, but required careful consideration for their CI/CD environments, where no container runtime is available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The modular approach ensured applications remained lightweight but introduced a large number of small dependencies to manage.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;spec-first-api-development&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#spec-first-api-development&quot;&gt;&lt;/a&gt;Spec-First API Development&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As spec-first practitioners, integrating OpenAPI specification generation was a crucial requirement that Quarkus handled effectively.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;java-kotlin-interoperability&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#java-kotlin-interoperability&quot;&gt;&lt;/a&gt;Java &amp;amp; Kotlin Interoperability&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While Quarkus supports Kotlin, writing full Kotlin extensions proved challenging at times.
The team retained some Java code, and Java-Kotlin interoperability worked smoothly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;native-compilation-performance&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#native-compilation-performance&quot;&gt;&lt;/a&gt;Native Compilation &amp;amp; Performance&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Native compilation produced compact native executables, but the process of producing them was lengthy.
The team reserved it for the final build stage when absolutely necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some fine-tuning was required to prevent class pruning issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When building native executables, the call tree is analyzed to determine which classes and methods are used. Everything that is not used is pruned to reduce the size of the executable and the RSS usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In some cases, e.g. when using reflection, you will have to declare explicitly that a class is used so that it ends up being included in the native executable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus provides tooling to simplify this configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;reactive-programming-mutiny&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#reactive-programming-mutiny&quot;&gt;&lt;/a&gt;Reactive Programming &amp;amp; Mutiny&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having worked extensively with Reactor, the transition to Mutiny had a learning curve.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While effective and more intuitive thanks to its navigable API, it was perceived as more verbose for the simple cases.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;architecture-overview&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#architecture-overview&quot;&gt;&lt;/a&gt;Architecture Overview&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Orange designed a microservices-based architecture to expose 5G APIs efficiently.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;microservices-api-wrappers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#microservices-api-wrappers&quot;&gt;&lt;/a&gt;Microservices &amp;amp; API Wrappers&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each API wrapper was implemented as a dedicated microservice for better version control.
The team leveraged Reactive APIs wherever possible, since there are a lot of time-consuming asynchronous tasks to be performed on the core network side and saving resources is a business goal.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cicd-deployment&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cicd-deployment&quot;&gt;&lt;/a&gt;CI/CD &amp;amp; Deployment&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each microservice had its own GitLab repository with an independent build pipeline for its Docker image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Renovate was used to automate dependency upgrades.
A dedicated deployment project pushed new Docker images to an OpenShift cluster using Kustomize + ArgoCD.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;infrastructure-components&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#infrastructure-components&quot;&gt;&lt;/a&gt;Infrastructure Components&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additional services included:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Vault for secrets management&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redis for caching&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Neo4j for database operations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kafka for messaging&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vert.x HTTP Proxy was used for routing and backend protection.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;results-impact&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#results-impact&quot;&gt;&lt;/a&gt;Results &amp;amp; Impact&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After implementing Quarkus in production, Orange successfully &lt;strong&gt;deployed ten APIs&lt;/strong&gt; across various 4G/5G network cores.
Over time, the team performed &lt;strong&gt;multiple Quarkus version upgrades (2.11 → 3.14)&lt;/strong&gt;, all well-managed through Renovate with minimal code adaptation—except for necessary adjustments during the migration to Jakarta EE.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/orange-telco-core-network-api-management-with-quarkus/
            </guid>
            
            
            
            <author>Thomas Segismont</author>
            
        </item>
        
        <item>
            <title>Quarkus &amp; Red Hat&apos;s evolving middleware strategy</title>
            <link>
                https://quarkus.io/blog/quarkus-redhat-strategy/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the past weeks, we&amp;#8217;ve received questions about the &lt;a href=&quot;https://www.redhat.com/en/blog/evolving-our-middleware-strategy&quot;&gt;recent announcement&lt;/a&gt; that Red Hat&amp;#8217;s Middleware engineering and product teams, which include Quarkus, are moving to IBM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We want to take this opportunity to acknowledge this change while reaffirming what has always been true:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Quarkus is an open-source project driven by a global community of contributors, spanning companies, individuals, and open-source enthusiasts.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From its inception, Quarkus has been shaped by &lt;strong&gt;real-world adoption&lt;/strong&gt; across industries, with companies &lt;a href=&quot;https://quarkus.io/userstories/&quot;&gt;sharing their user-stories&lt;/a&gt;, leveraging Quarkus&amp;#8217;s unmatched performance and developer joy in the Java ecosystem. We recently celebrated our &lt;a href=&quot;https://quarkus.io/1000contributors/&quot;&gt;&lt;strong&gt;1000th contributor milestone&lt;/strong&gt;&lt;/a&gt;, a testament to the strength of this diverse and thriving community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Speaking as Quarkus contributors employed by Red Hat and soon IBM, we love our project and intend to keep making it awesome. IBM and Red Hat have clearly communicated that the current and future contributions to Quarkus are a key component of the middleware strategy. IBM has already been an active contributor to Quarkus, and we look forward to increased contribution - alongside the many other individuals and companies who contribute, innovate, and drive Quarkus forward.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, &lt;strong&gt;Quarkus is already on the path to becoming part of &lt;a href=&quot;https://www.commonhaus.org/&quot;&gt;Commonhaus&lt;/a&gt; an open-source foundation&lt;/strong&gt;, further ensuring its long-term independence and success as a truly community-driven project. The move to the foundation and the Red Hat/IBM move could look suspicious timing-wise, but the two are unrelated. We described our reasons in a &lt;a href=&quot;https://quarkus.io/blog/quarkus-in-a-foundation/&quot;&gt;previous blog post&lt;/a&gt;, but if anything, this announcement reaffirms the importance of a foundation-hosted project for its stability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To our contributors and users: your involvement has always been what makes Quarkus thrive. Keep building, experimenting, and shaping the future of Java with us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;-- The Quarkus Team&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 13 Mar 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-redhat-strategy/
            </guid>
            
            
            
            <author>Max Rydahl Andersen (https://twitter.com/maxandersen)</author>
            
        </item>
        
        <item>
            <title>Secure Agentic AI with Quarkus and Google Gemini</title>
            <link>
                https://quarkus.io/blog/gemini-personal-assistant/
            </link>
            <description>
                &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j&quot;&gt;Quarkus LangChain4j&lt;/a&gt; project provides top-class integration between Quarkus and &lt;a href=&quot;https://github.com/langchain4j/langchain4j&quot;&gt;LangChain4j&lt;/a&gt;, helping developers to create Generative and Agentic AI agents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Agentic AI in particular, which &lt;a href=&quot;https://blogs.nvidia.com/blog/what-is-agentic-ai/&quot;&gt;uses sophisticated reasoning and iterative planning to autonomously solve complex, multi-step problems&lt;/a&gt;, is getting a lot of the developer&amp;#8217;s attention today. You are encouraged to read &lt;a href=&quot;https://quarkus.io/blog/agentic-ai-with-quarkus/&quot;&gt;Agentic AI with Quarkus - part 1&lt;/a&gt; and &lt;a href=&quot;https://quarkus.io/blog/agentic-ai-with-quarkus-p2/&quot;&gt;Agentic AI with Quarkus - part 2&lt;/a&gt; blog posts and learn about techniques and patterns for creating Agentic AI agents with &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j&quot;&gt;Quarkus LangChain4j&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, we introduce &lt;code&gt;Gemini Personal Assistant&lt;/code&gt;, Secure Agentic AI agent which helps the currently logged-in user to analyze scheduled events, update and create new events, and keep an eye on event conflicts in the user&amp;#8217;s Google calendars.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;agentic-ai-and-user-identity&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#agentic-ai-and-user-identity&quot;&gt;&lt;/a&gt;Agentic AI and user identity&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Agentic AI does not work in isolation. To provide a personalized advice the AI service which works with multiple users must be able to access a user identity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The user identity acts as a glue between LLM and the user-specific, changing data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;integrated-ai-security&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#integrated-ai-security&quot;&gt;&lt;/a&gt;Integrated AI security&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is necessary to note that for an AI agent that can work with the users data to make it to production, it must be secured.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But what does creating a secure AI agent involve ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;AI security is a complex topic, and it will be covered in depth in the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j&quot;&gt;Quarkus LangChain4j&lt;/a&gt; documentation. &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j&quot;&gt;Quarkus LangChain4j&lt;/a&gt; already offers an important &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/guardrails.html&quot;&gt;Guardrails&lt;/a&gt; AI security feature, supporting the data verification and prompt anonimization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the purpose of this article, an important point is that AI security is an integral part of your application&amp;#8217;s security architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Only authenticated users can access the sensitive application data. It is the case with or without AI being involved.
Agentic AI agents that are allowed to work with the user data can only be accessible by the authenticated users, for the AI be able to work with the user identity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Designing an integrated application and AI security architecture is essential for creating secure, capable, production-quality Agentic AI agents.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;api-keys-versus-access-tokens&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#api-keys-versus-access-tokens&quot;&gt;&lt;/a&gt;API keys versus access tokens&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using API keys provides an easiest option for accessing LLM:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/gemini-personal-assistant/use-api-keys-to-access-llm.png&quot; alt=&quot;Use API keys to access LLM&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When an AI service serves many users in the organization, the API key must be organization wide for everyone in the organization be able to have their data analyzed by LLM. API key is a long time token which must be kept secured.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If your application works with users who log-in with an OpenId Connect provider such as Google, which also hosts LLM, managing API keys with a long lifespan safely is a security challenge that can be avoided given that the time-constrained access tokens acquired during the Google authentication are already available. Furthermore, the organization wide API keys can not be used to access Google services on behalf of the currently logged-in user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/gemini-personal-assistant/use-access-tokens-to-access-llm.png&quot; alt=&quot;Use access tokens to access LLM&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, using access tokens to access Gemini looks similar to using API keys. The difference is, the access token is scoped by the current user authentication, it is time constrained and it can be used to access any Google service that requires an access token.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using access tokens fits into the integrated security concept perfectly: users login to your application with Google using an OpenId Connect authorization code flow, the application propagates an access token acquired as part of this flow to Google services to access them on behalf of the authenticated user, with the Google Gemini service being only one of such services. The user logs out, the session and the corresponding ID and access tokens are deleted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the security bonus point is that the current user will be asked by Google, after the authentication is complete, to authorize your application to use Generative API on the user&amp;#8217;s behalf.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, we will work with the access tokens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j&quot;&gt;Quarkus LangChain4j&lt;/a&gt; supports two Gemini model providers, &lt;a href=&quot;https://ai.google.dev/&quot;&gt;AI Gemini&lt;/a&gt; and &lt;a href=&quot;https://cloud.google.com/vertex-ai&quot;&gt;Vertex AI Gemini&lt;/a&gt;.
&lt;a href=&quot;https://ai.google.dev/&quot;&gt;AI Gemini&lt;/a&gt; can accept both API keys and access tokens while &lt;a href=&quot;https://cloud.google.com/vertex-ai&quot;&gt;Vertex AI Gemini&lt;/a&gt; requires access tokens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the moment, we will use &lt;a href=&quot;https://cloud.google.com/vertex-ai&quot;&gt;Vertex AI Gemini&lt;/a&gt;, however we plan to switch to &lt;a href=&quot;https://ai.google.dev/&quot;&gt;AI Gemini&lt;/a&gt; due to its simpler configuration soon.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;gemini-personal-assistant&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#gemini-personal-assistant&quot;&gt;&lt;/a&gt;Gemini Personal Assistant&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok, let&amp;#8217;s create our secure Gemini Personal Assistant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;architecture&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#architecture&quot;&gt;&lt;/a&gt;Architecture&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gemini Personal Assistant is a WebSockets chatbot which is only available to users authenticated with Google.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/gemini-personal-assistant/chatbot-architecture.png&quot; alt=&quot;Gemini Personal Assistant&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Users who login to the application with Google can access the Personal Assistant bot and ask it to help to analyze and manage the schedule for the next few days or weeks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Personal Assistant is able to greet the logged-in user by name and access Google Calendar API on behalf of the user, inform about the schedule, add new events, modify events and warn about the conflicts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are going to look at the key dependencies, configuration properties and code fragments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find the complete project source &lt;a href=&quot;https://github.com/sberyozkin/quarkus-langchain4j-gemini&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;maven-dependencies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#maven-dependencies&quot;&gt;&lt;/a&gt;Maven dependencies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the following dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-websockets-next&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-oidc&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-rest-client-oidc-token-propagation&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-langchain4j-oidc-model-auth-provider&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-langchain4j-vertex-ai-gemini&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-websockets-next&lt;/code&gt; is required to support WebSockets for the chat bot.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-oidc&lt;/code&gt; is required to secure the Quarkus endpoint which uses AI service&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-rest-client-oidc-token-propagation&lt;/code&gt; supports access token propagation to Google services such as Google Calendar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-langchain4j-oidc-model-auth-provider&lt;/code&gt; supports access token propagation to remote model providers such as Vertex AI Gemini&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-langchain4j-vertex-ai-gemini&lt;/code&gt; brings Vertex AI Gemini model provider extension&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configuration&quot;&gt;&lt;/a&gt;Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next we create the configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;# Google OpenId Connect configuration:

quarkus.oidc.provider=google &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
quarkus.oidc.client-id=${GOOGLE_CLIENT_ID} &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
quarkus.oidc.credentials.secret=${GOOGLE_CLIENT_SECRET} &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
quarkus.oidc.authentication.extra-params.scope=https://www.googleapis.com/auth/generative-language.retriever,https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/calendar &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;

# Gemini configuration

quarkus.langchain4j.vertexai.gemini.chat-model.model-id=gemini-2.0-flash &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
quarkus.langchain4j.vertexai.gemini.location=europe-west1
quarkus.langchain4j.vertexai.gemini.project-id=${GOOGLE_PROJECT_ID} &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
quarkus.langchain4j.vertexai.gemini.log-requests=true
quarkus.langchain4j.vertexai.gemini.log-responses=true

quarkus.rest-client.google-calendar-api.url=https://www.googleapis.com/calendar/v3 &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Require Google authentication.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Follow &lt;a href=&quot;https://quarkus.io/guides/security-openid-connect-providers#google&quot;&gt;steps described in the Quarkus OIDC documentation&lt;/a&gt; to register a Quarkus application in Google Cloud and use the generated application client id and secret, and note the Google project id.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Request that an access token issued after the user authentication has permissions to access generative API provided by Gemini and Calendar API for the AI Service tools support. Users will be asked to authorize the registered application to access these APIs on the user&amp;#8217;s behalf.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configure the Gemini model id. Note that no API key is configured: the &lt;code&gt;quarkus-langchain4j-oidc-model-auth-provider&lt;/code&gt; dependency will make sure the current Google user access token is propagated to Google Gemini.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Specify the Google project id.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configure Calendar API base URL for the Google Calendar tool to work.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;implementation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#implementation&quot;&gt;&lt;/a&gt;Implementation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we create the AI service:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package org.acme.gemini;

import org.acme.gemini.PersonalAssistantResource.PersonalAssistantTools;

import dev.langchain4j.service.SystemMessage;
import dev.langchain4j.service.UserMessage;
import io.quarkiverse.langchain4j.RegisterAiService;
import jakarta.enterprise.context.SessionScoped;

@RegisterAiService(tools = { PersonalAssistantTools.class, GoogleCalendarClient.class })
@SessionScoped
public interface PersonalAssistantService {
    @SystemMessage(&quot;&quot;&quot;  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
            You are a personal assistant.
            Your tasks are:
             - Provide the currently logged-in user with an information about the scheduled events after the {{timeMin}} but before the {{timeMax}} date and time.
             - Get the list of the available calendars and ask the user which calendar the user would like to check; remember the user&apos;s choice.
             - Use the calendar id field as a calendarId value in all the tool operations with the chosen calendar but show only calendar summary to the user.
             - Help the user to schedule other events during this period, advise about any event conflicts.
             - Let the user know which calendar contains a given event.
             - Be polite but do not hesitate to be informal sometimes to make the user smile.

             The event is represented as a JSON object and has the following fields:
               summary is the event summary
               description is the event description
               location is the event location
               start is the event start date and time JSON object
               end is the event end date and time JSON object
               id is the eventId that can be used for accessing, deleting or modifying this event.

             Both start and end JSON objects have the following fields:
             date date with the first 4 digits representing a year, next 2 ones - a month, and the last 2 ones - a day, for example, 2025-03-21.
             dateTime RFC3339 date and time timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z.
             timeZone time zone.

             The date and time is represented as a RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:30:30Z.
             In the timestamp such as 2011-06-03T10:00:00Z, the year is 2011, the month - 06 (June), the day - 3rd day of the month, the hour is &apos;10&apos;, the minutes - &apos;30&apos;, and the seconds - &apos;30&apos;.
             &apos;Z&apos; indicates a GMT time zone.

             To calculate an event duration, deduct the event&apos;s start date and time from its end date and time.
             Typically, calculating a difference in hours and minutes is enough for most events.

             The calendar is represented as a JSON object and has the following fields:
               id is the calendarId
               summary is the calendar summary
               description is the calendar description
               location is the calendar location
               timeZone is the calendar time zone
               primary is the calendar primary boolean status
               &quot;&quot;&quot;)
    String assist(@UserMessage String question, String timeMin, String timeMax); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The system prompt is the most important feature of this AI service. It requires a lot of tuning to get the best out
of Gemini. For example, note the &lt;code&gt;logged-in user&lt;/code&gt; text matches one of the tool descriptions below for Gemini to get the information related to the currently logged in user. Providing precise information about API that Gemini may need to work with is very important. Please try to tune it futher during your experiments with Gemini Personal Assistant.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Request Gemini to evaluate a question about the schedule within the provided time bounds.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gemini Personal Assistant depends on two tools to get the user-specific login information:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package org.acme.gemini;

import org.eclipse.microprofile.jwt.Claims;
import org.eclipse.microprofile.jwt.JsonWebToken;

import dev.langchain4j.agent.tool.Tool;
import io.quarkus.oidc.IdToken;
import io.quarkus.security.Authenticated;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;

@Singleton
@Authenticated &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
public class PersonalAssistantTools {

    @Inject
    @IdToken
    JsonWebToken identity; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

    @Tool(&quot;Returns the first name and the family name of the logged-in user.&quot;)
    public String getLoggedInUserName() { &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        return identity.getName();
    }

    @Tool(&quot;Returns email address of the logged-in user.&quot;)
    public String getEmailAddressOfLoggedInUser() { &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
       return identity.getClaim(Claims.email);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Tools can only be accessed if the authenticated user initiated the Gemini query.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use the ID token acquired during the Google authorization code flow authentication as a user identity representation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use the current user identity to get the user&amp;#8217;s full name for Gemini to greet the user.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Return an email address of the currently logged in user. For example, Gemini can use this tool to find a primary calendar whose description matches the user&amp;#8217;s email address.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It also uses a Google Calendar REST client tool to deal with the user requests about the schedule:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package org.acme.gemini;

import java.time.ZonedDateTime;
import java.util.List;

import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;
import org.jboss.resteasy.reactive.RestQuery;

import dev.langchain4j.agent.tool.Tool;
import io.quarkus.oidc.token.propagation.AccessToken;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;

@RegisterRestClient(configKey = &quot;google-calendar-api&quot;)
@AccessToken &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
@Path(&quot;/&quot;)
public interface GoogleCalendarClient {

    @GET
    @Path(&quot;/users/me/calendarList&quot;)
    @Produces(MediaType.APPLICATION_JSON)
    @Tool(&quot;Get calendars list&quot;)
    Calendars getCalendars(); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

    @GET
    @Path(&quot;/calendars/{calendarId}/events&quot;)
    @Produces(MediaType.APPLICATION_JSON)
    @Tool(&quot;Get events&quot;)
    Events getEvents(@PathParam(&quot;calendarId&quot;) String calendarId, @RestQuery(&quot;timeMin&quot;) String timeMin, @RestQuery(&quot;timeMax&quot;) String timeMax); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;

    @PUT
    @Path(&quot;/calendars/{calendarId}/events/{eventId}&quot;)
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    @Tool(&quot;Update or move event&quot;)
    Events updateEvent(@PathParam(&quot;calendarId&quot;) String calendarId, @PathParam(&quot;eventId&quot;) String eventId, Event event); &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

    // Other methods are omitted for brewity

    public static record Calendars(List&amp;lt;Calendar&amp;gt; items) { &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
    }

    public static record Calendar(String id, String summary, String description, String location, String timeZone, boolean primary) {
    }

    public static record Events(List&amp;lt;Event&amp;gt; items) { &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
    }

    public static record Event(String summary, String description, String location, Start start, End end, String id) {
    }

    public static record Start(String date, ZonedDateTime dateTime, String timeZone) {
    }

    public static record End(String date, ZonedDateTime dateTime, String timeZone) {
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use the access token acquired during the Google authorization code flow authentication to access Calendar API on the user&amp;#8217;s behalf.
The token propagation with a single annotation only is supported by &lt;code&gt;quarkus-rest-client-oidc-token-propagation&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;REST client method tool for getting a list of calendars&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;REST client method tool for getting a list of events&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;REST client method tool for updating events&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Tool parameter types which are also described in the system prompt.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next task is to ensure that Gemini Personal Assistant is available to the authenticated users only:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package org.acme.gemini;

import java.time.Instant;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

import org.eclipse.microprofile.jwt.Claims;
import org.eclipse.microprofile.jwt.JsonWebToken;
import org.jboss.logging.Logger;

import dev.langchain4j.agent.tool.Tool;
import io.quarkus.oidc.IdToken;
import io.quarkus.security.Authenticated;
import io.quarkus.security.identity.SecurityIdentity;
import io.quarkus.websockets.next.OnOpen;
import io.quarkus.websockets.next.OnTextMessage;
import io.quarkus.websockets.next.WebSocket;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;

@WebSocket(path = &quot;/assistant&quot;)
@Authenticated &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
public class PersonalAssistantResource {

    private static final Logger log = Logger.getLogger(PersonalAssistantResource.class);

    PersonalAssistantService assistant;

    public PersonalAssistantResource(PersonalAssistantService assistant) {
        this.assistant = assistant;
    }

    @Inject
    SecurityIdentity identity;

    @OnOpen &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    public String onOpen() {
        return &quot;Hello, &quot; + identity.getPrincipal().getName() + &quot;, I&apos;m your Personal Assistant, how can I help you?&quot;;
    }

    @OnTextMessage &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    public String onMessage(String question) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;);

        ZonedDateTime minDateTime = Instant.now().atZone(ZoneId.of(&quot;GMT&quot;));
        String timeMin = minDateTime.format(formatter);

        ZonedDateTime maxDateTime = minDateTime.plusDays(30);
        String timeMax = maxDateTime.format(formatter);

        return assistant.assist(question, timeMin, timeMax);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Require that WebSockets Upgrade can succeed only if the user is authenticated and that the security identiy is bound to the connection.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Greet the user; Gemini Personal Assistant is not busy yet at this point.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Ask Gemini Personal Assistant to work with the user query about the schedule within the provided time bounds.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;google-login-logout-and-user-interaction-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#google-login-logout-and-user-interaction-support&quot;&gt;&lt;/a&gt;Google Login, logout and user interaction support&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please check the complete &lt;a href=&quot;https://github.com/sberyozkin/quarkus-langchain4j-gemini&quot;&gt;Gemini Personal Assistant&lt;/a&gt; project source to see how Google login, logout and other user interactions are managed. We do not cover it here since the way it is done is not directly related to the work of Gemini Personal Assistant.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;trying-it-out&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#trying-it-out&quot;&gt;&lt;/a&gt;Trying it out&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now it is time to see what Gemini Personal Assistant can really do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Start the application in the dev mode:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;mvn quarkus:dev&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and go to &lt;code&gt;&lt;a href=&quot;http://localhost:8080&quot; class=&quot;bare&quot;&gt;http://localhost:8080&lt;/a&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/gemini-personal-assistant/entry-demo-screen.png&quot; alt=&quot;Main demo screen&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After you login with Google, you will be greeted and offered an option to work with Gemini Personal Assistant:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/gemini-personal-assistant/welcome-demo-screen.png&quot; alt=&quot;Welcome demo screen&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After selecting the Personal Assistant icon, you will be greated by Personal Assistant. Let&amp;#8217;s ask it something about the schedule:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/gemini-personal-assistant/check-schedule-question.png&quot; alt=&quot;Check schedule question&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Personal Assistant has managed to get a user name and a list of user calendars with the help of tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s ask it to check the primary calendar:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/gemini-personal-assistant/check-schedule-primary-calendar.png&quot; alt=&quot;Check schedule primary calendar&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I asked it to use the one with my email address and the assitant was able to find it with the help from one of the tools which provides my email address. Sometimes, Personal Assistant can figure out which calendar is a primary one from the system prompt alone, which informs it that a calendar whose &lt;code&gt;primary&lt;/code&gt; field is set to &lt;code&gt;true&lt;/code&gt; is a primary calendar. But sometimes it needs hints.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now it gives the schedule update:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/gemini-personal-assistant/check-schedule-answer.png&quot; alt=&quot;Check schedule answer&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Actually, as it happens, my friend just called and asked to delay our scheduled lunch by 1 hour, let&amp;#8217;s ask Gemini Personal Assistant to do it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/gemini-personal-assistant/event-update-request.png&quot; alt=&quot;Event update request&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And I can confirm my primary calendar was updated successfully, with the event rescheduled for 1 hour later. We&amp;#8217;ll touch on how to manage tools with side-effects later in this post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s ask the question about the events from another calendar:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/gemini-personal-assistant/arsenal-tickets-question.png&quot; alt=&quot;Arsenal tickets question&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Personal Assistant is learning so it may need a bit of help to find the right calendar:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/gemini-personal-assistant/arsenal-calendar-confirmation.png&quot; alt=&quot;Arsenal calendar confirmation&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and now it is happy to give an update:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/gemini-personal-assistant/arsenal-tickets-answer.png&quot; alt=&quot;Arsenal tickets answer&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It also offers its help to add it to (another) calendar. Let&amp;#8217;s say yes, but I&amp;#8217;m not sure it does not conflict with other events in my primary calendar:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/gemini-personal-assistant/event-conflict-concern.png&quot; alt=&quot;Event conflict concern&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gemini Personal Assistant assures me that no, there is no conflict:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/gemini-personal-assistant/no-conflicts-confirmation.png&quot; alt=&quot;No conflicts confirmation&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And we can continue the conversation with a friendly Gemini Personal Assistant.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-agentic-gemini-personal-assistant-is&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-agentic-gemini-personal-assistant-is&quot;&gt;&lt;/a&gt;How Agentic Gemini Personal Assistant is ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, Gemini Personal Assistant helped us with queries about the schedule, event modifications and conflict checks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You may be asking, is it really Agentic AI which is expected to &lt;a href=&quot;https://blogs.nvidia.com/blog/what-is-agentic-ai/&quot;&gt;use sophisticated reasoning and iterative planning to autonomously solve complex, multi-step problems&lt;/a&gt; ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Speaking about the calendars alone, if you have a busy schedule with events coming from multiple calendars, having an AI agent which can help you manage the schedule is Agentic AI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this demo we have only asked questions and got answers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But it is not dificult to imagine an application running a background (autonomous) calendar check and broadcasting a message to the logged in user when a new event got added to one of the calendar. The agent can check user-specific data in the local database or other Google services such as GMail, inform the user accordingly, help the user to react to the data coming out of multiple sources at the same time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The foundation block which makes Gemini Personal Assistant ready to help to as many users in the organization as necessary is in place: it can access the user identity. Sky is the limit to what it can do with the user-specific data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;security-considerations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#security-considerations&quot;&gt;&lt;/a&gt;Security Considerations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have dealt with several important security considerations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The obvious consideration is that you do not want to allow unauthenticated access to LLM which works with the sensitve data. It is common sense and not specific to the AI security domain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The tricker issue is how to prevent LLM making mistakes when calling tools with side-effects. For example, if you look at the Google Calendar REST API client tool which allows to modify the event, you will note the &lt;code&gt;calendarId&lt;/code&gt; parameter - the agent finds the id of a specific calendar from the list of calendars. How can the user be protected from the event beng moved to the wrong calendar ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j&quot;&gt;Quarkus LangChain4j&lt;/a&gt; team is looking at various options such as guardrails and hallucination strategies for tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also have your tool do the checks before making an actual call. For example, instead of having a declarative REST client tool that can update calendars, have a Tool bean which injects Google Calendar REST client and enforces that a calendar update event call is allowed only if it is &lt;code&gt;PersonalAssistant&lt;/code&gt; calendar which is about to be updated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As far as the actual chat-bot implementation is concerned, ensuring a secure WebSockets HTTP upgrade is critical but it is complicated by the fact that JavaScript WebSockets API does not enforce the same origin requirement. Nonetheless, using a technique such as a custom ticketing system, combined with using a secure &lt;code&gt;wss:&lt;/code&gt; scheme can help to minimize risks. Look at the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-sql-chatbot&quot;&gt;secure-sql-chatbot&lt;/a&gt; demo in the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j&quot;&gt;Quarkus LangChain4j&lt;/a&gt; repository for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please note that using WebSockets is not a pre-requisite for implementing a Personal Assistant. You can use JAX-RS, Qute, SSE instead.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post, we have introduced Secure Agentic Gemini Personal Assistant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Are you thinking about actually making AI work in production ? &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j&quot;&gt;Quarkus LangChain4j&lt;/a&gt; is here to help.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 13 Mar 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/gemini-personal-assistant/
            </guid>
            
            
            
            <author>Sergey Beryozkin (https://twitter.com/sberyozkin)</author>
            
        </item>
        
        <item>
            <title>Running SQLite in Pure Java with Quarkus</title>
            <link>
                https://quarkus.io/blog/sqlite4j-pure-java-sqlite/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What if you could run a C-based database in pure Java, with zero configuration, and even compile it to a native image effortlessly? With the new Quarkiverse extension &lt;a href=&quot;https://github.com/quarkiverse/quarkus-jdbc-sqlite4j&quot;&gt;quarkus-jdbc-sqlite4j&lt;/a&gt;, you can do exactly that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Traditionally, embedded databases in Java require reimplementing their C counterparts, often leading to differences in behavior, missing optimizations, and delayed bug fixes. However, &lt;a href=&quot;https://github.com/roastedroot/sqlite4j&quot;&gt;sqlite4j&lt;/a&gt; provides a JDBC driver that leverages the original SQLite C implementation while running safely inside a sandbox.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;hands-on-example&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hands-on-example&quot;&gt;&lt;/a&gt;Hands-on Example&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To see &lt;a href=&quot;https://github.com/quarkiverse/quarkus-jdbc-sqlite4j&quot;&gt;quarkus-jdbc-sqlite4j&lt;/a&gt; in action, you can start with any existing Quarkus application or one of the &lt;a href=&quot;https://github.com/quarkusio/quarkus-quickstarts&quot;&gt;quickstarts&lt;/a&gt;. If you prefer a ready-made example, check out &lt;a href=&quot;https://github.com/andreaTP/demo-hibernate-orm-quickstart-wasm&quot;&gt;this demo repository&lt;/a&gt;, which integrates SQLite within a Quarkus application using Hibernate ORM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By simply changing the JDBC driver dependency, you can embed a fully functional SQLite database inside your application while retaining all the benefits of the native SQLite implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get started, add the extension dependency to your &lt;em&gt;pom.xml&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.jdbc&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-jdbc-sqlite4j&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then, configure your Quarkus application to use SQLite with standard JDBC settings:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.datasource.db-kind=sqlite
quarkus.datasource.jdbc.url=jdbc:sqlite:sample.db
quarkus.datasource.jdbc.min-size=1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now use your datasource as you normally would with Hibernate and Panache.
Note that we keep a minimum connection pool size &amp;gt; 0 to avoid redundant copies from disk to memory of the database.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;running-in-a-secure-sandbox&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#running-in-a-secure-sandbox&quot;&gt;&lt;/a&gt;Running in a Secure Sandbox&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Under the hood, SQLite runs in a fully in-memory sandboxed environment, ensuring security and isolation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sqlite/vfs.png&quot; alt=&quot;Virtual FileSystem Usage&quot; width=&quot;80%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a connection to a local file is opened, the following occurs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The database file is copied from disk to an in-memory Virtual FileSystem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A connection is established to the in-memory database.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While this approach is highly secure, many users need to persist database changes. One recommended solution is to periodically back up the in-memory database to disk. This can be achieved through a scheduled job that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Backs up the in-memory database to a new file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copies the backup to the host file system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Atomically replaces the old database file with the new backup.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This setup ensures a seamless experience while maintaining SQLite&amp;#8217;s sandboxed security. You can adapt this approach to fit your specific needs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a sample implementation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@ApplicationScoped
public class SQLiteBackup {
    @ConfigProperty(name = &quot;quarkus.datasource.jdbc.url&quot;)
    String jdbcUrl;

    @Inject
    AgroalDataSource dataSource;

    // Execute a backup every 10 seconds
    @Scheduled(delay=10, delayUnit=TimeUnit.SECONDS, every=&quot;10s&quot;)
    void scheduled() { backup(); }

    // Execute a backup during shutdown
    public void onShutdown(@Observes ShutdownEvent event) { backup(); }

    void backup() {
        String dbFile = jdbcUrl.substring(&quot;jdbc:sqlite:&quot;.length());

        var originalDbFilePath = Paths.get(dbFile);
        var backupDbFilePath = originalDbFilePath
                                    .toAbsolutePath()
                                    .getParent()
                                    .resolve(originalDbFilePath.getFileName() + &quot;_backup&quot;);

        try (var conn = dataSource.getConnection();
                var stmt = conn.createStatement()) {
            // Execute the backup
            stmt.executeUpdate(&quot;backup to &quot; + backupDbFilePath);
            // Atomically replace the DB file with its backup
            Files.move(backupDbFilePath, originalDbFilePath,
                StandardCopyOption.ATOMIC_MOVE,
                StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException | SQLException e) {
            throw new RuntimeException(&quot;Failed to back up the database&quot;, e);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;technical-deep-dive&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#technical-deep-dive&quot;&gt;&lt;/a&gt;Technical Deep Dive&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/roastedroot/sqlite4j&quot;&gt;sqlite4j&lt;/a&gt; compiles the official SQLite C &lt;a href=&quot;https://www.sqlite.org/amalgamation.html&quot;&gt;amalgamation&lt;/a&gt; to WebAssembly (Wasm), which is then translated into Java bytecode using the &lt;a href=&quot;https://chicory.dev/docs/experimental/aot&quot;&gt;Chicory AOT compiler&lt;/a&gt;.
This enables SQLite to run in a pure Java environment while maintaining its full functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sqlite/sqlite-compilation.png&quot; alt=&quot;SQLite compilation&quot; width=&quot;80%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;security-and-isolation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#security-and-isolation&quot;&gt;&lt;/a&gt;Security and Isolation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the key benefits of this approach is security.
Running SQLite inside a Wasm sandbox ensures memory safety and isolates it from the host system, making it an excellent choice for applications that require embedded databases while avoiding the risks of native code execution.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the new &lt;a href=&quot;https://github.com/quarkiverse/quarkus-jdbc-sqlite4j&quot;&gt;quarkus-jdbc-sqlite4j&lt;/a&gt; extension, you get the best of both worlds: the power and reliability of SQLite combined with the safety and portability of Java.
This extension seamlessly integrates SQLite into Quarkus applications while maintaining a lightweight and secure architecture. Best of all, everything compiles effortlessly with &lt;em&gt;native-image&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ready to try it out? Give &lt;a href=&quot;https://github.com/quarkiverse/quarkus-jdbc-sqlite4j&quot;&gt;quarkus-jdbc-sqlite4j&lt;/a&gt; a spin in your projects and experience the benefits of running SQLite in pure Java with Quarkus!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;prior-art&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#prior-art&quot;&gt;&lt;/a&gt;Prior Art&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ncruces/go-sqlite3&quot;&gt;ncruces/go-sqlite3&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.infoq.com/articles/sqlite-java-integration-webassembly/&quot;&gt;Ben Eckel - Infoq - WebAssembly, the Safer Alternative to Integrating Native Code in Java&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 12 Mar 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/sqlite4j-pure-java-sqlite/
            </guid>
            
            
            
            <author>Andrea Peruffo (https://twitter.com/and_prf)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #54 - March</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-54/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Make sure you read Mario Fusco&amp;#8217;s two-part blog about Agentic AI with Quarkus, where he discusses common workflows and agentic AI patterns and architectures, with practical examples using Quarkus and LangChain4j. Learn about the power of intelligent applications by combining the robustness of Java, the efficiency of Quarkus, and the advanced capabilities of RAG in a great article by Daniel Oh. Emil Lefkof gives a real-world example of how LangChain4j and AI can be leveraged to automatically extract structured metadata from PDF documents. Leveraging the combination of LangChain4j and Google Gemini AI proves to be a powerful approach for automating document analysis workflows. &quot;Performance &amp;amp; Productivity: Rethinking Java Dependencies for the Cloud Era&quot; by Markus Eisele discusses how Quarkus extensions are curated, lightweight, and optimized for microservices and serverless.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/54/&quot;&gt;Newsletter #54: March&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 12 Mar 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-54/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.19.3 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-19-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.19.3, the second (we skipped 3.19.0) maintenance release for our 3.19 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also released two candidate releases:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Quarkus 3.20.0.CR1 LTS - it is going to be our next LTS, it is based on 3.19&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quarkus 3.21.0.CR1 - a regular minor release with new features&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.19, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.19.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.19&quot;&gt;Quarkus 3.19 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.19.3&quot;&gt;3.19.3&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 12 Mar 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-19-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.19.2 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-19-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.19.2, the first (we skipped 3.19.0) maintenance release for our 3.19 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have bugs lurking around, please report them as we aim at stabilizing everything before the next LTS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.19, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.19.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.19&quot;&gt;Quarkus 3.19 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.19.2&quot;&gt;3.19.2&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 05 Mar 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-19-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>CVE fixes - February 2025</title>
            <link>
                https://quarkus.io/blog/cve-fixes-feb-2025/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released CVE fixes releases for Quarkus 3.8 LTS and 3.15 LTS to address several CVEs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are using these versions and the mentioned components, the update is recommended.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These CVEs are already fixed in Quarkus 3.19.1,
so if you are using a non-LTS version, please upgrade to Quarkus 3.19.1 (or to the closest LTS version if you are using an old version).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We addressed the following CVEs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2025-24970&quot;&gt;CVE-2025-24970&lt;/a&gt; - Upstream Netty (only for 3.15)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2025-1247&quot;&gt;CVE-2025-1247&lt;/a&gt; - Quarkus REST - Using field injection for request-scoped elements in REST resources not marked with the request scope could lead to concurrency issues.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2024-12225&quot;&gt;CVE-2024-12225&lt;/a&gt; (embargo will be lifted soon) - WebAuthn - The callback endpoint was enabled by default. It now requires to be &lt;a href=&quot;https://quarkus.io/version/3.15/guides/security-webauthn#configuration&quot;&gt;explicitly configured&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2025-1634&quot;&gt;CVE-2025-1634&lt;/a&gt; (not published yet) - RESTEasy Classic - RESTEasy Classic endpoints may be affected by memory leaks. If you are exposing REST endpoints publicly using the &lt;code&gt;quarkus-resteasy&lt;/code&gt; extension, the update is highly recommended. Quarkus REST is &lt;strong&gt;NOT&lt;/strong&gt; affected by this CVE.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/cve-fixes-feb-2025/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.19 - UBI 9 images, Micrometer to OpenTelemetry bridge, JEP 483 new AOT cache...</title>
            <link>
                https://quarkus.io/blog/quarkus-3-19-1-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.19.
Quarkus 3.19 is our first step towards the release of our new 3.20 LTS, as 3.20 LTS will be based on the 3.19 branch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can consider that the next LTS is feature complete and we encourage you to adopt 3.19 and share your feedback.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It comes with a lot of enhancements and the following new features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/45446&quot;&gt;#45446&lt;/a&gt; - Migrate core extensions to @ConfigMapping&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45973&quot;&gt;#45973&lt;/a&gt; - Switch to UBI 9 by default&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/43831&quot;&gt;#43831&lt;/a&gt; - Micrometer to OpenTelemetry bridge&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/46169&quot;&gt;#46169&lt;/a&gt; - Introduce support for JEP 483&amp;#8217;s new AOT cache&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45809&quot;&gt;#45809&lt;/a&gt; - WebSockets Next: Allow to send authorization headers from web browsers using JavaScript clients&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45704&quot;&gt;#45704&lt;/a&gt; - WebSockets Next: Support permission checkers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45891&quot;&gt;#45891&lt;/a&gt; - Support for OAuth2 Demonstrating Proof of Possession&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.19, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.19.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.19&quot;&gt;Quarkus 3.19 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;migration-to-configmapping&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#migration-to-configmapping&quot;&gt;&lt;/a&gt;Migration to @ConfigMapping&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 2022, we introduced in Quarkus a new configuration infrastructure for extensions based on interfaces annotated with &lt;code&gt;@ConfigMapping&lt;/code&gt;.
They were a replacement for the legacy config classes that were used in Quarkus extensions,
which came with several issues and were specific to extensions (you couldn&amp;#8217;t use them in applications).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new &lt;code&gt;@ConfigMapping&lt;/code&gt; infrastructure unifies extension and application configuration on the same infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Quarkus 3.19, we moved all the core extensions to this new infrastructure (except for some classes that were kept for compatibility purposes).
This change might impact you if you were consuming the config classes and, if so, we recommend having a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.19&quot;&gt;migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are an extension developer, we encourage you to move to this new infrastructure as, at some point in the future, we will sunset the legacy ones
(we will announce a sunsetting plan soon, it will offer you ample time to upgrade).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;ubi-9-as-default&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ubi-9-as-default&quot;&gt;&lt;/a&gt;UBI 9 as default&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We updated the default images across Quarkus to UBI 9 (both to build your applications and run your applications).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.19#ubi-9&quot;&gt;migration guide&lt;/a&gt; will give you ample information on the impact and what you might need to tweak.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;micrometer-to-opentelemetry-bridge&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#micrometer-to-opentelemetry-bridge&quot;&gt;&lt;/a&gt;Micrometer to OpenTelemetry bridge&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now push your Micrometer metrics to OpenTelemetry using a bridge.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Learn more about it in the &lt;a href=&quot;https://quarkus.io/guides/telemetry-micrometer-to-opentelemetry&quot;&gt;dedicated guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jep-483s-aot-cache&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jep-483s-aot-cache&quot;&gt;&lt;/a&gt;JEP 483&amp;#8217;s AOT cache&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have support for AppCDS in Quarkus for quite a while and Quarkus 3.19 generalizes it to also support the AOT cache introduced in JEP 483.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It can further improve the startup time, if you generate an AOT cache.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;websockets-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#websockets-next&quot;&gt;&lt;/a&gt;WebSockets Next&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Two new features for WebSockets Next:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The ability to send Authorization headers from web browsers using JavaScript clients - see the &lt;a href=&quot;https://quarkus.io/guides/websockets-next-reference#bearer-token-authentication&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The support for permission checkers, which were already available for your REST endpoints - see the &lt;a href=&quot;https://quarkus.io/guides/websockets-next-reference#secure-endpoints-with-permission-checkers&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;security&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#security&quot;&gt;&lt;/a&gt;Security&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our OIDC extension now supports &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9449&quot;&gt;proof of possession&lt;/a&gt; for OAuth 2 tokens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find more information about it in our &lt;a href=&quot;https://quarkus.io/guides/security-oidc-bearer-token-authentication#demonstrating-proof-of-possession-dpop&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-cxf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-cxf&quot;&gt;&lt;/a&gt;Quarkus CXF&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus CXF 3.19 was released and is now available in &lt;a href=&quot;https://code.quarkus.io/?extension-search=origin:platform%20quarkus-cxf&quot;&gt;Quarkus Platform 3.19&lt;/a&gt;.
Check the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.19.0.html&quot;&gt;Quarkus CXF 3.19.0&lt;/a&gt; release notes for more information about what is new in this release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been upgraded to 3.19.0.
You can consult the &lt;a href=&quot;https://camel.apache.org/blog/2025/02/camel-quarkus-release-3.19.0/&quot;&gt;release notes&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.19.0.CR1&quot;&gt;3.19.0.CR1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.19.0&quot;&gt;3.19.0&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.19.1&quot;&gt;3.19.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1058 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.19 release, thanks to Akulov S V, Ales Justin, Alex Martel, Alex Rovner, Alexey Loubyansky, Andrea Boriero, André Pantaleão, Andy Damevin, Bruno Baptista, Chris Laprun, Clement Escoffier, cmoulliard, Damien Clément d&amp;#8217;Huart, David Me, Davide D&amp;#8217;Alto, dc1248, Eric Deandrea, Erik Mattheis, Felix König, Foivos Zakkak, franz1981, George Gastaldi, Georgios Andrianakis, Gerhard Flothow, Guillaume Smet, Hannah Arndt, Harald Albers, HerrDerb, Holly Cummins, Ivan Béthus, Ivan Petkov, Jakub Gardo, Jakub Jedlicka, Jan Martiska, Jorge Pinto, Julien Ponge, Katia Aresti, Ladislav Thon, Lars Andringa, Loïc Mathieu, Luis Rubiera, Marc Nuri, Marco Bungart, Marco Sappé Griot, Marek Skacelik, mariofusco, marko-bekhta, Martin Kouba, Martin Panzer, Matej Novotny, Matheus Cruz, Matthias Schorsch, Max Rydahl Andersen, Maximilian Zellhofer, melloware, Michael Edgar, Michal Maléř, Michal Vavřík, Ozan Gunalp, pedro_Simoes, Peter Palaga, Phillip Krüger, Roberto Cortez, Rolfe Dlugy-Hegwer, Romain QUINIO, Rostislav Svoboda, Ryan Dens, Sanne Grinovero, Sergey Beryozkin, Severin Gehwolf, Stephan Strate, Stuart Douglas, Stéphane Épardaud, Tobias Haindl, Vincent Potucek, xstefank, and Yoann Rodière.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-19-1-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Agentic AI with Quarkus - part 2</title>
            <link>
                https://quarkus.io/blog/agentic-ai-with-quarkus-p2/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://quarkus.io/blog/agentic-ai-with-quarkus/&quot;&gt;first part&lt;/a&gt; of this blog post series briefly introduced agentic AI and discussed workflow patterns.
This post will explore another kind of pattern: &lt;em&gt;agents&lt;/em&gt;.
The main difference between the two is that workflow patterns are defined programmatically, while agents are more flexible and can handle a broader range of tasks.
With agents, the LLM orchestrates the sequence of steps instead of being externally orchestrated programmatically, thus reaching a higher level of autonomy and flexibility.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;agents&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#agents&quot;&gt;&lt;/a&gt;Agents&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Agents differ from the workflow patterns because the control flow is entirely delegated to LLMs instead of being implemented programmatically.
To successfully implement agents, the LLM must be able to reason and have access to a set of tools (&lt;em&gt;toolbox&lt;/em&gt;).
The LLM orchestrates the sequence of steps and decides which tools to call with which parameters.
From an external point of view, invoking an agent can be seen as invoking a function that opportunistically invokes tools to complete determinate subtasks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The agent&amp;#8217;s toolbox can be composed of:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;External services (like HTTP endpoints)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other LLM / agents&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Methods providing data from a data store&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Methods provided by the application code itself&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/agentic/agent.png&quot; alt=&quot;Agents can invoke tools&quot; width=&quot;50%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Agents can invoke tools&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Quarkus, agents are represented by interfaces annotated with &lt;code&gt;@RegisterAiService.&lt;/code&gt;
They are called &lt;em&gt;AI services&lt;/em&gt;.
In that aspect, they are not different from the &lt;em&gt;workflow patterns&lt;/em&gt;.
The main difference is that the methods of an agent interface are annotated with &lt;code&gt;@ToolBox&lt;/code&gt; to declare the tools that the LLM can use to complete the task:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@RegisterAiService(modelName = &quot;my-model&quot;)  // &amp;lt;-- The model used by this agent must be able to reason and decide which tools to call
@SystemMessage(&quot;...&quot;)
public interface RestaurantAgent {

    @UserMessage(&quot;...&quot;)
    @ToolBox({BookingService.class, WeatherService.class}) // &amp;lt;-- The tools that the LLM can use
    String handleRequest(String request);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alternatively, the &lt;code&gt;@RegisterAiService&lt;/code&gt; annotation can receive the set of tools in its &lt;code&gt;tools&lt;/code&gt; parameter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s look at some examples of agents to understand better how they work and what they can achieve.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-weather-forecast-agent&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-weather-forecast-agent&quot;&gt;&lt;/a&gt;The weather forecast agent&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/aiastool&quot;&gt;first example&lt;/a&gt; of agentic AI implements the following &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/aiastool/WeatherForecastAgent.java&quot;&gt;weather forecast agent&lt;/a&gt;.
The agent receives a user prompt and must answer questions about the weather using at most three lines.
To achieve this goal, the agent has a toolbox containing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;An AI service specialized in extracting the name of a city from the user&amp;#8217;s prompt - which can be another &lt;em&gt;agent&lt;/em&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A web service returning the geographic coordinates of a given city - this is a remote call;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A second web service providing the weather forecast for the given latitude and longitude - another remote call.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/agentic/weather-agent.png&quot; alt=&quot;Weather agent architecture&quot; width=&quot;80%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Weather agent architecture&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We do not indicate when and how these tools are used; we just add them to the toolbox.
The LLM decides when to call them and with which parameters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@RegisterAiService(modelName = &quot;tool-use&quot;)
public interface WeatherForecastAgent {

    @SystemMessage(&quot;&quot;&quot;
        You are a meteorologist, and you need to answer questions asked by the user about weather using at most 3 lines.

        The weather information is a JSON object and has the following fields:

        maxTemperature is the maximum temperature of the day in Celsius degrees
        minTemperature is the minimum temperature of the day in Celsius degrees
        precipitation is the amount of water in mm
        windSpeed is the speed of wind in kilometers per hour
        weather is the overall weather.
    &quot;&quot;&quot;)
    @ToolBox({CityExtractorAgent.class, WeatherForecastService.class, GeoCodingService.class})
    String chat(String query);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s see how are defined the tools used by this agent:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;1 . &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/aiastool/CityExtractorAgent.java&quot;&gt;Another AI Service&lt;/a&gt; specialized in extracting the name of a city from the user&amp;#8217;s prompt (thus also demonstrating how easily an &lt;em&gt;agent&lt;/em&gt; can be configured to become a tool for another AI service/agent).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@ApplicationScoped
@RegisterAiService(chatMemoryProviderSupplier = RegisterAiService.NoChatMemoryProviderSupplier.class)
public interface CityExtractorAgent {

    @UserMessage(&quot;&quot;&quot;
        You are given one question and you have to extract city name from it
        Only reply the city name if it exists or reply &apos;unknown_city&apos; if there is no city name in question

        Here is the question: {question}
        &quot;&quot;&quot;)
    @Tool(&quot;Extracts the city from a question&quot;) // &amp;lt;-- The tool description, the LLM can use it to decide when to call this tool
    String extractCity(String question); // &amp;lt;-- The method signature, the LLM use it to know how to call this tool
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;2 . A &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/aiastool/geo/GeoCodingService.java&quot;&gt;web service&lt;/a&gt; returning the geographic coordinates of a given city.
It&amp;#8217;s a simple Quarkus REST client interface, meaning that Quarkus automatically generates the actual implementation.
It can be combined with fault tolerance, metrics, and other Quarkus features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@RegisterRestClient(configKey = &quot;geocoding&quot;)
@Path(&quot;/v1&quot;)
public interface GeoCodingService {

    @GET
    @Path(&quot;/search&quot;)
    @ClientQueryParam(name = &quot;count&quot;, value = &quot;1&quot;) // Limit the number of results to 1 (HTTP query parameter)
    @Tool(&quot;Finds the latitude and longitude of a given city&quot;)
    GeoResults findCity(@RestQuery String name);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;3 . Another &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/aiastool/weather/WeatherForecastService.java&quot;&gt;web service&lt;/a&gt; providing the weather forecast for the given latitude and longitude.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@RegisterRestClient(configKey = &quot;openmeteo&quot;)
@Path(&quot;/v1&quot;)
public interface WeatherForecastService {

    @GET
    @Path(&quot;/forecast&quot;)
    @ClientQueryParam(name = &quot;forecast_days&quot;, value = &quot;7&quot;)
    @ClientQueryParam(name = &quot;daily&quot;, value = {
            &quot;temperature_2m_max&quot;,
            &quot;temperature_2m_min&quot;,
            &quot;precipitation_sum&quot;,
            &quot;wind_speed_10m_max&quot;,
            &quot;weather_code&quot;
    })
    @Tool(&quot;Forecasts the weather for the given latitude and longitude&quot;)
    WeatherForecast forecast(@RestQuery double latitude, @RestQuery double longitude);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s possible to invoke the &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/aiastool/WeatherResource.java&quot;&gt;HTTP endpoint&lt;/a&gt; exposing this agent-based weather service:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl http://localhost:8080/weather/city/Rome&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The response will be something like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;The weather in Rome today will have a maximum temperature of 14.3°C, minimum temperature of 2.0°C.
No precipitation expected, and the wind speed will be up to 5.6 km/h.
The overall weather condition is expected to be cloudy.&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In essence, this control flow is quite similar to the prompt chaining workflow (introduced in the &lt;a href=&quot;https://quarkus.io/blog/agentic-ai-with-quarkus/#prompt-chaining&quot;&gt;previous post&lt;/a&gt;), where the user input is sequentially transformed in steps (in this case, going from the prompt to the name of the city contained in that prompt to the geographical coordinates of that city, to the weather forecasts at those coordinates).
The significant difference is that the LLM directly orchestrates the sequence of steps instead of being externally orchestrated programmatically.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The observability automatically provided by Quarkus (in the GitHub project, observability is disabled by default, but it can be turned on with the &lt;code&gt;-Dobservability&lt;/code&gt; flag) allows one to visually trace the sequence of tasks accomplished by the agent in order to execute its task.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/agentic/weather-trace.png&quot; alt=&quot;Tracing sequential execution of the prompt chaining pattern&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Tracing weather agent execution&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;a-more-general-purpose-ai-agent&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-more-general-purpose-ai-agent&quot;&gt;&lt;/a&gt;A more general-purpose AI agent&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the previous example, the agent has access to very specific tools.
It&amp;#8217;s possible to provide more general tools that help the agent perform a wider range of tasks.
Typically, a web search tool can be handy for information retrieval tasks.
That&amp;#8217;s the purpose of &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/searchastool&quot;&gt;this second example&lt;/a&gt;.
It extends the agent&amp;#8217;s capabilities by allowing the LLM to search online for information not part of its original training set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In general, these scenarios require a bigger model, so this example has been configured to use &lt;code&gt;qwen2.5-14b&lt;/code&gt; and a longer timeout to give it a chance to complete its task:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.langchain4j.ollama.big-model.chat-model.model-id=qwen2.5:14b
quarkus.langchain4j.ollama.big-model.chat-model.temperature=0
quarkus.langchain4j.ollama.big-model.timeout=600s&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/searchastool/IntelligentAgent.java&quot;&gt;intelligent agent&lt;/a&gt; of this example can be configured to use this bigger model passing its name to the &lt;code&gt;@RegisterAiService&lt;/code&gt; annotation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@RegisterAiService(modelName = &quot;big-model&quot;)
public interface IntelligentAgent {

    @SystemMessage(&quot;&quot;&quot;
        You are a chatbot, and you need to answer questions asked by the user.
        Perform a web search for information that you don&apos;t know and use the result to answer to the initial user&apos;s question.
    &quot;&quot;&quot;)
    @ToolBox({WebSearchService.class}) // &amp;lt;-- the web search tool
    String chat(String question);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/searchastool/WebSearchService.java&quot;&gt;tool&lt;/a&gt; can perform a web search on &lt;em&gt;DuckDuckGo&lt;/em&gt; and returns the result in plain text:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@ApplicationScoped
public class WebSearchService {

    @Tool(&quot;Perform a web search to retrieve information online&quot;)
    String webSearch(String q) throws IOException {
        String webUrl = &quot;https://html.duckduckgo.com/html/?q=&quot; + q;
        return Jsoup.connect(webUrl).get().text();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is possible to use more advanced search engines or APIs, like &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/web-search.html&quot;&gt;Tavily&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The AI service uses this tool to retrieve online information for everything it ignores and arrange that data together to provide an answer to a generic user question.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance, consider the following question: &lt;em&gt;How many seconds would it take for a leopard at full speed to run through the Pont des Arts?&lt;/em&gt;
Using this &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/searchastool/AgenticChatbotResource.java&quot;&gt;HTTP endpoint&lt;/a&gt;, it would be executed using:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl http://localhost:8080/ask/how%20many%20seconds%20would%20it%20take%20for%20a%20leopard%20at%20full%20speed%20to%20run%20through%20Pont%20des%20Arts&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To reply to this question, the agent invokes the web search tool twice: once to find the length of Pont des Arts and once to retrieve a leopard&amp;#8217;s speed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/agentic/ai-agent.png&quot; alt=&quot;An agent using an external web search tool&quot; width=&quot;80%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. An agent using an external web search tool&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then, the agent puts this information together and generates an output like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;The length of Pont des Arts is approximately 155 meters. A leopard can run at speeds up to about 58 kilometers per hour (36 miles per hour). To calculate how many seconds it would take for a leopard running at full speed to cross the bridge, we need to convert its speed into meters per second and then divide the length of the bridge by this speed.

1 kilometer = 1000 meters
58 kilometers/hour = 58 * 1000 / 3600 ≈ 16.11 meters/second

Now, we can calculate the time it would take for a leopard to run through Pont des Arts:

Time (seconds) = Distance (meters) / Speed (m/s)
= 155 / 16.11
≈ 9.62 seconds

So, it would take approximately 9.62 seconds for a leopard running at full speed to run through Pont des Arts.&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This example illustrates how an agent can use &lt;em&gt;tools&lt;/em&gt; to retrieve data.
While we use a search engine here, you can easily implement a tool that queries a database or another service to retrieve the needed information.
You can check &lt;a href=&quot;https://github.com/quarkusio/quarkus-workshop-langchain4j/blob/main/step-08/src/main/java/dev/langchain4j/quarkus/workshop/BookingRepository.java&quot;&gt;this example&lt;/a&gt; to see how to implement a tool that queries a database using a Quarkus Panache repository.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;agents-and-conversational-ai&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#agents-and-conversational-ai&quot;&gt;&lt;/a&gt;Agents and Conversational AI&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The flexibility of AI agents can become even more relevant when used in services that are not intended to fulfill a single request but need to have a more extended conversation with the user to achieve their goal.
For instance, agents can function as chatbots, enabling them to handle multiple users in parallel, each with independent conversations.
It requires managing the state of each conversation, often referred to as memories (the set of messages already exchanged with the LLM).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/restaurant/RestaurantAgent.java&quot;&gt;chatbot of a restaurant booking system&lt;/a&gt;, designed to chat with customers and collect their data and requirements, represents an interesting practical application of this pattern.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@RegisterAiService(modelName = &quot;tool-use&quot;)
@SystemMessage(&quot;&quot;&quot;
        You are an AI dealing with the booking for a restaurant.
        Do not invent the customer name or party size, but explicitly ask for them if not provided.
        If the user specifies a preference (indoor/outdoor), you should book the table with the preference. However, please check the weather forecast before booking the table.
        &quot;&quot;&quot;)
@SessionScoped
public interface RestaurantAgent {

    @UserMessage(&quot;&quot;&quot;
            You receive request from customer and need to book their table in the restaurant.
            Please be polite and try to handle the user request.

            Before booking the table, makes sure to have valid date for the reservation, and that the user explicitly provided his name and party size.
            If the booking is successful just notify the user.

            Today is: {current_date}.
            Request: {request}
            &quot;&quot;&quot;)
    @ToolBox({BookingService.class, WeatherService.class})
    String handleRequest(String request);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the user message conveys not only the customer&amp;#8217;s request but also includes the current date.
This allows the LLM to understand relative dates, such as &quot;tomorrow&quot; or &quot;in three days,&quot; which are often used by humans.
Initially, we included the current date in the system message, but doing so often caused the LLM to forget it and hallucinate using a different date.
Moving it to the user message empirically proved to work much better, possibly because this way, it is passed not only once but in every message in the chat memory.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the agent completes that information-gathering process, the chatbot uses a &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/restaurant/booking/BookingService.java&quot;&gt;tool accessing the database&lt;/a&gt; of existing reservations to both check if there is still a table available for the customer&amp;#8217;s needs and to book that table if so.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@ApplicationScoped
public class BookingService {

    private final int capacity;

    public BookingService(@ConfigProperty(name = &quot;restaurant.capacity&quot;) int capacity) {
        this.capacity = capacity;
    }

    public boolean hasCapacity(LocalDate date, int partySize) {
        int sum = Booking.find(&quot;date&quot;, date).list().stream().map(b -&amp;gt; (Booking) b)
                         .mapToInt(b -&amp;gt; b.partySize)
                         .sum();
        return sum + partySize &amp;lt;= capacity;
    }

    @Transactional
    @Tool(&quot;Books a table for a given name, date (passed as day of the month, month and year), party size and preference (indoor/outdoor). If the restaurant is full, an exception is thrown. If preference is not specified, `UNSET` is used.&quot;)
    public String book(String name, int day, int month, int year, int partySize, Booking.Preference preference) {
        var date = LocalDate.of(year, month, day);
        if (hasCapacity(date, partySize)) {
            Booking booking = new Booking();
            booking.date = date;
            booking.name = name;
            booking.partySize = partySize;
            if (preference == null) {
                preference = Booking.Preference.UNSET;
            }
            booking.preference = preference;
            booking.persist();
            String result = String.format(&quot;%s successfully booked a %s table for %d persons on %s&quot;, name, preference, partySize, date);
            Log.info(result);
            return result;
        }
        return &quot;The restaurant is full for that day&quot;;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To assist the customer in deciding whether to eat outside, the agent can also reuse, as a second tool, the &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/restaurant/weather/WeatherService.java&quot;&gt;weather forecast service&lt;/a&gt; implemented in one of the former examples, passing to it the geographic coordinates of the restaurant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;restaurant.location.latitude=45
restaurant.location.longitude=5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The final architectural design of the chatbot is the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/agentic/restaurant-agent.png&quot; alt=&quot;The restaurant chatbot agent&quot; width=&quot;80%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. The restaurant chatbot agent&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the customer provides all necessary details, the chatbot confirms the booking and presents a reservation summary.
The final booking is then stored in the database.
It is possible to give this a try by accessing the URL:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://localhost:8080/restaurant.html&quot; class=&quot;bare&quot;&gt;http://localhost:8080/restaurant.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A typical example of user interaction could be something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/agentic/restaurant.png&quot; alt=&quot;An example of interaction with the restaurant chatbot agent&quot; width=&quot;80%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. An example of interaction with the restaurant chatbot agent&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusions-and-next-steps&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusions-and-next-steps&quot;&gt;&lt;/a&gt;Conclusions and next steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This blog post series illustrates how you can use agentic patterns to implement AI-infused applications with Quarkus and its LangChain4j extension.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have covered &lt;em&gt;workflow patterns in a previous post&lt;/em&gt; and &lt;em&gt;agents in this post&lt;/em&gt;.
Both sets of patterns are based on the same underlying principles but differ in how the control flow is managed.
The workflow patterns are more suitable for tasks that can be easily defined programmatically, while agents are more flexible and can handle a broader range of tasks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nevertheless, the examples discussed in this series can be improved and further generalized with other techniques that will be introduced in future works, such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Memory management across LLM calls&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State management for long-running processes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improved observability&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dynamic tools and tool discovery&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The relation with the MCP protocol and how agentic architecture can be implemented with MCP clients and servers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How can the RAG pattern be revisited in light of the agentic architecture, both with workflow patterns and agents?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 20 Feb 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/agentic-ai-with-quarkus-p2/
            </guid>
            
            
            
            <author>Mario Fusco (https://twitter.com/mariofusco)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.18.4 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-18-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.18.4, the third (we skipped 3.18.0) maintenance release for our 3.18 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will release Quarkus 3.19 next week.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.18, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.18.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.18&quot;&gt;Quarkus 3.18 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.18.4&quot;&gt;3.18.4&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 19 Feb 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-18-4-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>The Quarkus Edge: How Real Customers Achieve Speed, Performance, and Agility</title>
            <link>
                https://quarkus.io/blog/idc-customer-case-studies/
            </link>
            <description>
                &lt;div class=&quot;imageblock text-left&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/idc-customer-casestudy/Quarkus_IDC_WP_FrontPage.jpg&quot; alt=&quot;Quarkus IDC WP FrontPage&quot; width=&quot;50%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;download-the-full-report&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#download-the-full-report&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.redhat.com/en/engage/idc-the-quarkus-edge-analyst-material&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;&lt;em&gt;Download the full report&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re part of the Quarkus community, you already know it’s fast, lightweight, and designed for cloud-native workloads. But have you ever wondered how other organizations are using Quarkus in production?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A new IDC whitepaper, &lt;strong&gt;&lt;em&gt;The Quarkus Edge: How Real Customers Achieve Speed, Performance, and Agility&lt;/em&gt;&lt;/strong&gt;, showcases how three organizations have transformed their developer productivity, infrastructure efficiency, and business agility with Quarkus. These case studies highlight why organizations are choosing Quarkus and how it&amp;#8217;s driving measurable results in industries like telecommunications, transportation, and banking.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re looking for compelling, real-world stories to share with your peers, leadership, or decision-makers, this report is exactly what you need. Let&amp;#8217;s dive into the highlights.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-organizations-are-choosing-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-organizations-are-choosing-quarkus&quot;&gt;&lt;/a&gt;Why Organizations Are Choosing Quarkus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The report highlights several common drivers behind Quarkus adoption:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;✅ &lt;strong&gt;Massive Performance Gains&lt;/strong&gt;: up to &lt;strong&gt;10x&lt;/strong&gt; CPU cost reduction and &lt;strong&gt;85%&lt;/strong&gt; faster start-up times.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;✅ &lt;strong&gt;Cloud-Native &amp;amp; Kubernetes-Ready&lt;/strong&gt;: built for containerization and event-driven architectures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;✅ &lt;strong&gt;Developer Productivity Boosts&lt;/strong&gt;: live coding, lower memory footprint, and seamless integration w/ DevOps workflows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;✅ &lt;strong&gt;Lower Costs&lt;/strong&gt;: significant reduction in cloud infrastructure spend, especially for high-throughput, low-latency applications.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;case-study-1-telco-powering-edge-iot-with-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#case-study-1-telco-powering-edge-iot-with-quarkus&quot;&gt;&lt;/a&gt;Case Study #1 (Telco): Powering Edge &amp;amp; IoT with Quarkus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A major telecommunications company needed to meet 5G and edge computing demands. After benchmarking against alternatives like Spring WebFlux and Vert.x, they selected Quarkus for its CPU efficiency and latency performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;🔹 &lt;strong&gt;10x&lt;/strong&gt; reduction in CPU costs, crucial for high-throughput workloads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;🔹 Lower latency, enabling real-time IoT and edge applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;🔹 Seamless integration with Kafka, RabbitMQ, and event-driven architectures.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;case-study-2-transportation-faster-event-driven-services&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#case-study-2-transportation-faster-event-driven-services&quot;&gt;&lt;/a&gt;Case Study #2 (Transportation): Faster Event-Driven Services&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A global transportation services provider turned to Quarkus for its event-driven architecture (EDA). The result was a dramatic reduction in infrastructure footprint and start-up times, helping them move toward a cloud-native future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;🔹 Start-up time reduced from &lt;strong&gt;5-10&lt;/strong&gt; minutes to seconds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;🔹 Significantly lower memory and CPU usage, cutting operational costs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;🔹 Seamless event-driven integration with Kafka and reactive messaging.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;case-study-3-banking-modernizing-financial-services&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#case-study-3-banking-modernizing-financial-services&quot;&gt;&lt;/a&gt;Case Study #3 (Banking): Modernizing Financial Services&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A leading European bank began migrating its core banking platform to Quarkus, driven by support discontinuation for legacy systems. They needed a solution that was secure, scalable, and cost-effective.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;🔹 &lt;strong&gt;85%&lt;/strong&gt; faster start-up times, improving deployment and system resilience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;🔹 &lt;strong&gt;30%&lt;/strong&gt; more applications hosted on existing infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;🔹 Increased developer productivity, reducing time-to-market for new financial products.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-this-report-to-advocate-for-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#use-this-report-to-advocate-for-quarkus&quot;&gt;&lt;/a&gt;Use This Report to Advocate for Quarkus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re already using or evaluating Quarkus, this report is a powerful tool to help spread the word within your organization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;🔹 &lt;strong&gt;developers&lt;/strong&gt;: share it with your peers to highlight how Quarkus improves developer experience and reduces friction in cloud-native development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;🔹 &lt;strong&gt;architects &amp;amp; decision-makers&lt;/strong&gt;: use the case studies to showcase Quarkus’ proven success in real-world deployments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;🔹 &lt;strong&gt;executives&lt;/strong&gt;: the whitepaper quantifies cost savings, performance gains, and business agility, making the case for standardizing on Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;want-to-share-your-story&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#want-to-share-your-story&quot;&gt;&lt;/a&gt;Want to share your story&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tell us how you are using Quarkus by writing your own user story on Quarkus.io.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkusio.github.io?tab=readme-ov-file#writing-a-blog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Learn More&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 19 Feb 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/idc-customer-case-studies/
            </guid>
            
            
            
            <author>Jeff Beck (https://twitter.com/aJeffBeck)</author>
            
        </item>
        
        <item>
            <title>Agentic AI with Quarkus - part 1</title>
            <link>
                https://quarkus.io/blog/agentic-ai-with-quarkus/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although there is no universally agreed definition of an AI agent, several emerging patterns demonstrate how to coordinate and combine the capabilities of multiple AI services to create AI-infused applications that can accomplish more complex tasks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;According to a &lt;a href=&quot;https://www.anthropic.com/research/building-effective-agents&quot;&gt;recent article published by Antropic researchers&lt;/a&gt;, these &lt;em&gt;Agentic System architectures&lt;/em&gt; can be grouped into two main categories:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;workflows&lt;/strong&gt;: LLMs and tools are orchestrated through predefined code paths,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;agents&lt;/strong&gt;: LLMs dynamically direct their processes and tool usage, maintaining control over how they execute tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The goal of this series of articles is to discuss the most common workflow and agentic AI patterns and architectures, with the practical aid of &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai&quot;&gt;this project&lt;/a&gt; that demonstrates for each of them an example of how they can be implemented through Quarkus and its LangChain4j integration. Of course, a real-world application may use and combine these patterns in multiple ways to implement a complex behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This first article focuses on the &lt;em&gt;workflow&lt;/em&gt; patterns. A second article will cover the &lt;em&gt;agent&lt;/em&gt; patterns.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All the demos in that project run the LLMs inference locally through an &lt;a href=&quot;https://ollama.com/&quot;&gt;ollama&lt;/a&gt; server. In particular the demos in the workflow section use a llama3.2 model, while the ones relative to the pure agents one employ qwen2.5 since this last model empirically demonstrated of working better when multiple tool callings are required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;workflow-patterns&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#workflow-patterns&quot;&gt;&lt;/a&gt;Workflow patterns&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;AI workflows are patterns in which different LLM-based services (&lt;em&gt;AI services&lt;/em&gt; in the Quarkus vocabulary) are coordinated &lt;strong&gt;programmatically&lt;/strong&gt; in a predetermined manner.
This article introduces three base patterns, namely:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#prompt-chaining&quot;&gt;the prompt chaining pattern&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#parallelization&quot;&gt;the parallelization pattern&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#routing&quot;&gt;the routing pattern&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;prompt-chaining&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#prompt-chaining&quot;&gt;&lt;/a&gt;Prompt chaining&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Prompt chaining is, without a doubt, the simplest yet powerful and effective technique in agentic AI workflows. In this technique, the output of one prompt (the response from an LLM) becomes the input of the next, enabling complex, multi-step reasoning or task execution. It is ideal for situations with a straightforward way to decompose a complex task into smaller and better-delimited steps, thus reducing the possibility of hallucinations or other LLMs misbehaving.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Understanding that each coordinated call to LLM may rely on different models and system messages is essential. Thus, each step can be implemented using a more specialized model and system message.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A typical use case for applying this technique is content creation, like advertising or novel writing. For instance, this &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/promptchaining&quot;&gt;first example&lt;/a&gt; leverages this pattern to implement a creative writing and editing workflow, where the &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/promptchaining/CreativeWriter.java&quot;&gt;first AI service&lt;/a&gt; is the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@RegisterAiService(chatMemoryProviderSupplier = RegisterAiService.NoChatMemoryProviderSupplier.class)
public interface CreativeWriter {
    @UserMessage(&quot;&quot;&quot;
            You are a creative writer.
            Generate a draft of a short novel around the given topic.
            Return only the novel and nothing else.
            The topic is {topic}.
            &quot;&quot;&quot;)
    String generateNovel(String topic);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It generates a story draft on a topic provided by the user. In contrast, two more services, implemented very similarly to this one, subsequently modify the outcome of the first one. In particular, a &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/promptchaining/StyleEditor.java&quot;&gt;second service&lt;/a&gt; rewrites the draft to make it more coherent with a determined style, while a &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/promptchaining/AudienceEditor.java&quot;&gt;third one&lt;/a&gt; executes a final edit to make it a good fit for the required audience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is also worth to be noted that all these three AI services are intended to be used through one-shot calls in a completely stateless way, so they are configured to not have any &lt;a href=&quot;https://docs.langchain4j.dev/tutorials/chat-memory/&quot;&gt;chat memory&lt;/a&gt;. Regardless of this configuration, each AI service has its own chat memory, confined to the single service, and this is why it is necessary to explicitly pass to each of them the output produced by the former LLM in the chain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/agentic/chaining-pattern.png&quot; alt=&quot;Prompt chaining pattern&quot; width=&quot;80%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Prompt chaining pattern&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case, it is pretty straightforward to expose this service through a &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/promptchaining/WriterResource.java&quot;&gt;HTTP endpoint&lt;/a&gt; that invokes these AI services one after the other, making the editors rewrite or refine the content produced by the first creative writer:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;// The createWriter, styleEditor, and audienceEditor fields are AI services injected by Quarkus, see full code for details
@GET
@Path(&quot;topic/{topic}/style/{style}/audience/{audience}&quot;)
public String hello(String topic, String style, String audience) {
    // Call the first AI service:
    String novel = creativeWriter.generateNovel(topic);

    // Pass the outcome from the first call to the second AI service:
    novel = styleEditor.editNovel(novel, style);

    // Pass the outcome from the second call to the third AI service:
    novel = audienceEditor.editNovel(novel, audience);

    // Return the final result:
    return novel;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The HTTP endpoint allows us to define a topic, style, and audience of the novel to be produced; so, for example, running the project locally, it would be possible to obtain a drama about dogs having kids as the target audience by calling this URL:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl http://localhost:8080/write/topic/dogs/style/drama/audience/kids&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an example, it generates a result like &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/text/dogs-novel.txt&quot;&gt;this&lt;/a&gt;. Since this project integrates the observability capabilities provided by Quarkus out-of-the-box, it is also possible to look at the tracing of the flow of invocations performed to fulfill this request, which, of course, puts in evidence of the sequential nature of this pattern.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/agentic/chaining-trace.png&quot; alt=&quot;Tracing sequential execution of the prompt chaining pattern&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Tracing sequential execution of the prompt chaining pattern&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;parallelization&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#parallelization&quot;&gt;&lt;/a&gt;Parallelization&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This second pattern also orchestrates multiple calls to LLMs. However, unlike the prompt chaining pattern, the calls are independent and do not require the output of one call to be used as the input of another. In these situations, those calls can be performed in parallel, followed by an aggregator that combines their outcomes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To demonstrate how this works, let&amp;#8217;s consider this &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/parallelization&quot;&gt;second example&lt;/a&gt;. This code recommends a plan for a lovely evening with a specific mood, combining a movie and a meal that matches that mood. The &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/parallelization/EveningPlannerResource.java&quot;&gt;HTTP endpoint&lt;/a&gt; implements this goal by invoking two different AI services &lt;strong&gt;in parallel&lt;/strong&gt; and then combining their outcome, putting together the three different suggestions of the two different LLM-based experts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;import java.time.Duration;@GET
@Path(&quot;mood/{mood}&quot;)
public List&amp;lt;EveningPlan&amp;gt; plan(String mood) {
    var movieSelection = Uni.createFrom().item(() -&amp;gt; movieExpert.findMovie(mood)).runSubscriptionOn(scheduler);
    var mealSelection = Uni.createFrom().item(() -&amp;gt; foodExpert.findMeal(mood)).runSubscriptionOn(scheduler);
    return Uni.combine().all()
            .unis(movieSelection, mealSelection) // This invokes the two LLMs in parallel
            .with((movies, meals) -&amp;gt; {
                // Both calls have completed, let&apos;s combine the results
                List&amp;lt;EveningPlan&amp;gt; moviesAndMeals = new ArrayList&amp;lt;&amp;gt;();
                for (int i = 0; i &amp;lt; 3; i++) {
                    moviesAndMeals.add(new EveningPlan(movies.get(i), meals.get(i)));
                }
                return moviesAndMeals;
            })
            .await().atMost(Duration.ofSeconds(60));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/parallelization/MovieExpert.java&quot;&gt;first LLM&lt;/a&gt; is an AI service asked to provide three titles of movies matching the given mood.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@RegisterAiService
public interface MovieExpert {

    @UserMessage(&quot;&quot;&quot;
            You are a great evening planner.
            Propose a list of 3 movies matching the given mood.
            The mood is {mood}.
            Provide a list with the 3 items and nothing else.
            &quot;&quot;&quot;)
    List&amp;lt;String&amp;gt; findMovie(String mood);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/parallelization/FoodExpert.java&quot;&gt;second one&lt;/a&gt;, with a very similar implementation is asked to provide three meals. When these LLM calls are complete, the results (3 lists of 3 items each) are aggregated to create a list of 3 fantastic evening plans with a suggested movie and meal each.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/agentic/parallel-pattern.png&quot; alt=&quot;The parallelization pattern&quot; width=&quot;50%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. The parallelization pattern&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance asking that endpoint to provide evening plans for a romantic mood:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl http://localhost:8080/evening/mood/romantic&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The outcome is something like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;[
  EveningPlan[movie=1. The Notebook, meal=1. Candlelit Chicken Piccata],
  EveningPlan[movie=2. La La Land, meal=2. Rose Petal Risotto],
  EveningPlan[movie=3. Crazy, Stupid, Love., meal=3. Sunset Seared Scallops]
]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case, the tracing of the flow of invocations performed to fulfill this request shows, as expected, that the two LLM invocations are performed in parallel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/agentic/parallel-trace.png&quot; alt=&quot;Tracing parallel LLMs invocation&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Tracing parallel LLMs invocation&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;routing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#routing&quot;&gt;&lt;/a&gt;Routing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another common situation is the need to direct tasks requiring specific handling to specialized models, tools, or processes based on determined criteria. In these cases, the routing workflow allows the dynamic allocation of tasks to the most suitable AI service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing&quot;&gt;This example&lt;/a&gt; shows how this pattern can be applied in a simple scenario where a user asks a question that has to be redirected to a &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing/LegalExpert.java&quot;&gt;legal&lt;/a&gt;, &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing/MedicalExpert.java&quot;&gt;medical&lt;/a&gt; or &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing/TechnicalExpert.java&quot;&gt;technical&lt;/a&gt; expert to be answered most accurately, where any of these experts are an AI service implemented for instance as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@RegisterAiService
public interface MedicalExpert {

    @UserMessage(&quot;&quot;&quot;
            You are a medical expert.
            Analyze the following user request under a medical point of view and provide the best possible answer.
            The user request is {request}.
            &quot;&quot;&quot;)
    String chat(String request);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The categorization of the user&amp;#8217;s request is performed by &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing/CategoryRouter.java&quot;&gt;another LLM service&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@RegisterAiService
public interface CategoryRouter {

    @UserMessage(&quot;&quot;&quot;
            Analyze the following user request and categorize it as &apos;legal&apos;, &apos;medical&apos; or &apos;technical&apos;.
            Reply with only one of those words and nothing else.
            The user request is {request}.
            &quot;&quot;&quot;)
    RequestCategory classify(String request);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;that returns one of the possible categories of the user&amp;#8217;s request, encoded in this enumeration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public enum RequestCategory {
    LEGAL, MEDICAL, TECHNICAL, UNKNOWN
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thus, the &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing/RouterService.java&quot;&gt;router service&lt;/a&gt; can send the question to the right expert.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public UnaryOperator&amp;lt;String&amp;gt; findExpert(String request) {
    var category = RequestType.decode(categoryRouter.classify(request));
    return  switch (category) {
        case LEGAL -&amp;gt; legalExpert::chat;
        case MEDICAL -&amp;gt; medicalExpert::chat;
        case TECHNICAL -&amp;gt; technicalExpert::chat;
        default -&amp;gt; ignore -&amp;gt; &quot;I cannot find an appropriate category for this request.&quot;;
    };
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/agentic/routing-pattern.png&quot; alt=&quot;Routing pattern&quot; width=&quot;70%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. Routing pattern&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this way, when the user calls the &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing/ExpertAssistanceResource.java&quot;&gt;HTTP endpoint&lt;/a&gt;, exposing this service writing something like: &quot;I broke my leg what should I do&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl http://localhost:8080/expert/request/I%20broke%20my%20leg%20what%20should%20I%20do&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first LLM categorizes this request as a medical one, and the router forwards it to the medical expert LLM, thus generating a result like &lt;a href=&quot;https://github.com/mariofusco/quarkus-agentic-ai/blob/main/text/expert-response.txt&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article demonstrated how you can implement &lt;em&gt;workflow patterns&lt;/em&gt; with Quarkus Langchain4J.
Quarkus Langchain4J provides a powerful and flexible way to implement these patterns, allowing you to orchestrate multiple AI services in a way that is both efficient and easy to understand.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next article will cover the &lt;em&gt;agent patterns&lt;/em&gt;. So, stay tuned!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 18 Feb 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/agentic-ai-with-quarkus/
            </guid>
            
            
            
            <author>Mario Fusco (https://twitter.com/mariofusco)</author>
            
        </item>
        
        <item>
            <title>Using LangChain4j to analyze PDF documents</title>
            <link>
                https://quarkus.io/blog/using-langchain4j-to-analyze-pdf-documents/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my consulting work, clients frequently present us with challenging problems that require innovative solutions.
Recently, we were tasked with extracting structured metadata from PDF documents through automated analysis. Below, I&amp;#8217;ll share a simplified version of this real-world challenge and how we approached it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-case&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#use-case&quot;&gt;&lt;/a&gt;Use Case&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our client receives compressed archives (.zip files) containing up to hundreds of portable document format (PDF) lease documents that need review. Each document contains property lease details that must be validated for accuracy. The review process involves checking various business rules - for example, identifying leases with terms shorter than 2 years. Currently, this document validation is done manually, which is time-consuming. The client wants to automate and streamline this review workflow to improve efficiency.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some complications with these lease documents are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The documents are not in a standard format so each lease may be written in a different way by a different property manager.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The documents may be scanned, so the text is sometimes human writing and not typewritten.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The documents may contain multiple pages, which are not always in the same order.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The lease terms may not be an actual date but written as &quot;Expires five years from the start date&quot; or &quot;Expires on the anniversary of the start date&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Metadata such as acreage and tax parcel information is needed by our client to validate the lease details.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can understand why this is time consuming for a human to review and validate the documents.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;our-solution&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#our-solution&quot;&gt;&lt;/a&gt;Our Solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After consulting with &lt;a href=&quot;https://github.com/dliubarskyi&quot;&gt;Dmytro Liubarskyi&lt;/a&gt; and collaborating with the Quarkus team, we implemented a solution using LangChain4j for document metadata extraction. We chose &lt;a href=&quot;https://ai.google.dev/docs/gemini_api_overview&quot;&gt;Google Gemini&lt;/a&gt; as our Large Language Model (LLM) since it excels at PDF analysis through its built-in Optical Character Recognition (OCR) capabilities, enabling accurate text extraction from both digital and scanned documents.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;technical-details&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#technical-details&quot;&gt;&lt;/a&gt;Technical Details&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The application is built using:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Quarkus - A Kubernetes-native Java framework&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LangChain4j - Java bindings for LangChain to interact with LLMs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google Gemini AI - For PDF document analysis and information extraction&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quarkus REST - For handling multipart file uploads&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTML/JavaScript frontend - Simple UI for file upload and results display&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The backend processes the PDF through these steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Accepts PDF upload via multipart form data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Converts PDF content to base64 encoding&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sends to Gemini AI with a structured JSON schema for response formatting&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Returns parsed lease information in a standardized format&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Displays results in a tabular format on the web interface&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main components are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LeaseAnalyzerResource&lt;/code&gt; - REST endpoint for PDF analysis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LeaseReport&lt;/code&gt; - Data structure for lease information&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Web interface for file upload and results display&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-it-works&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-it-works&quot;&gt;&lt;/a&gt;How it works&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First we need a Google Gemini API key. You can get one for free, see more details here: &lt;a href=&quot;https://ai.google.dev/gemini-api/docs/api-key&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gemini API Key Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;export QUARKUS_LANGCHAIN4J_AI_GEMINI_API_KEY=&amp;lt;your-google-ai-gemini-api-key&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next we need to install the LangChain4j dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-langchain4j-ai-gemini&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.25.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;configure-gemini-llm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configure-gemini-llm&quot;&gt;&lt;/a&gt;Configure Gemini LLM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next we need to wire up the Gemini LLM to the application (using your Google AI Gemini API key).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;quarkus.langchain4j.ai.gemini.chat-model.model-id=gemini-2.0-flash
quarkus.langchain4j.log-requests=true
quarkus.langchain4j.log-responses=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Logging the request and response is optional but can be helpful for debugging.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;register-the-ai-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#register-the-ai-service&quot;&gt;&lt;/a&gt;Register the AI service&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We must register the AI service to use the &lt;code&gt;LeaseAnalyzer&lt;/code&gt; interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;import dev.langchain4j.data.pdf.PdfFile;
import dev.langchain4j.service.UserMessage;
import io.quarkiverse.langchain4j.PdfUrl;
import io.quarkiverse.langchain4j.RegisterAiService;

@RegisterAiService(chatMemoryProviderSupplier = RegisterAiService.NoChatMemoryProviderSupplier.class)
public interface LeaseAnalyzer {

    @UserMessage(&quot;Analyze the given document&quot;)
    LeaseReport analyze(@PdfUrl PdfFile pdfFile);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;define-your-data-structure&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#define-your-data-structure&quot;&gt;&lt;/a&gt;Define your data structure&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we need to model the data structure for the lease information that we want the LLM to extract from any lease document.  You can customize these fields based on the information you need from the PDF documents but in our use case below we are extracting the following information:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public record LeaseReport(
    LocalDate agreementDate,
    LocalDate termStartDate,
    LocalDate termEndDate,
    LocalDate developmentTermEndDate,
    String landlordName,
    String tenantName,
    String taxParcelId,
    BigDecimal acres,
    Boolean exclusiveRights) {
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;create-the-rest-endpoint&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-the-rest-endpoint&quot;&gt;&lt;/a&gt;Create the REST endpoint&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lastly, we need to create a &lt;code&gt;LeaseAnalyzerResource&lt;/code&gt; class that will use the LLM to extract the lease information from the PDF document.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@Inject
LeaseAnalyzer analyzer;

@PUT
@Consumes(MediaType.MULTIPART_FORM_DATA)
@Produces(MediaType.TEXT_PLAIN)
public String upload(@RestForm(&quot;file&quot;) FileUpload fileUploadRequest) {
    final String fileName = fileUploadRequest.fileName();
    log.infof(&quot;Uploading file: %s&quot;, fileName);

    try {
        // Convert input stream to byte array for processing
        byte[] fileBytes = Files.readAllBytes(fileUploadRequest.filePath());

        // Encode PDF content to base64 for transmission
        String documentEncoded = Base64.getEncoder().encodeToString(fileBytes);

        log.info(&quot;Google Gemini analyzing....&quot;);
        long startTime = System.nanoTime();

        LeaseReport result = analyzer.analyze(PdfFile.builder().base64Data(documentEncoded).build());

        long endTime = System.nanoTime();
        log.infof(&quot;Google Gemini analyzed in %.2f seconds: %s&quot;, (endTime - startTime) / 1_000_000_000.0, result);

        return result;
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a simple HTML/JavaScript frontend that allows you to upload a PDF document and view the results.  In the example below 3 different lease documents were uploaded and analyzed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-user-stories/melloware/lease-analyzer.png&quot; alt=&quot;Lease Analyzer Results&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Lease Analyzer Results&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find the complete example code on &lt;a href=&quot;https://github.com/melloware/quarkus-lease-analyzer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article demonstrated how LangChain4j and AI can be leveraged to automatically extract structured metadata from PDF documents. By implementing this solution, our client will significantly reduce manual document processing time, potentially saving thousands of work hours annually. The combination of LangChain4j and Google Gemini AI proves to be a powerful approach for automating document analysis workflows.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/using-langchain4j-to-analyze-pdf-documents/
            </guid>
            
            
            
            <author>Emil Lefkof</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.18.3 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-18-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.18.3, the second (we skipped 3.18.0) maintenance release for our 3.18 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also released Quarkus 3.19.0.CR1 today.
We encourage you to test it and report back as we will branch 3.20 LTS from 3.19.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.18, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.18.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.18&quot;&gt;Quarkus 3.18 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.18.3&quot;&gt;3.18.3&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 12 Feb 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-18-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #53 - February</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-53/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Be sure to read Max Rydahl Andersen&amp;#8217;s blog post that introduces the Model Context Protocol servers project which provides a set of MCP servers implemented using Quarkus and Java. Starting with JDBC, filesystem and JavaFX. Don&amp;#8217;t miss transcript of Holly&amp;#8217;s QCon talk &quot;Zero Waste, Radical Magic, and Italian Graft – Quarkus Efficiency Secrets&quot;, where she discusses some of the technical underpinnings of Quarkus’s efficiency, providing advice for those using or considering Quarkus. Clement Escoffier also has a great blog post that discusses the new predictable cadence for LTS micro-releases. &quot;Quarkus Redis: Monitoring Pool Size for Backpressure&quot; by 0x2e Tech provides a comprehensive approach for a robust solution for monitoring and managing your Redis connection pool in a Quarkus application. Delve into understanding how to debug Quarkus apps and effectively troubleshoot issues in your Quarkus applications with &quot;Debug Quarkus Apps Example&quot; by Yatin Batra. Learn how the Couchbase Quarkus SDK 1.0 is now in General Availability and production-ready with seamless integration, GraalVM native image support, and enhanced developer productivity in the article by Emilien Bevierre and Vishal Dhiman.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/53/&quot;&gt;Newsletter #53: February&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-53/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.18.2 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-18-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.18.2, the first (we skipped 3.18.0) maintenance release for our 3.18 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have bugs lurking around, please report them as we aim at stabilizing everything before the next LTS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.18, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.18.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.18&quot;&gt;Quarkus 3.18 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.18.2&quot;&gt;3.18.2&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-18-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.18 - Micrometer for WebSockets Next, Security WebAuthn based on WebAuthn4J, Kubernetes Client 7...</title>
            <link>
                https://quarkus.io/blog/quarkus-3-18-1-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.18, with two months worth of new features and enhancements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It comes with a lot of enhancements and the following new features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44379&quot;&gt;#44379&lt;/a&gt; - Integrate Micrometer with WebSockets Next&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44105&quot;&gt;#44105&lt;/a&gt; - Reimplement security-webauthn on top of webauthn4j&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45131&quot;&gt;#45131&lt;/a&gt; - OIDC and OIDC Client: Support JWT bearer client authentication using client assertion loaded from filesystem&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45121&quot;&gt;#45121&lt;/a&gt; - Support for OIDC mTLS binding&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44993&quot;&gt;#44993&lt;/a&gt; - Support OidcProviderClient injection and token revocation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44546&quot;&gt;#44546&lt;/a&gt; - Add OIDC Redis Token State Manager extension&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45294&quot;&gt;#45294&lt;/a&gt; - Allow to create static OIDC tenants programmatically&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/35324&quot;&gt;#35324&lt;/a&gt; - OIDC Dev Services and UI changes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45117&quot;&gt;#45117&lt;/a&gt; - TLS - Enable policy configuration for expired or not yet valid certificates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44549&quot;&gt;#44549&lt;/a&gt; - Add support for encrypted PKCS#8&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/43885&quot;&gt;#43885&lt;/a&gt; - Exclude uri from OpenTelemetry Tracing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45259&quot;&gt;#45259&lt;/a&gt; - Bump kubernetes-client-bom from 6.13.4 to 7.0.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/32447&quot;&gt;#32447&lt;/a&gt; - Introduce &lt;code&gt;Report an Issue&lt;/code&gt;  menu in DevUI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/43618&quot;&gt;#43618&lt;/a&gt; - Add a Dev UI screen for Agroal datasources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44305&quot;&gt;#44305&lt;/a&gt; - Ability to configure extension dev mode JVM options&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44424&quot;&gt;#44424&lt;/a&gt; - Support for dev-mode-only conditional dependencies&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are already hard at work preparing 3.19 and the upcoming 3.20 LTS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.18, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.18.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.18&quot;&gt;Quarkus 3.18 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;websockets-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#websockets-next&quot;&gt;&lt;/a&gt;WebSockets.Next&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our next-generation WebSockets extension continues to improve with each version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 3.18, it comes with Micrometer integration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;security&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#security&quot;&gt;&lt;/a&gt;Security&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You are used to it, each version comes with a lot of enhancements to our security layer, offering even more flexibility.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time, it comes with the complete rewrite of our Security Webauthn extension to leverage the WebAuthn4J library (if you are using this extension, please have a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.18#webauthn&quot;&gt;dedicated section in the migration guide&lt;/a&gt; as a lot of things have changed), a lot of new features for OIDC, and improvements to our TLS registry:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44105&quot;&gt;#44105&lt;/a&gt; - Reimplement security-webauthn on top of webauthn4j&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45131&quot;&gt;#45131&lt;/a&gt; - OIDC and OIDC Client: Support JWT bearer client authentication using client assertion loaded from filesystem&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45121&quot;&gt;#45121&lt;/a&gt; - Support for OIDC mTLS binding&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44993&quot;&gt;#44993&lt;/a&gt; - Support OidcProviderClient injection and token revocation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44546&quot;&gt;#44546&lt;/a&gt; - Add OIDC Redis Token State Manager extension&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45294&quot;&gt;#45294&lt;/a&gt; - Allow to create static OIDC tenants programmatically&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/35324&quot;&gt;#35324&lt;/a&gt; - OIDC Dev Services and UI changes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45117&quot;&gt;#45117&lt;/a&gt; - TLS - Enable policy configuration for expired or not yet valid certificates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44549&quot;&gt;#44549&lt;/a&gt; - Add support for encrypted PKCS#8&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;opentelemetry-tracing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#opentelemetry-tracing&quot;&gt;&lt;/a&gt;OpenTelemetry Tracing&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When using OpenTelemetry Tracing, it happens quite often that you don&amp;#8217;t want to collect any trace for a given URI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;3.18 comes with the &lt;code&gt;quarkus.otel.traces.suppress-application-uris&lt;/code&gt; that allows to define URIs that are going to be ignored.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find more information about this new feature in the &lt;a href=&quot;https://quarkus.io/guides/opentelemetry-tracing#disabling-traces-for-app-endpoints&quot;&gt;OpenTelemetry Tracing guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;kubernetes-client&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kubernetes-client&quot;&gt;&lt;/a&gt;Kubernetes Client&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Kubernetes Client was upgraded to a major new version: Kubernetes Client 7.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find more information about this upgrade in our &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.18#kubernetes-client-fabric8&quot;&gt;migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dev-ui&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dev-ui&quot;&gt;&lt;/a&gt;Dev UI&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We polished our Dev UI with two new features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A screen to browse the tables exposes by your datasources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A quick link to report an issue to the Quarkus project on GitHub&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;preparing-our-next-lts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#preparing-our-next-lts&quot;&gt;&lt;/a&gt;Preparing our next LTS&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are also preparing our next LTS with various initiatives:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A lot of extensions were migrated to the new &lt;code&gt;@ConfigMapping&lt;/code&gt;-based configuration infrastructure (and this effort will continue in the next versions).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We are making enhancements related to startup time and initial memory (RSS) usage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We are removing code that was deprecated for a long time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Expect us to focus on polishing features and fixing issues for the upcoming 3.19 and 3.20.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-cxf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-cxf&quot;&gt;&lt;/a&gt;Quarkus CXF&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus CXF 3.18 was released and is now available in &lt;a href=&quot;https://code.quarkus.io/?extension-search=origin:platform%20quarkus-cxf&quot;&gt;Quarkus Platform 3.18&lt;/a&gt;.
Check the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.18.0.html&quot;&gt;Quarkus CXF 3.18.0&lt;/a&gt; release notes for more information about what is new in this release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been upgraded to 3.18.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.18.0.CR1&quot;&gt;3.18.0.CR1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.18.0&quot;&gt;3.18.0&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.18.1&quot;&gt;3.18.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1048 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.18 release, thanks to Akulov S V, Ales Justin, Alex Martel, Alexander Pankin, Alexey Loubyansky, André Pantaleão, Andy Damevin, Ankush Saini, Antonio Musarra, Auri Munoz, Bassel Rachid, Blaz Mrak, Bruno Baptista, Bruno Marvin, Chris Laprun, Christian Ivanov, Christian Pieczewski, Clement Escoffier, Cristian Burlacu, Damien Clément d&amp;#8217;Huart, Daniel Bobbert, Daniel Strobusch, Danilo Piazzalunga, David M. Lloyd, Davide D&amp;#8217;Alto, Eduard Wagner, Emmanuel Ferdman, Eric Deandrea, Erik Mattheis, Fary Hurtado, Foivos Zakkak, Francesco Nigro, George Gastaldi, Georgios Andrianakis, Gianmarco Frangipane, Guillaume Smet, Gurubase.io, Harald Albers, HerrDerb, Holly Cummins, Inaki Villar, Ioannis Canellos, ivan.baricic, Jakub Jedlicka, Jan Martiska, Jeremie Bresson, Jochen Schalanda, Johnathan Gilday, Jorge Pinto, Jose, Julien Ponge, Katia Aresti, Ladislav Thon, Lars Andringa, Loïc Mathieu, luneo7, Maciej Lisowski, Marc Nuri, Marco Belladelli, Marco Bungart, Marco Collovati, Marek Skacelik, mariofusco, Martin Bartoš, Martin Kouba, Martin Panzer, Matej Novotny, Matheus Cruz, Max Rydahl Andersen, Michael Edgar, Michal Maléř, Michal Vavřík, Neon, Nuno Neto, ogomezdi, Ozan Gunalp, Ozzy Osborne, Peter Skopek, Phillip Krüger, rghara, Roberto Balarezo, Roberto Cortez, Rolfe Dlugy-Hegwer, Romain QUINIO, Rostislav Svoboda, row, Scott M Stark, Sergey Beryozkin, sergioruydev, Sola-ris, Stephan Strate, Stuart Douglas, Stéphane Épardaud, Thibault Meyer, Thomas Canava, tom, Trấn Nguyễn, vkn, xstefank, Yoann Rodière, Yoshikazu Nojima, zanmagerl, and Zheng Feng.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 29 Jan 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-18-1-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Introducing Model Context Protocol servers project</title>
            <link>
                https://quarkus.io/blog/introducing-mcp-servers/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, I&amp;#8217;m excited to introduce the Model Context Protocol (MCP) servers project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Model Context Protocol is the recent approach to enable AI models to interact with your applications and services in a nice decoupled way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-servers&quot;&gt;mcp-servers&lt;/a&gt; project is as far as I know the first one to provide a set of MCP servers implemented using Java and at least uniquely Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Intended to show-case the capabilities of the Model Context Protocol, and inspiration for what you can do with it - especially in Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-servers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-servers&quot;&gt;&lt;/a&gt;The Servers&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At time of writing there are three servers implemented:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;JDBC&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Let your AI app introspect and interact to any JDBC-compatible database, let it be PostgreSQL, MySQL, MariaDB, SQLite, Oracle, etc. &lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://github.com/quarkiverse/quarkus-mcp-servers/raw/main/jdbc/images/jdbc-trends-demo.png&quot; alt=&quot;JDBC server&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Filesystem&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Access the file system of your machine, let it be your home directory, your code directory, your project directory, etc. &lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://github.com/quarkiverse/quarkus-mcp-servers/raw/main/filesystem/images/filesystem-demo.png&quot; alt=&quot;Filesystem server&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;JavaFX&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Draw on a JavaFX canvas, get your AI to draw some art for you! Based on idea from &lt;a href=&quot;https://gist.github.com/konczdev/5e6774d2d8640bf83baab88cb068bcc2&quot;&gt;@konczdev&lt;/a&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://github.com/quarkiverse/quarkus-mcp-servers/raw/main/jfx/images/jfx-demo.png&quot; alt=&quot;JavaFX server&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each server is implemented using Quarkus and Java, and each server is available to easily run using JBang. No need for user to install Java, Quarkus or any other Java tool.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-to-use-the-servers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-to-use-the-servers&quot;&gt;&lt;/a&gt;How to use the servers&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The general setup is to install &lt;a href=&quot;https://jbang.dev/download/&quot;&gt;JBang&lt;/a&gt;, preferably using a package manager as then desktop apps are more likely to find &lt;code&gt;jbang&lt;/code&gt; in the PATH.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then in your MCP client configure it with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;jbang [server-name]@quarkiverse/quarkus-mcp-servers [arguments]&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example to run the JDBC server to connect to a MariaDB database you would do:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;jbang jdbc@quarkiverse/quarkus-mcp-servers jdbc:mariadb://localhost:3306/test --user root --password mysecretpassword&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or use a downlodable SQLite database of Netflix movies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;jbang jdbc@quarkiverse/quarkus-mcp-servers jdbc:sqlite:%{https://github.com/lerocha/netflixdb/releases/download/v1.0.0/netflixdb.sqlite}&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Tthe &lt;code&gt;%{}&lt;/code&gt; syntax is a JBang feature to download a file from a URL in the command line and use it as a local file.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similar there is &lt;code&gt;jbang jfx@quarkiverse/quarkus-mcp-servers&lt;/code&gt; to draw on a JavaFX canvas, and &lt;code&gt;jbang filesystem@quarkiverse/quarkus-mcp-servers [path]&lt;/code&gt; to access the file system.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tested-mcp-clients&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tested-mcp-clients&quot;&gt;&lt;/a&gt;Tested MCP Clients&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During development we tested the servers with the following clients:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://claude.ai/download&quot;&gt;Claude Desktop&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chrishayuk/mcp-cli&quot;&gt;mcp-cli&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://block.github.io/goose/docs/quickstart/&quot;&gt;Goose&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are more MCP clients out there, and we&amp;#8217;re sure that the servers will work with many more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Goose is noteworthy given it is opensource and available both as a desktop app (on MacOS) and as a cli tool. It was &lt;a href=&quot;https://block.github.io/goose/docs/quickstart/&quot;&gt;recently announced&lt;/a&gt; with full support for the Model Context Protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here I configured Goose to use the SQLLite database from the Northwind sample database with this setup stored in &lt;code&gt;~/.config/goose/config.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-yaml hljs&quot; data-lang=&quot;yaml&quot;&gt;extensions:
  netflixdb:
  args:
    - jdbc@quarkiverse/quarkus-mcp-servers
    - jdbc:sqlite:%{https://github.com/lerocha/netflixdb/releases/download/v1.0.0/netflixdb.sqlite}
    cmd: jbang
    enabled: true
    envs: {}
    name: netflixdb
    type: stdio&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note: we do recommend to use &lt;code&gt;goose config&lt;/code&gt; to generate/edit the config file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the above config Goose will be able to use the JDBC server to connect to the SQLLite database:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/mcpservers/mcp-jdbc-goose.png&quot; alt=&quot;Goose using the JDBC server to connect to the SQLLite database&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;unique-features-for-quarkus-mcp-servers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#unique-features-for-quarkus-mcp-servers&quot;&gt;&lt;/a&gt;Unique features for Quarkus MCP Servers&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All that is great, but why use Quarkus for implementing the MCP servers?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First is that the programming model provided by Quarkus is very powerful, allowing you to easily focus on the business logic of your application. See &lt;a href=&quot;https://quarkus.io/blog/mcp-server/&quot;&gt;previous blog&lt;/a&gt; for details on how to implement a server or look at the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-servers/blob/main/jdbc/src/main/java/io/quarkus/mcp/servers/jdbc/MCPServerJDBC.java&quot;&gt;code of the JDBC servers&lt;/a&gt;. Notice how compact it is!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Second, is the vast Java ecosystem provides things like JDBC drivers which enables us to make a single server that works with any JDBC-compatible database. We use &lt;code&gt;jbang&lt;/code&gt; to dynamically download &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-servers/blob/main/jdbc/.scripts/mcpjdbc.java&quot;&gt;the right JDBC driver&lt;/a&gt; and then launch the quarkus mcp server. Similar is done for &lt;code&gt;jfx&lt;/code&gt; to &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-servers/blob/main/jbang-catalog.json#L34&quot;&gt;fetch&lt;/a&gt; the right OS specific JavaFX dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thirdly, ability to run the servers as a native executable. In the MCP servers project the &lt;code&gt;filesystem&lt;/code&gt; server is &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-servers/releases&quot;&gt;published as a native executable&lt;/a&gt; you can download and gain a much faster startup time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is also a lot of interesting things to come around how to use quarkus dev mode with MCP servers and testing - but that will be for another blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jbang-required-or-not&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jbang-required-or-not&quot;&gt;&lt;/a&gt;JBang required or not ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JBang is in general not required to run an MCP server, but it makes it much easier and makes it possible for anyone, especially non-Java developers to use these servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can of course run a simple MCP servers as a normal Java application, but then you need to install right version of Java, download the server and their dependencies and run it like &lt;code&gt;java -jar [path to server jar]&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the MCP servers project we have chosen to use JBang as we go beyond and utiize JBang to dynamically fetch drivers and OS specific deps. Without JBang that would be much harder, if not impossible to make consumable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sky-is-the-limit&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sky-is-the-limit&quot;&gt;&lt;/a&gt;Sky is the limit!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Model Context Protocol opens up exciting possibilities for building intelligent applications using your application data with your favourite programming language and framework. With Quarkus MCP Servers, you have a powerful foundation to create your own Java based servers that can bridge AI with any data source or system you can imagine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whether you want to connect to your favorite database, integrate with your company&amp;#8217;s internal systems, or build something completely new - the sky truly is the limit! The simplicity of implementing MCP servers with Quarkus means you can focus on the creative aspects rather than the plumbing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;d love to see what you build! Leave a comment or consider contributing your MCP servers back to the community through the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-servers&quot;&gt;Quarkiverse MCP Servers project&lt;/a&gt;. Your implementation could help others solve similar problems or inspire them to create something even more amazing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So what are you waiting for? Grab the code, fire up your IDE, and start building your own MCP server today. The future of AI-powered applications is here, and you can be part of shaping it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Have Fun!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;p.s. Next week on Thursday February 6th we&amp;#8217;re hosting a &lt;a href=&quot;https://quarkus.io/insights/&quot;&gt;MCP server Insights&lt;/a&gt; where we will discuss the MCP server and client SDK&amp;#8217;s in Quarkus project and how you can use it to build your own MCP servers and extend your AI infused applications.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 29 Jan 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/introducing-mcp-servers/
            </guid>
            
            
            
            <author>Max Rydahl Andersen (https://twitter.com/maxandersen)</author>
            
        </item>
        
        <item>
            <title>Quarkus LTS - New Release Cadence Explained</title>
            <link>
                https://quarkus.io/blog/lts-cadence/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus releases an &lt;a href=&quot;https://quarkus.io/blog/lts-releases/&quot;&gt;LTS&lt;/a&gt; (Long-Term Support) version every six months.
LTS is designed for users who prioritize stability over new features.
These versions are maintained for one year and receive critical bug and CVE fixes.
An overlap period allows a smooth upgrade to the next LTS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Until now, LTS micro-releases (e.g., 3.8.1, and 3.8.2) have occurred regularly but without a predictable schedule.
&lt;strong&gt;We’re changing this.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt;
LTS releases will follow a predictable cadence, with micro-releases every two months.
The &lt;a href=&quot;#new-cadence&quot;&gt;A New Cadence for LTS Micro-Releases&lt;/a&gt; section provides more details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;releases-releases-and-more-releases&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#releases-releases-and-more-releases&quot;&gt;&lt;/a&gt;Releases, Releases, and More Releases&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since its inception, Quarkus has followed a fast-paced release cycle:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Minor releases:&lt;/em&gt; Once per month (e.g., 3.16, 3.17).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Micro-releases:&lt;/em&gt; Weekly (e.g., 3.17.1, 3.17.2).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The development process revolves around the main branch, which serves as the cutting edge of Quarkus development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s how the regular release process works:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Minor releases (3.y)&lt;/em&gt;: A new branch is created from &lt;em&gt;main&lt;/em&gt;, capturing all the changes from development up to that point.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Micro-releases (3.y.z)&lt;/em&gt;: These only include bug fixes and CVE remediations, backported from &lt;em&gt;main&lt;/em&gt; to the minor release branch.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/lts-cadence/regular-release-cadence.png&quot; alt=&quot;regular release cadence&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-lts-releases-differ&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-lts-releases-differ&quot;&gt;&lt;/a&gt;How LTS Releases Differ&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;LTS releases prioritize stability over the latest features, and the process reflects this.
Let’s look at the example of 3.19 (a minor release) and 3.20 (the next LTS):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;A new branch for 3.19 is created from main, containing the latest development at that time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bug fixes and CVE remediations are backported to the 3.19 branch for its micro-releases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When preparing the LTS release (3.20), the branch is not created from main.
Instead, it is created from the 3.19 branch, ensuring no new features from main are included.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This approach improves the reliability of LTS releases by excluding potentially unstable or unproven changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/lts-cadence/lts-release-principle.png&quot; alt=&quot;lts release principle&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we had this initial release, we did not have clear rules about the new micro releases of the LTS (3.20.1, 3.20.2…).
So, while we have a predictable release calendar for the regular micro and minor releases, LTS micro releases were irregular.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-cadence&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-cadence&quot;&gt;&lt;/a&gt;A New Cadence for LTS Micro-Releases&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting with 3.15 LTS, we’re introducing a predictable cadence for LTS micro-releases:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A new LTS version will be released every six months.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For each LTS, micro-releases will occur every two months (e.g., 3.20.1, 3.20.2).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/lts-cadence/new-lts-cadence.png&quot; alt=&quot;new lts cadence&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-included-in-an-lts-micro-release&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-included-in-an-lts-micro-release&quot;&gt;&lt;/a&gt;What’s Included in an LTS Micro-Release?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;LTS micro-releases are strictly limited to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Bug fixes considered low-risk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CVE fixes (moderate and critical).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dependency updates for CVE remediation or critical bug fixes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Nothing else.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;emergency-exceptions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#emergency-exceptions&quot;&gt;&lt;/a&gt;Emergency Exceptions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the event of a critical CVE (because we know it will happen), we’ll release an emergency micro-release outside the two-month cadence.
These releases may follow a separate versioning scheme (e.g., 3.20.0.1) to indicate their exceptional nature (still under discussion).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-if&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-if&quot;&gt;&lt;/a&gt;What if?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;What if I want a feature in the next LTS?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To be included, the feature must be merged into main at least one month before the LTS branch is created.
Don’t play with the clock - having a feature merged can take time, and the CI tends to be busy just before releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;What if I want a feature to be added to an existing LTS?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;No.&lt;/strong&gt; New features are only included in future LTS versions.
For immediate access, consider using regular (non-LTS) releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;What if a bug fix is needed in the next LTS micro-release?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re happy to consider backporting bug fixes, provided they are low-risk.
Risky fixes will require further discussion and may not be included.
We will particularly consider bugs impacting features from previous LTS releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;What if I want to know what’s included in the next LTS micro-release?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re establishing an LTS working group to improve transparency and track backports.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;What if a moderate CVE is reported against an LTS?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next LTS micro will include moderate CVE fixes every two months.
Exceptional releases are only for important (where there is no mitigation) and critical CVEs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;How will the Quarkus Platform align with this cadence?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus Platform will follow the same release schedule.
If you are a platform member,  we recommend subscribing to this coordination group if you have not already done so.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;two-line-summary&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#two-line-summary&quot;&gt;&lt;/a&gt;Two-Line Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For regular users: Monthly minor and weekly micro-releases continue as before.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For LTS users: Expect LTS versions every 6 months, with micro releases every 2 months.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next LTS will be &lt;a href=&quot;https://quarkus.io/blog/next-lts-3-20/&quot;&gt;3.20&lt;/a&gt;.
The dates and schedule are communicated on the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Release-Planning&quot;&gt;Release Planning Wiki Page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/lts-cadence/
            </guid>
            
            
            
            <author>Clement Escoffier (https://twitter.com/clementplop)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.17.8 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-17-8-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.17.8, the last maintenance release for our 3.17 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;3.18 will be released next week.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.17, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.17.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.17&quot;&gt;Quarkus 3.17 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.17.8&quot;&gt;3.17.8&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-17-8-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.15.3 released - LTS maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-15-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.15.3, our second (we skipped 3.15.0) maintenance release for the 3.15 LTS stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.15.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.15, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update --stream=3.15&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.15.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.15.3&quot;&gt;the full changelog of 3.15.3 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 21 Jan 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-15-3-released/
            </guid>
            
            
            
            <author>Jan Martiška (https://twitter.com/janmartiska)</author>
            
        </item>
        
    </channel>
</rss>
