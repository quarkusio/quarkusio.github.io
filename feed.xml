<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

    <channel>
        <title>Quarkus</title>
        <link>https://quarkus.io</link>
        <description>Quarkus: Supersonic Subatomic Java</description>
        <lastBuildDate>Thu, 09 Oct 2025 16:29:07 +0000</lastBuildDate>
        
        
        <item>
            <title>Mandrel 25 is Here!</title>
            <link>
                https://quarkus.io/blog/mandrel-25-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are thrilled to announce the official release of Mandrel 25! The beginning
of the next LTS version of the Quarkus native builder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mandrel 25 is a downstream distribution of the
&lt;a href=&quot;https://www.graalvm.org/release-notes/JDK_25&quot;&gt;GraalVM 25&lt;/a&gt; Community Edition.
Mandrel&amp;#8217;s main goal is to provide a native-image release specifically tailored
to support &lt;a href=&quot;https://quarkus.io&quot;&gt;Quarkus&lt;/a&gt;.  The aim is to align the native-image
capabilities from GraalVM with OpenJDK and Red Hat Enterprise Linux libraries
to improve maintainability for native Quarkus applications. As such, Mandrel 25
is the same as GraalVM 25 native-image with some small differences. It&amp;#8217;s built
from the same code-base!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-is-new-25&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-is-new-25&quot;&gt;&lt;/a&gt;What&amp;#8217;s New in GraalVM 25?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While there are too many new features added in GraalVM 25 to name them all it&amp;#8217;s
worth highlighting a few. GraalVM 25 includes enhanced support for Foreign
Function and Memory API in native-image. It enables FFM API support for MacOSX
Aarch64 and Linux Aarch64 (in addition to Linux x86_64). GraalVM 25 also
enhances metadata support in native-image. It now throws subclasses of
LinkageError when missing metadata is being detected at native image runtime.
This way it enables users to handle missing metadata registrations in a more
efficient way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;based-on-openjdk-25&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#based-on-openjdk-25&quot;&gt;&lt;/a&gt;Mandrel 25 is Based on OpenJDK 25&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mandrel 25 is based on the new vanilla Eclipse Temurin 25 LTS release. Temurin
is an OpenJDK distribution produced at Eclipse. Based on the next LTS release
of OpenJDK, Mandrel 25 will be the next LTS version supporting Quarkus&apos; native
compilation capabilities for the Quarkus releases to come.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;new-monitoring-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-monitoring-features&quot;&gt;&lt;/a&gt;New Monitoring Features&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;GraalVM 25 also introduces several new features in the monitoring area of
native-image that have been contributed by Red Hat/IBM. Some highlights in JDK
Flight Recorder support (&lt;a href=&quot;https://www.graalvm.org/jdk25/reference-manual/native-image/debugging-and-diagnostics/JFR/&quot;&gt;JFR&lt;/a&gt;), and &lt;a href=&quot;https://www.graalvm.org/jdk25/reference-manual/native-image/debugging-and-diagnostics/NMT/&quot;&gt;native memory tracking&lt;/a&gt; (NMT) are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JCMD support:&lt;/strong&gt; GraalVM 25 adds support for the &lt;a href=&quot;https://www.graalvm.org/jdk25/reference-manual/native-image/debugging-and-diagnostics/jcmd/&quot;&gt;Java Diagnostic Command&lt;/a&gt;
  (JCMD) to native-image. This is useful to asynchronously request specific
actions on the running native image. For example a thread dump or a JFR
recording can be requested after the application has been started.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Added support for more JFR events:&lt;/strong&gt; Additional JFR events have been added,
  specifically tracking native memory when monitoring option NMT is enabled as
well. Object allocation sampling with the jdk.ObjectAllocationSample event is
now also supported. For a list of all supported JFR events see the &lt;a href=&quot;https://www.graalvm.org/jdk25/reference-manual/native-image/debugging-and-diagnostics/JFR/#built-in-events&quot;&gt;upstream
documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Native Memory Tracking:&lt;/strong&gt; A new monitoring option for &lt;a href=&quot;https://www.graalvm.org/jdk25/reference-manual/native-image/debugging-and-diagnostics/NMT/&quot;&gt;tracking native
  memory&lt;/a&gt;, NMT, has been added to native-image. This is useful to diagnose
memory leaks.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;getting-started-25&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#getting-started-25&quot;&gt;&lt;/a&gt;Get Started with Mandrel 25 Today!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ready to experience the power of Mandrel 25?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Download Mandrel 25:&lt;/strong&gt; You can download the latest version from the &lt;a href=&quot;https://github.com/graalvm/mandrel/releases/tag/mandrel-25.0.0.1-Final&quot;&gt;Mandrel
release page&lt;/a&gt; on Github or install it using &lt;a href=&quot;https://sdkman.io/&quot;&gt;sdkman&lt;/a&gt; by running:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;sdk install java 25.0.0.1.r25-mandrel&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Builder Image with Quarkus:&lt;/strong&gt; Alternatively start using the Mandrel 25
  builder image for your quarkus application by specifying
&lt;code&gt;-Dquarkus.native.builder-image=quay.io/quarkus/ubi9-quarkus-mandrel-builder-image:jdk-25&lt;/code&gt;
to your maven build.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;quarkus-compatibility-mandrel-25&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-compatibility-mandrel-25&quot;&gt;&lt;/a&gt;Quarkus Compatibility&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s recommended to use at least Quarkus release 3.27.0 when using the Mandrel 25
native builder. For older versions of Quarkus use the Mandrel 23.1 native
builder.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;graalvm-community-gratitude&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#graalvm-community-gratitude&quot;&gt;&lt;/a&gt;Shout Out to GraalVM Community&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are very grateful for the immense support from the upstream GraalVM
community, especially the Oracle GraalVM team for stewarding and sponsoring the
development of GraalVM as well as for accepting Mandrel under the GraalVM
organization. Onward to more collaboration with the community as the next
version of GraalVM unfolds!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are incredibly excited about Mandrel 25 and will be making it the default
native image generator in an upcoming Quarkus release. In the meantime, do let
us know your experience of using Mandrel 25 with Quarkus!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can share your feedback with us in Quarkus&apos; &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip chat workspace&lt;/a&gt; or on &lt;a href=&quot;https://github.com/quarkusio/quarkus/&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 02 Oct 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/mandrel-25-released/
            </guid>
            
            
            
            <author>Severin Gehwolf</author>
            
        </item>
        
        <item>
            <title>Use Quarkus OIDC Proxy to encrypt Quarkus MCP Server tokens</title>
            <link>
                https://quarkus.io/blog/secure-mcp-oidc-proxy/
            </link>
            <description>
                &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-server-oauth2/&quot;&gt;Use MCP OAuth2 Flow to access Quarkus MCP Server&lt;/a&gt; blog post, we explained how an MCP Client such as &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; could use the OAuth2 Flow with a pre-registered OAuth2 Client application to discover the MCP server&amp;#8217;s &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9728&quot;&gt;OAuth2 Protected Resource Metadata&lt;/a&gt;, the metadata of the authorization server, login a user and acquire an access token that it could use to access MCP Server provided tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, we will look at how &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; can register OAuth2 Client applications dynamically, instead of using a pre-registered OAuth2 Client, but also, use &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; to delegate to &lt;a href=&quot;https://www.keycloak.org/&quot;&gt;Keycloak&lt;/a&gt; during the MCP OAuth2 flow, &lt;a href=&quot;#point-of-using-oidc-proxy&quot;&gt;analyze why it can be useful&lt;/a&gt; and show how it can &lt;a href=&quot;#use-oidc-proxy-to-encrypt-tokens&quot;&gt;encrypt access and refresh tokens and exclude ID tokens&lt;/a&gt;, before they are made available to &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;demo-flow-diagram&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#demo-flow-diagram&quot;&gt;&lt;/a&gt;Demo MCP OAuth2 Flow Diagram&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-server-oauth2/&quot;&gt;Use MCP OAuth2 Flow to access Quarkus MCP Server&lt;/a&gt; blog post, we looked at how &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; could use OAuth 2.0 Flow with a &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-server-oauth2/#demo-flow-diagram&quot;&gt;pre-registered OAuth2 client&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The demo flow diagram in this section is very similar to the one from the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-server-oauth2/#demo-flow-diagram&quot;&gt;Use MCP OAuth2 Flow to access Quarkus MCP Server&lt;/a&gt; blog post. It shows how &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; can use &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7591&quot;&gt;OAuth2 Dynamic Client Registration&lt;/a&gt; instead of requiring that an OAuth2 Client is pre-registered, and with the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; interposing between MCP Client and Keycloak.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/demo_flow_diagram.png&quot; alt=&quot;Demo Flow Diagram&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7591&quot;&gt;OAuth2 Dynamic Client Registration&lt;/a&gt; is used, MCP Client such as &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; requires configuring an MCP &lt;em&gt;Streamable HTTP&lt;/em&gt; endpoint URL only.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MCP Client starts by accessing the MCP server without a token and gets back HTTP 401 with a &lt;code&gt;WWW-Authenticate&lt;/code&gt; &lt;code&gt;resource_metadata&lt;/code&gt; parameter that links to the MCP server&amp;#8217;s &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9728&quot;&gt;OAuth2 Protected Resource Metadata&lt;/a&gt; route. The client now fetches a URL of the authorization server that secures the MCP server as well as the MCP server&amp;#8217;s resource identifier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; is used, MCP Client does not see a Keycloak URL as the authorization server URL but &lt;code&gt;&lt;a href=&quot;http://localhost:8080/q/oidc&quot; class=&quot;bare&quot;&gt;http://localhost:8080/q/oidc&lt;/a&gt;&lt;/code&gt; URL pointing to a default &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt;&apos;s base URL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, MCP Client uses the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt;&apos;s URL to discover its authorization, token, client registration and other endpoint URLs. &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; provides its metadata by discovering Keycloak&amp;#8217;s metadata and replacing Keycloak-specific URLs with its own proxy-managed URLs, but does not transform other Keycloak metadata such as supported &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7636&quot;&gt;Proof Key for Code Exchange&lt;/a&gt; (PKCE) methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The user is now redirected to &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; which in turn redirects the user to Keycloak to login.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the user logs in and authorizes MCP Inspector to access Quarkus MCP server, the user is redirected back to the &lt;code&gt;&lt;a href=&quot;http://localhost:6274/oauth/callback&quot; class=&quot;bare&quot;&gt;http://localhost:6274/oauth/callback&lt;/a&gt;&lt;/code&gt; endpoint, MCP client exchanges the returned &lt;code&gt;code&lt;/code&gt; to get ID, access and refresh tokens, and uses the access token to access the MCP server, allowing the user to select and run the tool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are now ready to have a deeper look at how it works in the demo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find the complete project source in the &lt;a href=&quot;https://github.com/sberyozkin/quarkus-mcp-server-oidc-proxy/tree/main/secure-mcp-http-server-with-oidc-proxy&quot;&gt;Secure Quarkus MCP HTTP Server with OIDC Proxy sample&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-mcp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-mcp-server&quot;&gt;&lt;/a&gt;Step 1 - Create and start MCP server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let&amp;#8217;s create a secure Quarkus MCP server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-dependencies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-dependencies&quot;&gt;&lt;/a&gt;MCP server maven dependencies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the following dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.mcp&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-mcp-server-sse&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &amp;lt;version&amp;gt;1.6.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-oidc&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.oidc-proxy&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-oidc-proxy&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-mcp-server-sse&lt;/code&gt; is required to support both MCP Streamable HTTP and SSE transports.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-oidc&lt;/code&gt; is required to secure access to Quarkus MCP Server. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-oidc-proxy&lt;/code&gt; is required to support OIDC proxy between MCP Client and Keycloak&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-configuration&quot;&gt;&lt;/a&gt;MCP Server Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s configure the MCP server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;# Require an authenticated access to the MCP server

quarkus.http.auth.permission.authenticated.paths=/mcp/* &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
quarkus.http.auth.permission.authenticated.policy=authenticated

# Default OIDC tenant that secures the MCP server &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
# Its required `quarkus.oidc.auth-server-url` property is set by Keycloak Dev Service
# and points to the Keycloak `quarkus-mcp-realm` realm endpoint

quarkus.oidc.token.audience=quarkus-mcp-server &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
quarkus.oidc.resource-metadata.enabled=true &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
quarkus.oidc.resource-metadata.authorization-server=http://localhost:8080/q/oidc &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
quarkus.oidc.resource-metadata.force-https-scheme=false

# Keycloak devservice that supports the default OIDC tenant.

quarkus.keycloak.devservices.realm-path=quarkus-mcp-realm.json &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
quarkus.keycloak.devservices.create-client=false &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;

# CORS configuration to allow MCP Inspector&apos;s SPA script calls

quarkus.http.cors.enabled=true
quarkus.http.cors.origins=http://localhost:6274 &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Require authentication for all requests to the MCP server. This authentication policy is enforced by the default OIDC tenant configuration.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Default OIDC tenant secures the MCP server, Keycloak DevService inserts a missing &lt;code&gt;quarkus.oidc.auth-server-url&lt;/code&gt; property that links to the Keycloak &lt;code&gt;quarkus-mcp-realm&lt;/code&gt; realm endpoint.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Require that tokens that are allowed to access the MCP server must have an audience (&lt;code&gt;aud&lt;/code&gt;) claim that contains a &lt;code&gt;quarkus-mcp-server&lt;/code&gt; value.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enable the &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9728&quot;&gt;OAuth2 Protected Resource Metadata&lt;/a&gt; route for the default OIDC tenant. It will help &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; to find out about the authorization server that secures the MCP server.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Quarkus &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9728&quot;&gt;OAuth2 Protected Resource Metadata&lt;/a&gt; handler is not aware that &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; is meant to intercept OAuth2 Flow requests between &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; and Keycloak, so we help it to return a correct URL by setting an absolute URL that points to the base &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; URL.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Ask Keycloak DevService to upload the &lt;code&gt;quarkus-mcp-realm.json&lt;/code&gt; realm file. This realm does not have pre-registered clients.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Ask Keycloak not to add &lt;code&gt;quarkus.oidc.client-id&lt;/code&gt; since &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; will register OAuth2 clients dynamically.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;CORS policy to allow &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; script requests.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can read about how &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9728&quot;&gt;OAuth2 Protected Resource Metadata&lt;/a&gt; is supported in Quarkus OIDC in the &lt;a href=&quot;https://quarkus.io/guides/security-oidc-expanded-configuration#resource-metadata-properties&quot;&gt;Expanded OpenId Connect Configuration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-tools&quot;&gt;&lt;/a&gt;MCP User Name Provider tool&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s create a single tool that can return a name of the current MCP Client user:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package org.acme;

import io.quarkiverse.mcp.server.TextContent;
import io.quarkiverse.mcp.server.Tool;
import io.quarkus.oidc.UserInfo;
import io.quarkus.security.identity.SecurityIdentity;
import jakarta.inject.Inject;

public class ServerFeatures {

    @Inject
    SecurityIdentity identity; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    @Tool(name = &quot;user-name-provider&quot;, description = &quot;Provides a name of the current user&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    TextContent provideUserName() {
        return new TextContent(identity.getPrincipal().getName());
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Capture a security identity represented by the verified access token&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;user-name-provider&lt;/code&gt; tool returns a name of the current MCP Client user.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;user-name-provider&lt;/code&gt; tool is a very simple tool designed to show that an identity of the MCP client user on whose behalf this tool is called by the MCP client is available for the tool to perform a user identity specific action, an important element for a secure agentic AI system.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;keycloak-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#keycloak-configuration&quot;&gt;&lt;/a&gt;Keycloak Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Keycloak configuration has already been prepared in the &lt;code&gt;quarkus-mcp-realm.json&lt;/code&gt; that Keycloak DevService uploads to Keycloak at the start-up time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s have a closer look. Please go to &lt;code&gt;&lt;a href=&quot;http://localhost:8080/q/dev-ui&quot; class=&quot;bare&quot;&gt;http://localhost:8080/q/dev-ui&lt;/a&gt;&lt;/code&gt; and select an &lt;code&gt;OpenId Connect&lt;/code&gt; card:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/devui_oidc_card.png&quot; alt=&quot;Keycloak Admin&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on &lt;code&gt;Keycloak Admin&lt;/code&gt;, login as &lt;code&gt;admin:admin&lt;/code&gt; and check the &lt;code&gt;quarkus-mcp-realm&lt;/code&gt; realm configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;quarkus-mcp-realm&lt;/code&gt; has only Keycloak specific clients registered that are required to support various Keycloak realm operations, it has no custom clients registered.
This realm has a single user, &lt;code&gt;alice&lt;/code&gt; with a password &lt;code&gt;alice&lt;/code&gt;.
It also has a custom &lt;code&gt;quarkus-mcp-server&lt;/code&gt; client scope with an audience mapping:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/quarkus_mcp_server_client_scope.png&quot; alt=&quot;Keycloak quarkus-mcp-server client scope&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;quarkus-mcp-server&lt;/code&gt; scope has an audience mapping:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/quarkus_mcp_server_audience.png&quot; alt=&quot;Keycloak quarkus-mcp-server audience mapping&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;quarkus-mcp-realm&lt;/code&gt; realm have the &lt;code&gt;quarkus-mcp-server&lt;/code&gt; client scope with the &lt;code&gt;quarkus-mcp-server&lt;/code&gt; audience mapping to let users specify the &lt;code&gt;quarkus-mcp-server&lt;/code&gt; scope in order to request the correct token audience when &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; initiates OAuth2 Flow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8707.html&quot;&gt;OAuth2 Resource Indicator&lt;/a&gt; specification provides an alternative option, where MCP Client can pass an MCP Server&amp;#8217;s &lt;code&gt;resource&lt;/code&gt; indicator to the OAuth2 provider and the provider can add it to the token audience. You can choose to avoid creating custom Keycloak client scopes with an audience mapping once Keycloak starts supporting the &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8707.html&quot;&gt;OAuth2 Resource Indicator&lt;/a&gt; specification.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;start-mcp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#start-mcp-server&quot;&gt;&lt;/a&gt;Start the MCP server in dev mode&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now let&amp;#8217;s start the MCP server in dev mode:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;mvn quarkus:dev&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/quarkus_mcp_server_dev_mode.png&quot; alt=&quot;MCP server dev mode&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see that default &lt;em&gt;Streamable HTTP&lt;/em&gt; and SSE endpoints are available at &lt;code&gt;&lt;a href=&quot;http://localhost:8080/mcp&quot; class=&quot;bare&quot;&gt;http://localhost:8080/mcp&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;http://localhost:8080/mcp/sse&quot; class=&quot;bare&quot;&gt;http://localhost:8080/mcp/sse&lt;/a&gt;&lt;/code&gt; respectively.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;start-mcp-inspector&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#start-mcp-inspector&quot;&gt;&lt;/a&gt;Step 2: Start the MCP Inspector&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;npx @modelcontextprotocol/inspector@0.16.7&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; provides a very good OAuth2 Flow support, it is still a very active project and at the moment, you may observe &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; failing to connect to the OAuth2 provider in some versions. &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; v0.16.7 is currently recommended.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/mcp_inspector_connect_view.png&quot; alt=&quot;MCP Inspector Connect&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, no pre-configured OAuth2 Client ID is set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, do not press &lt;code&gt;Connect&lt;/code&gt; immediately. We are going to follow the &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt;&apos;s &lt;code&gt;Guided OAuth Flow&lt;/code&gt; to &lt;a href=&quot;#use-mcp-inspector-to-access-mcp-server&quot;&gt;register an OAuth2 Client, login a user and acquire an access token&lt;/a&gt; instead, and request a &lt;code&gt;Connect&lt;/code&gt; once the &lt;code&gt;Guided OAuth Flow&lt;/code&gt; is complete.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will then have a look at how to &lt;a href=&quot;#use-oidc-proxy-to-encrypt-tokens&quot;&gt;Encrypt access and refresh tokens and drop ID token&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;#demo-flow-diagram&quot;&gt;Demo MCP OAuth2 Flow Diagram&lt;/a&gt; section for an overview of how &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; performs a &lt;code&gt;Connect&lt;/code&gt; request.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please keep your browser&amp;#8217;s &lt;code&gt;Developer Tools&amp;#8217;s `Network&lt;/code&gt; tab open if you would like to observe how MCP Inspector probes various MCP server and &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; endpoints and eventually succeeds in getting a user logged in and acquiring the access token.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-mcp-inspector-to-access-mcp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#use-mcp-inspector-to-access-mcp-server&quot;&gt;&lt;/a&gt;Step 3: Use MCP Inspector to register OAuth2 Client and access MCP Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are now going to use the &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt;&apos;s &lt;code&gt;Guided OAuth Flow&lt;/code&gt; to register an OAuth2 Client, login a user and acquire tokens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/mcp_inspector_oauth2_settings.png&quot; alt=&quot;MCP Inspector OAuth2 Settings&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on &lt;code&gt;Open Auth Settings&lt;/code&gt; which you can find opposite the Connection settings that you saw in the &lt;a href=&quot;#start-mcp-inspector&quot;&gt;Step 2: Start the MCP Inspector&lt;/a&gt; section, and click on the &lt;code&gt;Guided OAuth2 Flow&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/mcp_inspector_oauth2_flow_progress.png&quot; alt=&quot;MCP Inspector OAuth2 Settings Progress&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Guided OAuth2 Flow&lt;/code&gt; may not be highlighted after you select it but &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; will run it once you press &lt;code&gt;Continue&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Press &lt;code&gt;Continue&lt;/code&gt; to do the &lt;code&gt;Metadata Discovery&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/oauth2_metadata_discovered.png&quot; alt=&quot;OAuth2 Metadata Discovered&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; discovers the MCP Server&amp;#8217;s &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9728&quot;&gt;OAuth2 Protected Resource Metadata&lt;/a&gt; first, finds out the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;OIDC Proxy&lt;/a&gt;&apos;s URL, and uses it to fetch the the OIDC Proxy&amp;#8217;s metadata. As mentioned in the &lt;a href=&quot;#demo-flow-diagram&quot;&gt;Demo MCP OAuth2 Flow Diagram&lt;/a&gt; section, &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;OIDC Proxy&lt;/a&gt; provides its metadata by discovering Keycloak&amp;#8217;s metadata and replacing Keycloak-specific URLs with its own proxy-managed URLs, but does not transform other Keycloak metadata.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next step is the &lt;code&gt;Client Registration&lt;/code&gt;, press &lt;code&gt;Continue&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; posts a client registration request that you can see in the browser&amp;#8217;s developer tools:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/oauth2_client_registration_request.png&quot; alt=&quot;OAuth2 Client Registration Request&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the &lt;code&gt;token_endpoint_auth_method&lt;/code&gt; property is set to &lt;code&gt;none&lt;/code&gt; - this is how a &lt;code&gt;public&lt;/code&gt; OAuth2 Client is registered, since managing confidential OAuth2 Clients that have secrets is harder for Single-page application (SPA) such as &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Client Registration&lt;/code&gt; succeeds:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/oauth2_reg_client_response.png&quot; alt=&quot;OAuth2 Client Registration Response&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;client_id&lt;/code&gt; is a dynamically generated value. You will see a different &lt;code&gt;client_id&lt;/code&gt; when you work with this blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, we have to pause the &lt;code&gt;Guided OAuth2 Flow&lt;/code&gt; sequence, go to Keycloak and assign the &lt;code&gt;quarkus-mcp-server&lt;/code&gt; and &lt;code&gt;profile&lt;/code&gt; scopes to the registered client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The whole point of registering OAuth2 Clients dynamically is to avoid having to deal with manually configuring them.
However, as you could see in the Client Registration Request image above, &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; currently does not allow
to pass OAuth2 scopes during the OAuth2 Client Registration - irrespectively of whether you configure &lt;code&gt;Scope&lt;/code&gt; in its &lt;a href=&quot;#start-mcp-inspector&quot;&gt;Connection settings&lt;/a&gt; or not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The scopes impact what an issued access token can do, what kind of information it can include. The current OAuth2 Client application that logins the current user can request some scopes, for the user to authorize the client to use the access token according to permissions enabled by these scopes. Without requesting scopes during the OAuth2 Client Registration, Keycloak can only issue access tokens with a very limited content, with no audience and the logged-in user information included.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, to support this post&amp;#8217;s demo flow, we need to manually assign the required scopes to the registered client directly in the Keycloak Admin Dashboard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In general, the &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization&quot;&gt;MCP Authorization&lt;/a&gt;-compliant MCP Clients should be able to use custom OAuth2 scopes during the &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7591&quot;&gt;OAuth2 Dynamic Client Registration&lt;/a&gt; going forward.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OK, let&amp;#8217;s update the registered client in Keycloak.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Login to Keycloak as described in the &lt;a href=&quot;#keycloak-configuration&quot;&gt;Keycloak Configuration&lt;/a&gt; section, select the &lt;code&gt;quarkus-mcp-realm&lt;/code&gt; in &lt;code&gt;Manage Realms&lt;/code&gt; and the registered client in this realm&amp;#8217;s &lt;code&gt;Clients&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/keycloak_reg_client_dashboard.png&quot; alt=&quot;Keycloak Registered Client&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on its &lt;code&gt;Client Scopes&lt;/code&gt; tab, and add &lt;code&gt;profile&lt;/code&gt; and &lt;code&gt;quarkus-mcp-server&lt;/code&gt; scopes as &lt;code&gt;Default&lt;/code&gt; scopes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/add_scopes_to_registered_client.png&quot; alt=&quot;Add Scopes Registered Client&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Usually, these scopes should be optional for them to be requested at the authorization code flow login time, but in this case we set them as default scopes since the registered client is currently not aware of such scopes at the registration and login times due to the &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt;&apos;s limitation described above in this section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As far as these two scopes are concerned, the &lt;code&gt;quarkus-mcp-server&lt;/code&gt; scope was described in the &lt;a href=&quot;#keycloak-configuration&quot;&gt;Keycloak Configuration&lt;/a&gt; section and is used to ensure the access tokens that are issued to the registered client include the correct MCP server audience, while the &lt;code&gt;profile&lt;/code&gt; scope is only added for the access tokens to contain the logged-in user&amp;#8217;s name - adding this scope is not strictly necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s go back to the &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt;&apos;s &lt;code&gt;Guided OAuth Flow&lt;/code&gt; where we have already completed the &lt;code&gt;Metadata Discovery&lt;/code&gt; and &lt;code&gt;Client Registration&lt;/code&gt; steps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Press &lt;code&gt;Continue&lt;/code&gt; to begin the &lt;code&gt;Preparing Authorization&lt;/code&gt; step and you will see an &lt;code&gt;Authorization URL&lt;/code&gt; displayed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/oauth2_prepare_authorization.png&quot; alt=&quot;OAuth2 Prepare Authorization&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on it using the provided button on the right, and you will be redirected to Keycloak, via &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;OIDC Proxy&lt;/a&gt;, to login:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/keycloak_realm_login.png&quot; alt=&quot;Keycloak Realm Login&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Login as &lt;code&gt;alice:alice&lt;/code&gt;, and now Keycloak will request you to give your consent to the registered MCP Inspector Client to access Quarkus MCP Server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/keycloak_consent_screen.png&quot; alt=&quot;Keycloak Consent Screen&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is what using scopes during the client registration, and &lt;code&gt;quarkus-mcp-server&lt;/code&gt; scope in particular, give you: a must have option to authorize the registered MCP client application to access the MCP Server on your behalf.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Press &lt;code&gt;Yes&lt;/code&gt;, Keycloak will redirect you back to the &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt;&apos;s callback page in another tab that will display the authorization code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/copy_authorization_code.png&quot; alt=&quot;Copy Authorization Code&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Copy and paste this code into the &lt;code&gt;Prepare Authorization&lt;/code&gt; field in the &lt;code&gt;Guided OAuth Flow&lt;/code&gt; view:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/oauth2_request_authorization.png&quot; alt=&quot;OAuth2 Prepare Authorization&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Press &lt;code&gt;Continue&lt;/code&gt;. &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; now successfully acquires the tokens:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/token_request_response.png&quot; alt=&quot;OAuth2 Get Tokens&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, 3 tokens, the access and refresh tokens but also the ID token are returned. &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; does not really need the ID token, it only needs an access token in order to be able to access the MCP server, and optionally, the refresh token to get another access token when the current one expires. We&amp;#8217;ll have a look at how to drop the ID token in the &lt;a href=&quot;#use-oidc-proxy-to-encrypt-tokens&quot;&gt;Encrypt access and refresh tokens and drop ID token&lt;/a&gt; section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Copy the access token from the provided JSON data and paste it into &lt;a href=&quot;https://www.jwt.io/&quot;&gt;jwt.io&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/access_token_claims.png&quot; alt=&quot;OAuth2 Access Token Claims&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It contains a required &lt;code&gt;quarkus-mcp-server&lt;/code&gt; audience, exactly what the &lt;a href=&quot;#mcp-server-configuration&quot;&gt;MCP Server expects&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now you are ready to press &lt;code&gt;Connect&lt;/code&gt; in the Connection view that you saw in the &lt;a href=&quot;#start-mcp-inspector&quot;&gt;Step 2: Start the MCP Inspector&lt;/a&gt; section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, the access token is already available, so &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; uses this token to let you select and run the &lt;code&gt;user-name-provider&lt;/code&gt; tool:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/username_provider_call.png&quot; alt=&quot;User Name Provider Call&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now press &lt;code&gt;Disconnect&lt;/code&gt; first, and then &lt;code&gt;Clear OAuth State&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/disconnect_clear_oauth2_state.png&quot; alt=&quot;Disconnect and clear OAuth2 state&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But keep the &lt;a href=&quot;#start-mcp-server&quot;&gt;MCP server running&lt;/a&gt;, do not stop it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s see next how &lt;a href=&quot;#use-oidc-proxy&quot;&gt;OIDC Proxy can encrypt access and refresh tokens and drop ID token&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-oidc-proxy&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#use-oidc-proxy&quot;&gt;&lt;/a&gt;Step 4: Use OIDC Proxy to encrypt access and refresh tokens and drop ID token&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;point-of-using-oidc-proxy&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#point-of-using-oidc-proxy&quot;&gt;&lt;/a&gt;What is the point of using OIDC Proxy ?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You may be wondering by now, what is the point of using &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; and &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server&quot;&gt;Quarkus MCP Server&lt;/a&gt; together, with all the proxying going on between &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; and Keycloak ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And if you have been following the evolution of the MCP Authorization specification, from its older &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization&quot;&gt;2025-03-26 version&lt;/a&gt; to the &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization&quot;&gt;latest one&lt;/a&gt;, you may want to ask, does the idea of using &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; bring us back to the days where the MCP Server was expected to do OAuth2 itself in the &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization&quot;&gt;2025-03-26 version&lt;/a&gt; ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Not really, &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; was introduced in the &lt;a href=&quot;https://quarkus.io/blog/oidc-proxy/&quot;&gt;Use OIDC Proxy to integrate OIDC service endpoints with custom GPT&lt;/a&gt; blog post, more than half a year before the original MCP specification was published.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main idea behind &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; is to let SPA applications write the same OAuth2 code no matter what the connection details and capabilities of the actual proxied OAuth2 provider are, with the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; mediating between the client that is trying to perform various OAuth2 actions and the actual provider.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, as it happens, Keycloak currently does not accept OAuth2 dynamic client registration requests that are sent directly from the &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; SPA because its client registration endpoint does not support CORS. However, &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt;, by being co-located with the Quarkus MCP Server, does support CORS, and thus can approve and forward OAuth2 client registration requests from the &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; SPA&amp;#8217;s host to Keycloak. &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; can also augment or transform some of the OAuth2 requests and responses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Besides helping SPAs write an interoperable OAuth2 code, &lt;a href=&quot;https://quarkus.io/blog/oidc-proxy/#security-considerations&quot;&gt;it can help with restricting which authorization code flow tokens can be returned and support a locally managed redirect endpoint&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently, we have also enhanced &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; to support encrypting access and refresh tokens before returning them to SPA. We&amp;#8217;ll look at it in the next &lt;a href=&quot;#use-oidc-proxy-to-encrypt-tokens&quot;&gt;Encrypt access and refresh tokens and drop ID token&lt;/a&gt; section.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;use-oidc-proxy-to-encrypt-tokens&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#use-oidc-proxy-to-encrypt-tokens&quot;&gt;&lt;/a&gt;Encrypt access and refresh tokens and drop ID token&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we were discussing the early &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization&quot;&gt;MCP Authorizaton version 2025-03-26&lt;/a&gt; options in the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/&quot;&gt;Getting ready for secure MCP with Quarkus MCP Server&lt;/a&gt; blog post, my colleague &lt;a href=&quot;https://github.com/BarDweller&quot;&gt;Ozzy Osborne&lt;/a&gt; thought about the security of access tokens that were made available to MCP Clients and prototyped a Quarkus MCP Server demo where the MCP Server was used to access GitHub but the Claude AI MCP Client only had access to the wrapped access tokens that can not be used directly against GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; builds on Ozzy&amp;#8217;s idea to wrap tokens and makes it possible to encrypt both access and refresh tokens that are returned to the MCP Client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s see how it works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the following configuration properties to the &lt;a href=&quot;#mcp-server-configuration&quot;&gt;MCP Server Configuration&lt;/a&gt;, without restarting the &lt;a href=&quot;#start-mcp-server&quot;&gt;MCP Server&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;# Public key in JWK format that OIDC Proxy must use to encrypt access and refresh tokens.
# Keys in the PEM format are also supported.

quarkus.oidc-proxy.token-encryption-key-location=publicKey.jwk &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

# Private key in JWK format that OIDC Proxy must use to decrypt refresh tokens and Quarkus OIDC - bearer access tokens.

# The private and public keys were generated to support tests and demos.
# &apos;quarkus.oidc.credentials.secret&apos; property can be used encrypt and decrypt tokens instead.

quarkus.oidc.token.decryption-key-location=privateKey.jwk &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

# This is a hint to Quarkus OIDC that the incoming access tokens must be decrypted,
# given that by default it expects only encrypted ID tokens when `quarkus.oidc.token.decryption-key-location` is set.

quarkus.oidc.token.decrypt-access-token=true &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;

quarkus.oidc-proxy.allow-id-token=false &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/sberyozkin/quarkus-mcp-server-oidc-proxy/blob/main/secure-mcp-http-server-with-oidc-proxy/src/main/resources/publicKey.jwk&quot;&gt;Public RSA key&lt;/a&gt; that OIDC Proxy must use to encrypt access and refresh tokens, when intercepting the &lt;code&gt;authorization_code&lt;/code&gt; and &lt;code&gt;refresh_token&lt;/code&gt; grant responses. Note that Quarkus OIDC that protects the MCP Server does not control the communication between &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; and the token issuer, therefore it can not encrypt the tokens, only OIDC Proxy can.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/sberyozkin/quarkus-mcp-server-oidc-proxy/blob/main/secure-mcp-http-server-with-oidc-proxy/src/main/resources/privateKey.jwk&quot;&gt;Private RSA key&lt;/a&gt; that OIDC Proxy must use to decrypt refresh tokens and Quarkus OIDC - bearer access tokens. Note that OIDC Proxy does not control access to the Quarkus service endpoint such as Quarkus MCP server but only intercepts requests/responses to/from the token issuer, therefore it can only decrypt refresh tokens when intercepting &lt;code&gt;refresh_token&lt;/code&gt; grant requests, while Quarkus OIDC must handle the decryption of the access tokens that were encrypted by OIDC Proxy and are used to access the MCP Server.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is a hint to Quarkus OIDC that when the &lt;code&gt;quarkus.oidc.token.decryption-key-location&lt;/code&gt; is set, that only an access token, either the bearer or authorization code flow one, that must be decrypted.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;As you could see at the end of the &lt;a href=&quot;#use-mcp-inspector-to-access-mcp-server&quot;&gt;Step 3: Use MCP Inspector to register OAuth2 Client and access MCP Server&lt;/a&gt; section, ID token was also returned to &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; which does not need it. OIDC proxy also does not encrypt ID tokens the same way it can encrypt access and refresh tokens, because the whole point of an ID token when SPA applications login the user is for SPA be able to find some information about the user from the ID token, therefore encrypting it by the OIDC proxy would make it impossible. But an ID token can contain sensitive information so why return it to SPA which does not need it ? So we let &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;OIDC Proxy&lt;/a&gt; remove it from the authorization code flow grant response.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Save the updated configuration, Quarkus MCP Server will notice them in dev mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now please go back to the &lt;a href=&quot;#use-mcp-inspector-to-access-mcp-server&quot;&gt;Step 3: Use MCP Inspector to register OAuth2 Client and access MCP Server&lt;/a&gt; section and repeat the same steps, including updating another registered client in Keycloak.
Once you completed the &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt;&apos;s &lt;code&gt;Guided OAuth Flow&lt;/code&gt;, check the returned tokens:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/token_request_response_without_idtoken.png&quot; alt=&quot;Token response without the ID token&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see an ID token is no longer returned.
Now copy the access token value. &lt;a href=&quot;https://www.jwt.io/&quot;&gt;jwt.io&lt;/a&gt; no longer accepts encrypted JWT tokens, but you can find another JWT decoder online such as &lt;a href=&quot;https://fusionauth.io/dev-tools/jwt-decoder&quot;&gt;FusionAuth JWT Decoder&lt;/a&gt;.
Paste the access token - the actual claims are encrypted but it can still show the JWT headers:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_proxy/oauth2_encrypted_access_token.png&quot; alt=&quot;Encrypted access token&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These are not signing but encryption algorithms. &lt;code&gt;RSA-OAEP&lt;/code&gt; encrypts the generated content encryption key while &lt;code&gt;A256GCM&lt;/code&gt; algorithm uses this key to encrypt claims.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this particular demo, the fact that the access and refresh tokens are encrypted primarily eliminates the information leak risk as Keycloak access and refresh tokens are usually in JWT format and can contain sensitive details. We also rely on the MCP Client to use &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#authorization-code-protection&quot;&gt;Proof Key for Code Exchange&lt;/a&gt; to minimize a risk of the authorizaion code being leaked and the attacker acquiring the tokens, and we enforce the CORS policy in the &lt;a href=&quot;#mcp-server-configuration&quot;&gt;MCP Server Configuration&lt;/a&gt; section to allow requests to the MCP Server only from the known &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt;&apos;s host and port.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Encrypting access tokens before returning them to the MCP Client is very useful when your MCP Server is implemented to propagate the incoming access tokens to other services, such as GitHub, or downstream microservices that may not enforce specific CORS policies, or token verification constraints such as a token audience check. In such cases, if the MCP Client leaks the access token, the attacker can bypass Quarkus MCP server and access those other services directly. This risk is avoided when the access token is encrypted by &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;OIDC Proxy&lt;/a&gt; because those other services won&amp;#8217;t be able to decrypt it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly, when the SPA tries to use a refresh token to refresh the expired access token and the attacker manages to get hold of the refresh token and is aware of the actual token issuer&amp;#8217;s refresh endpoint, then the refresh grant request can go directly to the provider. This risk is avoided when the refresh token is encrypted by &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;OIDC Proxy&lt;/a&gt; because the token issuer won&amp;#8217;t be able to decrypt it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we discussed why it may be worth encrypting the access and refresh tokens, please go to the end of the &lt;a href=&quot;#use-mcp-inspector-to-access-mcp-server&quot;&gt;Step 3: Use MCP Inspector to register OAuth2 Client and access MCP Server&lt;/a&gt; section, &lt;code&gt;Connect&lt;/code&gt; to the MCP Server, and run the tool to confirm that the encrypted access token is correctly decrypted by the MCP Server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;security-considerations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#security-considerations&quot;&gt;&lt;/a&gt;Security Considerations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The key security recommendation remains the same as the one in the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-server-oauth2/#security-considerations&quot;&gt;Use MCP OAuth2 Flow to access Quarkus MCP Server&lt;/a&gt; blog post: secure Quarkus MCP servers must enforce that access tokens have a correct audience, for the MCP Server to assert that the current token is meant to access this MCP server only. And indeed, MCP Servers that propagate tokens further should consider exchanging such tokens, for a new token to target the downstream service correctly - it also minimizes the risk discussed next.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When your MCP server forwards the tokens, please consider how to minimize a risk of the attacker stealing the tokens from the MCP Client and using them to access directly the same services that MCP Server forwards tokens to. &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; provides a way to &lt;a href=&quot;#use-oidc-proxy-to-encrypt-tokens&quot;&gt;encrypt access and refresh tokens&lt;/a&gt; that are returned to the MCP Client, making them acceptable only by either the MCP server or &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;OIDC Proxy&lt;/a&gt; itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When MCP Client registers OAuth2 Clients dynamically, please consider enforcing a user consent during the authentication with a standard OpenId Connect &lt;code&gt;prompt=consent&lt;/code&gt; parameter. &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; recognizes the &lt;code&gt;quarkus.oidc.authentication.extra-params.prompt=consent&lt;/code&gt; property that you can use if the MCP Client does not add it itself when initiating an authorization code flow for the dynamically registered client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please note that the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; extension currently has an &lt;code&gt;experimental&lt;/code&gt; status, therefore, while we do encourage you to experiment with it, we do not recommend to use it in production for the purpose of hardening the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server&quot;&gt;Quarkus MCP Server&lt;/a&gt; token security yet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please never use a wildcard CORS policy in production, get the MCP server accept only known MCP Client SPA origins.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post we looked at how &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; can help to harden the security of &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server&quot;&gt;Quarkus MCP Server&lt;/a&gt; tokens, by encrypting access and refresh tokens, and removing a possibly sensitive ID token, before the tokens are returned to the MCP Client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also used &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; to get OAuth2 Dynamic Client Registration working by controlling the CORS policy at the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server&quot;&gt;Quarkus MCP Server&lt;/a&gt; level and forwarding the client registration requests to Keycloak.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please let us know what you think, enjoy !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 01 Oct 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/secure-mcp-oidc-proxy/
            </guid>
            
            
            
            <author>Sergey Beryozkin (https://twitter.com/sberyozkin)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.28.2 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-28-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.28.2, a regular maintenance release for our 3.28 stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.28, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.28.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.28&quot;&gt;Quarkus 3.28 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.28.2&quot;&gt;3.28.2&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 01 Oct 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-28-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #60 - September</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-60/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From hidden string pitfalls to emoji-safe endpoints, learn how to handle text correctly in modern Java applications with &quot;Mastering Unicode in Java: Build World-Ready REST APIs with Quarkus&quot; by Markus Eisele. Read &quot;Infusing AI into Your Java applications&quot; by Don Bourne &amp;amp; Michal Broz to learn how to create a simple RESTful Java AI application that asks a large language model (LLM) to write a short poem based on a topic provided by the application user. Check out Octavio Santana&amp;#8217;s &quot;Build a REST API With Just 2 Classes in Java and Quarkus&quot; to learn how Quarkus enables a full CRUD API with just two classes using Hibernate ORM with Panache. No controllers or repositories needed — just define two classes, and deploy. Read &quot;Building AI-Powered Applications with LangChain4j and Quarkus&quot; by Hamid Khanjani to see how Quarkus + LangChain4j lets you build fast, testable, production-ready AI services in Java. Learn how to bridge the gap between generative AI&amp;#8217;s knowledge and its ability to act within an enterprise, enabling LLMs to interact with business systems. Read &quot;The Universal Adapter for Enterprise AI: Mastering the MCP with Quarkus and Langchain4j&quot; by Elder Moraes as a hands-on guide to building an MCP server and a Langchain4j client to enhance system flexibility and maintainability.  Check out &quot;Building local LLM AI-Powered Applications with Quarkus, Ollama and Testcontainers&quot; by Jonathan Vila López, a complete development guide to build local LLM applications with Ollama and Quarkus and test them with Testcontainers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/60/&quot;&gt;Newsletter #60: September&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Fri, 26 Sep 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-60/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Getting Started with A2A Java SDK and gRPC</title>
            <link>
                https://quarkus.io/blog/quarkus-a2a-java-grpc/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The ability for AI agents to communicate across different frameworks and languages is key to
building polyglot multi-agent systems. The recent &lt;a href=&quot;https://quarkus.io/blog/quarkus-a2a-java-0-3-0-alpha-release/&quot;&gt;0.3.0.Alpha1&lt;/a&gt; and &lt;a href=&quot;https://quarkus.io/blog/quarkus-a2a-java-0-3-0-beta-release/&quot;&gt;0.3.0.Beta1&lt;/a&gt; releases of the A2A Java SDK take a
significant step forward in this area by adding support for the gRPC transport and the HTTP+JSON/REST transport, offering greater flexibility and improved performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post, we&amp;#8217;ll demonstrate how to create an A2A server agent and an A2A client that support
multiple transports, where the gRPC transport will be selected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;dice-agent-sample&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dice-agent-sample&quot;&gt;&lt;/a&gt;Dice Agent Sample&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To see the multi-transport support in action, we&amp;#8217;re going to take a look at the new
&lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/java/agents/dice_agent_multi_transport&quot;&gt;Dice Agent&lt;/a&gt;
sample from the &lt;a href=&quot;https://github.com/a2aproject/a2a-samples&quot;&gt;a2a-samples&lt;/a&gt; repo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;DiceAgent&lt;/code&gt; is a simple &lt;a href=&quot;https://github.com/a2aproject/a2a-samples/blob/main/samples/java/agents/dice_agent_multi_transport/server/src/main/java/com/samples/a2a/DiceAgent.java&quot;&gt;Quarkus LangChain4j AI service&lt;/a&gt; that can make use of &lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/java/agents/dice_agent_multi_transport/server/src/main/java/com/samples/a2a/DiceTools.java&quot;&gt;tools&lt;/a&gt; to roll dice of different sizes and check if the result of a roll is a prime number.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;a2a-server-agent&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a2a-server-agent&quot;&gt;&lt;/a&gt;A2A Server Agent&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are three key things in our sample application that turn our Quarkus LangChain4j AI service into an A2A
server agent:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;A dependency on at least one A2A Java SDK Server Reference implementation in the server application&amp;#8217;s
&lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/java/agents/dice_agent_multi_transport/server/pom.xml&quot;&gt;pom.xml&lt;/a&gt; file. In this sample, we&amp;#8217;ve added dependencies on both &lt;code&gt;io.github.a2asdk:a2a-java-sdk-reference-grpc&lt;/code&gt;
and &lt;code&gt;io.github.a2asdk:a2a-java-sdk-reference-jsonrpc&lt;/code&gt; since we want our A2A server agent to be able to support
both the gRPC and JSON-RPC transports.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/java/agents/dice_agent_multi_transport/server/src/main/java/com/samples/a2a/DiceAgentCardProducer.java&quot;&gt;DiceAgentCardProducer&lt;/a&gt;, which defines the &lt;code&gt;AgentCard&lt;/code&gt; for our A2A server agent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/java/agents/dice_agent_multi_transport/server/src/main/java/com/samples/a2a/DiceAgentExecutorProducer.java&quot;&gt;DiceAgentExecutorProducer&lt;/a&gt;, which calls our &lt;code&gt;DiceAgent&lt;/code&gt; AI service.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s look closer at the &lt;code&gt;DiceAgentCardProducer&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;/**
 * Producer for dice agent card configuration.
 */
@ApplicationScoped
public final class DiceAgentCardProducer {

    /** The HTTP port for the agent service. */
    @Inject
    @ConfigProperty(name = &quot;quarkus.http.port&quot;)
    private int httpPort;

    /**
     * Produces the agent card for the dice agent.
     *
     * @return the configured agent card
     */
    @Produces
    @PublicAgentCard
    public AgentCard agentCard() {
        return new AgentCard.Builder()
                .name(&quot;Dice Agent&quot;)
                .description(
                        &quot;Rolls an N-sided dice and answers questions about the &quot;
                                + &quot;outcome of the dice rolls. Can also answer questions &quot;
                                + &quot;about prime numbers.&quot;)
                .preferredTransport(TransportProtocol.GRPC.asString()) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
                .url(&quot;localhost:&quot; + httpPort) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
                .version(&quot;1.0.0&quot;)
                .documentationUrl(&quot;http://example.com/docs&quot;)
                .capabilities(
                        new AgentCapabilities.Builder()
                                .streaming(true)
                                .pushNotifications(false)
                                .stateTransitionHistory(false)
                                .build())
                .defaultInputModes(List.of(&quot;text&quot;))
                .defaultOutputModes(List.of(&quot;text&quot;))
                .skills(
                        List.of(
                                new AgentSkill.Builder()
                                        .id(&quot;dice_roller&quot;)
                                        .name(&quot;Roll dice&quot;)
                                        .description(&quot;Rolls dice and discusses outcomes&quot;)
                                        .tags(List.of(&quot;dice&quot;, &quot;games&quot;, &quot;random&quot;))
                                        .examples(List.of(&quot;Can you roll a 6-sided die?&quot;))
                                        .build(),
                                new AgentSkill.Builder()
                                        .id(&quot;prime_checker&quot;)
                                        .name(&quot;Check prime numbers&quot;)
                                        .description(&quot;Checks if given numbers are prime&quot;)
                                        .tags(List.of(&quot;math&quot;, &quot;prime&quot;, &quot;numbers&quot;))
                                        .examples(
                                                List.of(&quot;Is 17 a prime number?&quot;))
                                        .build()))
                .protocolVersion(&quot;0.3.0&quot;)
                .additionalInterfaces( &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
                        List.of(
                                new AgentInterface(TransportProtocol.GRPC.asString(), &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
                                        &quot;localhost:&quot; + httpPort),
                                new AgentInterface(
                                        TransportProtocol.JSONRPC.asString(), &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
                                        &quot;http://localhost:&quot; + httpPort)))
                .build();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The preferred transport for our A2A server agent, &lt;code&gt;gRPC&lt;/code&gt; in this sample. This is the transport protocol available at the primary endpoint URL.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is the primary endpoint URL for our A2A server agent. Since &lt;code&gt;gRPC&lt;/code&gt; is our preferred transport and since
we&amp;#8217;ll be using the HTTP port for gRPC and JSON-RPC, we&amp;#8217;re specifying &lt;code&gt;&quot;localhost:&quot; + httpPort&lt;/code&gt; here.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We can optionally specify additional interfaces supported by our A2A server agent here. Since we also want
to support the JSON-RPC transport, we&amp;#8217;ll be adding that in this section.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The primary endpoint URL can optionally be specified in the additional interfaces section for completeness.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The JSON-RPC transport URL. Notice that we&amp;#8217;re using the HTTP port for both JSON-RPC and gRPC.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;port-configuration-for-the-transports&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#port-configuration-for-the-transports&quot;&gt;&lt;/a&gt;Port Configuration for the Transports&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the previous section, we mentioned that we&amp;#8217;re using the HTTP port for both the gRPC and JSON-RPC transports.
This is configured in our &lt;code&gt;application.properties&lt;/code&gt; file as shown here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;# Use the same port for gRPC and HTTP
quarkus.grpc.server.use-separate-server=false
quarkus.http.port=11000&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This setting allows serving both plain HTTP and gRPC requests from the same HTTP server. Underneath it uses a Vert.x based gRPC server. If you set this setting to true, gRPC requests will be served on port 9000 (and gRPC Java will be used instead).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;starting-the-a2a-server-agent&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#starting-the-a2a-server-agent&quot;&gt;&lt;/a&gt;Starting the A2A Server Agent&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we start our Quarkus application, our A2A server agent will be available at localhost:11000 for clients that would like to use gRPC and at &lt;a href=&quot;http://localhost:11000&quot; class=&quot;bare&quot;&gt;http://localhost:11000&lt;/a&gt; for clients that would like to use JSON-RPC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A2A clients can now send queries to our A2A server agent using either the gRPC or JSON-RPC transport.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The complete source code and instructions for starting the server application are available &lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/java/agents/dice_agent_multi_transport/server&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have our multi-transport server agent configured and ready to go, let&amp;#8217;s take a look at how to create an A2A client that can communicate with it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;a2a-client&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a2a-client&quot;&gt;&lt;/a&gt;A2A Client&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;dice_agent_multi_transport&lt;/code&gt; sample also includes a &lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/java/agents/dice_agent_multi_transport/client/src/main/java/com/samples/a2a/client/TestClient.java&quot;&gt;TestClient&lt;/a&gt; that can be used to send messages to the Dice Agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the client&amp;#8217;s &lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/java/agents/dice_agent_multi_transport/client/pom.xml&quot;&gt;pom.xml&lt;/a&gt; file contains dependencies on &lt;code&gt;io.github.a2asdk:a2a-java-sdk-client&lt;/code&gt; and &lt;code&gt;io.github.a2asdk:a2a-java-sdk-client-transport-grpc&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;a2a-java-sdk-client&lt;/code&gt; dependency provides access to a &lt;code&gt;Client.builder&lt;/code&gt; that we&amp;#8217;ll use to create our A2A client and also provides the ability for the client to support the JSON-RPC transport.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;a2a-java-sdk-client-transport-grpc&lt;/code&gt; dependency provides the ability for the client to support the gRPC transport.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s see how the &lt;code&gt;TestClient&lt;/code&gt; uses the A2A Java SDK to create a &lt;code&gt;Client&lt;/code&gt; that supports both gRPC and JSON-RPC:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;...
// Fetch the public agent card
AgentCard publicAgentCard = new A2ACardResolver(serverUrl).getAgentCard();

// Create a CompletableFuture to handle async response
final CompletableFuture&amp;lt;String&amp;gt; messageResponse = new CompletableFuture&amp;lt;&amp;gt;();

// Create consumers for handling client events
List&amp;lt;BiConsumer&amp;lt;ClientEvent, AgentCard&amp;gt;&amp;gt; consumers = getConsumers(messageResponse);

// Create error handler for streaming errors
Consumer&amp;lt;Throwable&amp;gt; streamingErrorHandler = (error) -&amp;gt; {
    System.out.println(&quot;Streaming error occurred: &quot; + error.getMessage());
    error.printStackTrace();
    messageResponse.completeExceptionally(error);
};

// Create channel factory for gRPC transport
Function&amp;lt;String, Channel&amp;gt; channelFactory = agentUrl -&amp;gt; {
    return ManagedChannelBuilder.forTarget(agentUrl).usePlaintext().build();
};

ClientConfig clientConfig = new ClientConfig.Builder()
    .setAcceptedOutputModes(List.of(&quot;Text&quot;))
    .build();

// Create the client with both JSON-RPC and gRPC transport support.
// The A2A server agent&apos;s preferred transport is gRPC, since the client
// also supports gRPC, this is the transport that will get used
Client client = Client.builder(publicAgentCard) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    .addConsumers(consumers) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    .streamingErrorHandler(streamingErrorHandler) &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    .withTransport(GrpcTransport.class, new GrpcTransportConfig(channelFactory)) &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    .withTransport(JSONRPCTransport.class, new JSONRPCTransportConfig()) &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
    .clientConfig(clientConfig) &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
    .build();

// Create and send the message
Message message = A2A.toUserMessage(messageText);

System.out.println(&quot;Sending message: &quot; + messageText);
client.sendMessage(message); &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
System.out.println(&quot;Message sent successfully. Waiting for response...&quot;);

try {
    // Wait for response with timeout
    String responseText = messageResponse.get();
    System.out.println(&quot;Final response: &quot; + responseText);
} catch (Exception e) {
    System.err.println(&quot;Failed to get response: &quot; + e.getMessage());
    e.printStackTrace();
}
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We can use &lt;code&gt;Client.builder(publicAgentCard)&lt;/code&gt; to create our A2A client. We need to pass in the &lt;code&gt;AgentCard&lt;/code&gt; retrieved from the A2A server agent this client will be communicating with.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We need to specify event consumers that will be used to handle the responses that will be received from the
A2A server agent. This will be explained in more detail in the next section.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The A2A client created by the &lt;code&gt;Client.builder&lt;/code&gt; will automatically send streaming messages, as opposed to
non-streaming messages, if it&amp;#8217;s supported by both the server and the client. We need to specify a handler that will be used for any errors that might occur during streaming.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We&amp;#8217;re indicating that we&amp;#8217;d like our client to support the gRPC transport.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We&amp;#8217;re indicating that we&amp;#8217;d like our client to also support the JSON-RPC transport. When communicating with
an A2A server agent that doesn&amp;#8217;t support gRPC, this is the transport that would get used.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We can optionally specify general client configuration and preferences here.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Once our &lt;code&gt;Client&lt;/code&gt; has been created, we can send a message to the A2A server agent. The client will automatically use streaming if it&amp;#8217;s supported by both the server and the client. If the server doesn&amp;#8217;t
support streaming, the client will send a non-streaming message instead.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;defining-the-event-consumers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#defining-the-event-consumers&quot;&gt;&lt;/a&gt;Defining the Event Consumers&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When creating our A2A client, we need to specify event consumers that will be used to handle the responses
that will be received from the A2A server agent. Let&amp;#8217;s see how to define a consumer that handles the different
types of events:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;   private static List&amp;lt;BiConsumer&amp;lt;ClientEvent, AgentCard&amp;gt;&amp;gt; getConsumers(
            final CompletableFuture&amp;lt;String&amp;gt; messageResponse) {
        List&amp;lt;BiConsumer&amp;lt;ClientEvent, AgentCard&amp;gt;&amp;gt; consumers = new ArrayList&amp;lt;&amp;gt;();
        consumers.add(
                (event, agentCard) -&amp;gt; {
                    if (event instanceof MessageEvent messageEvent) { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
                        Message responseMessage = messageEvent.getMessage();
                        String text = extractTextFromParts(responseMessage.getParts());
                        System.out.println(&quot;Received message: &quot; + text);
                        messageResponse.complete(text);
                    } else if (event instanceof TaskUpdateEvent taskUpdateEvent) { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
                        UpdateEvent updateEvent = taskUpdateEvent.getUpdateEvent();
                        if (updateEvent
                                instanceof TaskStatusUpdateEvent taskStatusUpdateEvent) { &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
                            System.out.println(&quot;Received status-update: &quot;
                                            + taskStatusUpdateEvent.getStatus().state().asString());
                            if (taskStatusUpdateEvent.isFinal()) {
                                StringBuilder textBuilder = new StringBuilder();
                                List&amp;lt;Artifact&amp;gt; artifacts
                                        = taskUpdateEvent.getTask().getArtifacts();
                                for (Artifact artifact : artifacts) {
                                    textBuilder.append(extractTextFromParts(artifact.parts()));
                                }
                                String text = textBuilder.toString();
                                messageResponse.complete(text);
                            }
                        } else if (updateEvent
                                        instanceof TaskArtifactUpdateEvent taskArtifactUpdateEvent) { &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
                            List&amp;lt;Part&amp;lt;?&amp;gt;&amp;gt; parts = taskArtifactUpdateEvent
                                    .getArtifact()
                                    .parts();
                            String text = extractTextFromParts(parts);
                            System.out.println(&quot;Received artifact-update: &quot; + text);
                        }
                    } else if (event instanceof TaskEvent taskEvent) { &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
                        System.out.println(&quot;Received task event: &quot;
                                + taskEvent.getTask().getId());
                    }
                });
        return consumers;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This defines how to handle a &lt;code&gt;Message&lt;/code&gt; received from the server agent. The server agent will send a response that contains a &lt;code&gt;Message&lt;/code&gt; for immediate, self-contained interactions that are stateless.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This defines how to handle an &lt;code&gt;UpdateEvent&lt;/code&gt; received from the server agent for a specific task. There are
two types of &lt;code&gt;UpdateEvents&lt;/code&gt; that can be received.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A &lt;code&gt;TaskStatusUpdateEvent&lt;/code&gt; notifies the client of a change in a task&amp;#8217;s status. This is typically used in streaming interactions. If this is the final event in the stream for this interaction, &lt;code&gt;taskStatusUpdateEvent.isFinal()&lt;/code&gt;
will return &lt;code&gt;true&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A &lt;code&gt;TaskArtifactUpdateEvent&lt;/code&gt; notifies the client that an artifact has been generated or updated. An artifact contains output generated by an agent during a task. This is typically used in streaming interactions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This defines how to handle a &lt;code&gt;Task&lt;/code&gt; received from the server agent. A &lt;code&gt;Task&lt;/code&gt; will be processed by the server agent through a defined lifecycle until it reaches an interrupted state or a terminal state.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;transport-selection&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#transport-selection&quot;&gt;&lt;/a&gt;Transport Selection&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When creating our &lt;code&gt;Client&lt;/code&gt;, we used the &lt;code&gt;withTransport&lt;/code&gt; method to specify that we want the client
to support both gRPC and JSON-RPC, in that order. The &lt;code&gt;Client.builder&lt;/code&gt; selects the appropriate
transport protocol to use based on information obtained from the A2A server agent&amp;#8217;s &lt;code&gt;AgentCard&lt;/code&gt;,
taking into account the transports configured for the client. In this sample application, because
the server agent&amp;#8217;s preferred transport is gRPC, the gRPC transport will be used.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;using-the-a2a-client&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#using-the-a2a-client&quot;&gt;&lt;/a&gt;Using the A2A Client&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The sample application contains a &lt;code&gt;TestClientRunner&lt;/code&gt; that can be run using &lt;code&gt;JBang&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;jbang TestClientRunner.java&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should see output similar to this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;Connecting to dice agent at: http://localhost:11000
Successfully fetched public agent card:
...
Sending message: Can you roll a 5 sided die?
Message sent successfully. Waiting for response...
Received status-update: submitted
Received status-update: working
Received artifact-update: Sure! I rolled a 5 sided die and got a 3.
Received status-update: completed
Final response: Sure! I rolled a 5 sided die and got a 3.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also experiment with sending different messages to the A2A server agent using the &lt;code&gt;--message&lt;/code&gt; option
as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;jbang TestClientRunner.java --message &quot;Can you roll a 13-sided die and check if the result is a prime number?&quot;
Connecting to dice agent at: http://localhost:11000
Successfully fetched public agent card:
...
Sending message: Can you roll a 13-sided die and check if the result is a prime number?
Message sent successfully. Waiting for response...
Received status-update: submitted
Received status-update: working
Received artifact-update: I rolled a 13 sided die and got a 3.  3 is a prime number.
Received status-update: completed
Final response: I rolled a 13 sided die and got a 3.  3 is a prime number.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The complete source code and instructions for starting the client are available &lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/java/agents/dice_agent_multi_transport/client&quot;&gt;here&lt;/a&gt;. There
are also details on how to use an A2A client that uses the A2A Python SDK instead of the A2A Java SDK
to communicate with our A2A server agent.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The addition of multi-transport support to the A2A Java SDK, as demonstrated in the new Dice Agent
sample, is a big step towards creating more flexible, performant, polyglot multi-agent systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;further-reading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#further-reading&quot;&gt;&lt;/a&gt;Further Reading&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/java/agents/dice_agent_multi_transport&quot;&gt;Dice Agent Sample&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-a2a-java-0-3-0-alpha-release/&quot;&gt;Getting Started with Quarkus and A2A Java SDK 0.3.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-a2a-java-0-3-0-beta-release/&quot;&gt;A2A Java SDK: Support for the REST Transport is Now Here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/java/agents&quot;&gt;A2A Java SDK Samples&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/a2aproject/a2a-java/blob/main/README.md&quot;&gt;A2A Java SDK Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://a2a-protocol.org/latest/specification/&quot;&gt;A2A Specification&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 25 Sep 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-a2a-java-grpc/
            </guid>
            
            
            
            <author>Farah Juma (https://twitter.com/farahjuma)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.28 - More security features, custom Grafana dashboards, support for multiple clients in Liquibase MongoDB, and more</title>
            <link>
                https://quarkus.io/blog/quarkus-3-28-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released both Quarkus 3.27 LTS and Quarkus 3.28.
While Quarkus 3.27 is a Long Term Support (LTS) release, branched from Quarkus 3.26 and maintained for 12 months, Quarkus 3.28 comes with some new features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.28 introduces the following notable changes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/49618&quot;&gt;#49618&lt;/a&gt; - Provide a fluent API for CSRF programmatic set up&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/49122&quot;&gt;#49122&lt;/a&gt; - Support flow-specific OIDC request and response filters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/49151&quot;&gt;#49151&lt;/a&gt; - Allow for custom Grafana dashboards&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/49805&quot;&gt;#49805&lt;/a&gt; - Add support for multiple clients in Liquibase MongoDB extension&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Building Quarkus applications should also be faster with this release, thanks to an effort to reduce memory allocations during the build, parallelize some more tasks such as Hibernate ORM proxy generation or building the Jar file, and various other improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.28, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.28.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.28&quot;&gt;Quarkus 3.28 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;security&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#security&quot;&gt;&lt;/a&gt;Security&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is now possible to configure CSRF protection programmatically using a &lt;a href=&quot;https://quarkus.io/guides/security-csrf-prevention#csrf-prevention-programmatic-set-up&quot;&gt;fluent API&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can restrict an &lt;code&gt;OidcRequestFilter&lt;/code&gt; or an &lt;code&gt;OidcResponseFilter&lt;/code&gt; to a specific authentication flow by using the &lt;code&gt;@BearerTokenAuthentication&lt;/code&gt; and &lt;code&gt;@AuthorizationCodeFlow&lt;/code&gt; annotations.
Find out more about this new feature in &lt;a href=&quot;https://quarkus.io/guides/security-oidc-bearer-token-authentication#restrict-oidc-filter-to-bearer-auth-flow&quot;&gt;OpenID Connect (OIDC) Bearer token authentication&lt;/a&gt; and &lt;a href=&quot;https://quarkus.io/guides/security-oidc-code-flow-authentication#restrict-oidc-filter-to-code-flow&quot;&gt;OpenID Connect authorization code flow mechanism for protecting web applications&lt;/a&gt; guides.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;custom-grafana-dashboards&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#custom-grafana-dashboards&quot;&gt;&lt;/a&gt;Custom Grafana dashboards&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now provide custom Grafana dashboards by placing JSON descriptors in the &lt;code&gt;META-INF/grafana/&lt;/code&gt; directory of your application.
You can find more information in the &lt;a href=&quot;https://quarkus.io/guides/observability-devservices-lgtm#custom-dashboards&quot;&gt;Observability Dev Services with Grafana OTel LGTM&lt;/a&gt; guide.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;liquibase-mongodb&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#liquibase-mongodb&quot;&gt;&lt;/a&gt;Liquibase MongoDB&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MongoDB extension have supported multiple clients for a very long time.
The Liquibase MongoDB extension was only supporting a single client so far, but it now &lt;a href=&quot;https://quarkus.io/guides/liquibase-mongodb#multiple-clients&quot;&gt;supports multiple clients&lt;/a&gt; as well.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.28.0.CR1&quot;&gt;3.28.0.CR1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.28.0&quot;&gt;3.28.0&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.28.1&quot;&gt;3.28.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1122&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.28 release, thanks to Akulov S V, Ales Justin, Alex Martel, Alexey Loubyansky, andreatp, Andy Damevin, Bhawna, Bruno Baptista, Chris Laprun, Christian Beikov, Clement Escoffier, Diego Fernandez Aceves, Eli Barbosa, Eric Deandrea, Florent Fourcade, Foivos Zakkak, Fouad Almalki, George Gastaldi, Georgios Andrianakis, Guillaume Smet, Holly Cummins, Jakub Jedlicka, Jan Martiska, Jan Scheidegger, Jonas Rutishauser, Joseph Zhang, Julien Ponge, Justin Bertram, Karm Michal Babacek, Katia Aresti, Ladislav Thon, Lars Andringa, Luca Molteni, Luke Morfill, Marc Nuri, Marco Belladelli, marko-bekhta, Martin Bartoš, Martin Kouba, Matej Novotny, Melloware, Michael Edgar, Michal Maléř, Michal Vavřík, Mikhail Polivakha, Ozan Gunalp, Paulo Casaes, Peter Palaga, Phillip Krüger, Roberto Cortez, Rolfe Dlugy-Hegwer, Rostislav Svoboda, Rúben Garcia, Saee Saadat, Sanne Grinovero, Sergey Beryozkin, Stéphane Épardaud, Teymur Babayev, Unai Valle, xstefank, and Yoann Rodière.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 24 Sep 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-28-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.27 - new LTS version</title>
            <link>
                https://quarkus.io/blog/quarkus-3-27-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is our pleasure to announce the release of Quarkus 3.27, which is our new LTS (Long Term Support) version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This version is built on the top of Quarkus 3.26.
New features landed in &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-28-released/&quot;&gt;Quarkus 3.28&lt;/a&gt;, which was also released today.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to know more about our LTS policy, the &lt;a href=&quot;https://quarkus.io/blog/lts-releases/&quot;&gt;LTS announcement&lt;/a&gt; is a must read.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;LTS releases are supported for 12 months.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are coming from the previous LTS, Quarkus 3.20, there are a lot of exciting new features and we recommend reading the following announcements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-3-21-0-released/&quot;&gt;Quarkus 3.21 - TLS Registry support for MongoDB Client&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-3-22-1-released/&quot;&gt;Quarkus 3.22 - Compose Dev Services, improved test class loading infrastructure&amp;#8230;&amp;#8203;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-3-23-0-released/&quot;&gt;Quarkus 3.23 - Named datasources for Hibernate Reactive, OIDC bearer step up authentication&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-3-24-released/&quot;&gt;Quarkus 3.24 - Dev Assistant, Hibernate ORM 7, Hibernate Validator 9&amp;#8230;&amp;#8203;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-3-25-released/&quot;&gt;Quarkus 3.25 - Virtual threads for GraphQL, Micrometer update and various new security-related features&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-3-26-released/&quot;&gt;Quarkus 3.26 - Hibernate updates, named persistence units in Hibernate Reactive, Dev UI as MCP functions, and more.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.27, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.27 LTS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are upgrading from 3.26, there&amp;#8217;s nothing to do as 3.27 is the direct continuation of 3.26.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are upgrading from the previous LTS, Quarkus 3.15, please refer to the following migration guides:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.21&quot;&gt;Migration guide for 3.21&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.22&quot;&gt;Migration guide for 3.22&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.23&quot;&gt;Migration guide for 3.23&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.24&quot;&gt;Migration guide for 3.24&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.25&quot;&gt;Migration guide for 3.25&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.26&quot;&gt;Migration guide for 3.26&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.27&quot;&gt;Migration guide for 3.27&lt;/a&gt; - this one is empty as 3.27 is the continuation of 3.26&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; should handle most of the heavy lifting for you,
but there are still cases that should be handled manually and we recommend reading these migration guides carefully.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been updated to 3.27.0.
You can find everything you need to know about it in the &lt;a href=&quot;https://camel.apache.org/blog/2025/09/camel-quarkus-3.27.0/&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-cxf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-cxf&quot;&gt;&lt;/a&gt;Quarkus CXF&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus CXF 3.27 was released and is now available in &lt;a href=&quot;https://code.quarkus.io/?extension-search=origin:platform%20quarkus-cxf&quot;&gt;Quarkus Platform 3.27&lt;/a&gt;.
Check the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.27.0.html&quot;&gt;Quarkus CXF 3.27.0&lt;/a&gt; release notes for more information about what is new in this release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-langchain4j&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-langchain4j&quot;&gt;&lt;/a&gt;Quarkus LangChain4j&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus LangChain4j extensions have been upgraded to version 1.2.0.
It relies on LangChain4j 1.5.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The core part of Quarkus 3.27.0 is a rebadged release of Quarkus 3.26.4 so nothing new here.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1122 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.27 release, thanks to Akulov S V, Alexey Loubyansky, Bhawna, brunobat, Christian Beikov, Fouad Almalki, George Gastaldi, Georgios Andrianakis, Guillaume Smet, Holly Cummins, Jan Martiska, Jan Scheidegger, Julien Ponge, Karm Michal Babacek, Luca Molteni, Marco Belladelli, marko-bekhta, Martin Kouba, Melloware, Michael Edgar, Michal Maléř, Michal Vavřík, Ozan Gunalp, Peter Palaga, Phillip Kruger, Roberto Cortez, Rolfe Dlugy-Hegwer, Rostislav Svoboda, Saee Saadat, Sergey Beryozkin, and Teymur Babayev.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The list is a bit smaller than usual as 3.27 only contains bugfixes on top of 3.26.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 24 Sep 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-27-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.20.3 released - LTS maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-20-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.20.3, our next maintenance release for the 3.20 LTS stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes, documentation updates and fixes the following CVEs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2025-58056&quot;&gt;CVE-2025-58056&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2025-58057&quot;&gt;CVE-2025-58057&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.20.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.20, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update --stream=3.20&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.20.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.20.3&quot;&gt;the full changelog of 3.20.3 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 24 Sep 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-20-3-released/
            </guid>
            
            
            
            <author>Jan Martiška (https://twitter.com/janmartiska)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.15.7 released - LTS maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-15-7-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.15.7, our next maintenance release for the 3.15 LTS stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes, documentation updates and fixes the following CVEs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2025-58056&quot;&gt;CVE-2025-58056&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2025-58057&quot;&gt;CVE-2025-58057&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.15.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.15, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update --stream=3.15&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.15.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.15.7&quot;&gt;the full changelog of 3.15.7 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 24 Sep 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-15-7-released/
            </guid>
            
            
            
            <author>Jan Martiška (https://twitter.com/janmartiska)</author>
            
        </item>
        
        <item>
            <title>Use MCP OAuth2 Flow to access Quarkus MCP Server</title>
            <link>
                https://quarkus.io/blog/secure-mcp-server-oauth2/
            </link>
            <description>
                &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Back in April 2025, in the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/&quot;&gt;Getting ready for secure MCP with Quarkus MCP Server&lt;/a&gt; blog post, we explained how to enforce MCP client authentication with the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server&quot;&gt;Quarkus MCP Server&lt;/a&gt; by configuring it to verify bearer access tokens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the time, we worked against the &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization&quot;&gt;old 2025-03-26 version of the MCP Authorization specification&lt;/a&gt; that expected compliant MCP servers to manage OAuth2 flows themselves either directly or via the delegation, with that idea being disputed due to its complexity, and with no MCP clients providing the OAuth2 authorization code flow support being available. Therefore, in the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/&quot;&gt;Getting ready for secure MCP with Quarkus MCP Server&lt;/a&gt; blog post, the access tokens were acquired out of band: we used &lt;a href=&quot;https://quarkus.io/guides/security-openid-connect-dev-services&quot;&gt;Keycloak DevUI&lt;/a&gt; to get an access token and copy it to &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/#mcp-server-devui&quot;&gt;MCP Server DevUI&lt;/a&gt; to test it in devmode, and did a GitHub login to the Quarkus REST endpoint in order to copy and test a GitHub access token with both &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; and &lt;code&gt;curl&lt;/code&gt; in prod mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization&quot;&gt;latest 2025-03-26 version of the MCP Authorization specification&lt;/a&gt; offers a simpler, better version of how OAuth2 must be supported in MCP. The focus has shifted to MCP clients that are now expected to drive the OAuth2 flows, while MCP servers are only required to support automating such flows by providing &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9728&quot;&gt;OAuth2 Protected Resource Metadata&lt;/a&gt;, as well as correctly verifying the actual access tokens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, we will explain how MCP clients compliant with the &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization&quot;&gt;latest 2025-03-26 version of the MCP Authorization specification&lt;/a&gt; can login users using an OAuth2 authorization code flow, acquire access tokens and use them to access secure Quarkus MCP &lt;em&gt;Streamable HTTP&lt;/em&gt; servers on behalf of the logged-in users.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently, &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; offers the most advanced, adaptable, and accessible MCP OAuth2 authorization code flow support, even if somewhat unstable between its different versions, and therefore we will work with it in this post. You are welcome to experiment with other MCP client implementations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will demonstrate a great &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-mcp-server/dev/index.html#_multiple_server_configurations&quot;&gt;Quarkus MCP Server capability to support multiple MCP HTTP configurations&lt;/a&gt;, each one with their own unique OAuth2 or OpenId Connect security constraints, effectively allowing for a multi-tenant security control of tools, prompts and resources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.keycloak.org/&quot;&gt;Keycloak&lt;/a&gt; will be used to support two distint security realms, with the security of each of the MCP HTTP configurations controlled by its own Keycloak realm. You are welcome to try to secure Quarkus MCP Server with other preferred OAuth2 or OpenID Connect providers by replacing the Keycloak specific configurations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;demo-flow-diagram&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#demo-flow-diagram&quot;&gt;&lt;/a&gt;Demo MCP OAuth2 Flow Diagram&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can read all about the MCP OAuth2 Authorization Flow in the &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#authorization-flow&quot;&gt;Authorization Flow section of the latest specification&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this section, we are going to have a look at a simplified diagram showing how &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; can use OAuth 2.0 Flow to login a user to Keycloak, get an access token and use it to access a secure Quarkus MCP Server endpoint.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_server_oauth2/demo_flow_diagram.png&quot; alt=&quot;Demo Flow Diagram&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MCP Client such as &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; requires configuring an MCP &lt;em&gt;Streamable HTTP&lt;/em&gt; endpoint URL, OAuth2 Client ID, and optional scopes to access the MCP server securely. And as you can see, a lot happens from the moment you press &lt;code&gt;Connect&lt;/code&gt; until a valid access token is sent to the MCP server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MCP Client starts by accessing the MCP server without a token and gets back HTTP 401 with a &lt;code&gt;WWW-Authenticate&lt;/code&gt; &lt;code&gt;resource_metadata&lt;/code&gt; parameter that links to the MCP server&amp;#8217;s &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9728&quot;&gt;OAuth2 Protected Resource Metadata&lt;/a&gt; route. The client now fetches a base URL of the Keycloak realm that secures the MCP server as well as the MCP server&amp;#8217;s resource identifier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, MCP Client uses the Keycloak realm&amp;#8217;s URL to discover this realm&amp;#8217;s authorization and token endpoint URLs, supported &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7636&quot;&gt;Proof Key for Code Exchange&lt;/a&gt; (PKCE) methods, and other metadata properties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The user is now redirected to Keycloak to login into the required realm. The Keycloak redirect URL includes the configured OAuth2 client id, scopes, callback URI which points to the &lt;code&gt;&lt;a href=&quot;http://localhost:6274/oauth/callback&quot; class=&quot;bare&quot;&gt;http://localhost:6274/oauth/callback&lt;/a&gt;&lt;/code&gt; endpoint managed by the MCP client, as well as the earlier discovered MCP Server&amp;#8217;s resource identifier as an &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8707.html&quot;&gt;OAuth2 Resource Indicator&lt;/a&gt;. Generated PKCE code challenge and state parameters are also included in the redirect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The user logs in, is redirected back to the &lt;code&gt;&lt;a href=&quot;http://localhost:6274/oauth/callback&quot; class=&quot;bare&quot;&gt;http://localhost:6274/oauth/callback&lt;/a&gt;&lt;/code&gt; endpoint, MCP client exchanges the returned &lt;code&gt;code&lt;/code&gt; to get ID and access tokens, and uses the access token to access the MCP server, allowing the user to select and run the tool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization&quot;&gt;MCP Authorization Specification&lt;/a&gt; also recommends that MCP clients support &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7591&quot;&gt;OAuth2 Dynamic Client Registration&lt;/a&gt; and &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; does support it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post, we are only going to look at a case where OAuth2 Client ID is already known in advance, which is likely to be a typical case in production where OIDC client applications are created in advance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will also look at how &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; does &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7591&quot;&gt;OAuth2 Dynamic Client Registration&lt;/a&gt; in the next post in this MCP Security series.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#authorization-flow&quot;&gt;MCP Authorization Flow&lt;/a&gt; is rather neatly defined, requiring the use of such OAuth2 specifications as &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9728&quot;&gt;OAuth2 Protected Resource Metadata&lt;/a&gt;, &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8707.html&quot;&gt;OAuth2 Resource Indicator&lt;/a&gt;, and also recommending the use of &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7591&quot;&gt;OAuth2 Dynamic Client Registration&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please note though that the actual flow is not that unique to the MCP Authorization. It is a typical Single-page application (SPA) OAuth2 authorization code flow in action:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_server_oauth2/typical_spa_oauth2_flow.png&quot; alt=&quot;Typical SPA OAuth2 Flow&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SPA uses a provider such as Keycloak to login users and use acquired access tokens to access Quarkus Service on their behalf - typical OAuth2 done at the SPA level. In this diagram, you can replace &lt;code&gt;SPA&lt;/code&gt; with &lt;code&gt;MCP Client&lt;/code&gt;, &lt;code&gt;Quarkus Service&lt;/code&gt; with &lt;code&gt;MCP Server&lt;/code&gt; and you&amp;#8217;ll get a close enough match with the demo flow diagram in the previous image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The comparison between the &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization&quot;&gt;MCP Authorization&lt;/a&gt; and SPA OAuth2 flows implies that the &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization&quot;&gt;MCP Authorization specification&lt;/a&gt; targets generic SPA AI and MCP client applications such as &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt;, Claude AI, Cursor, and others that can plugin MCP servers. It does not currently apply to Quarkus MCP Client which typically runs in scope of the higher-level Quarkus LangChain4j server application with its own authentication requirements, you can read more about it in the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-client/#demo-architecture&quot;&gt;Use Quarkus MCP client to access secure MCP HTTP servers&lt;/a&gt; blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are now ready to have a look at how it works in the demo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find the complete project source in the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server/tree/main/samples/multiple-secure-mcp-http-servers&quot;&gt;Multiple Secure Quarkus MCP HTTP Servers sample&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-mcp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-mcp-server&quot;&gt;&lt;/a&gt;Step 1 - Create and start MCP server with two secure Streamable HTTP endpoints&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let&amp;#8217;s create a secure Quarkus MCP server and configure two &lt;em&gt;Streamable HTTP&lt;/em&gt; endpoints with their own unique security authentication controls.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-dependencies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-dependencies&quot;&gt;&lt;/a&gt;MCP server maven dependencies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the following dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.mcp&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-mcp-server-sse&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &amp;lt;version&amp;gt;1.5.3&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-oidc&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-mcp-server-sse&lt;/code&gt; is required to support both MCP Streamable HTTP and SSE transports.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-oidc&lt;/code&gt; is required to secure access to MCP Server endpoints. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-configuration&quot;&gt;&lt;/a&gt;MCP Server Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s configure the MCP server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;# First and default MCP server endpoint that we refer to as `alpha`
# Alternatively, we can have a named `alpha` endpoint, similarly to the second `bravo` endpoint

quarkus.mcp.server.sse.root-path=/mcp &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

# Second MCP server endpoint that is explicitly named as `bravo`

quarkus.mcp.server.bravo.sse.root-path=/bravo/mcp &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

# Require an authenticated access to both Streamable HTTP endpoints

quarkus.http.auth.permission.authenticated.paths=/mcp/*,/bravo/mcp/* &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
quarkus.http.auth.permission.authenticated.policy=authenticated

# Default OIDC tenant that secures the default `alpha` Streamable HTTP endpoint
# Its required `quarkus.oidc.auth-server-url` property is set by Keycloak Dev Service
# and points to the Keycloak `alpha` realm endpoint

quarkus.oidc.tenant-paths=/mcp/* &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
quarkus.oidc.token.audience=quarkus-mcp-alpha &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
quarkus.oidc.resource-metadata.enabled=true &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
quarkus.oidc.resource-metadata.force-https-scheme=false

# `Bravo` OIDC tenant that secures the `bravo` Streamable HTTP endpoint

quarkus.oidc.bravo.auth-server-url=${keycloak.url}/realms/bravo &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
quarkus.oidc.bravo.tenant-paths=/bravo/mcp/* &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
quarkus.oidc.bravo.token.audience=quarkus-mcp-bravo &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
quarkus.oidc.bravo.resource-metadata.enabled=true &lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;(9)&lt;/b&gt;
quarkus.oidc.bravo.resource-metadata.resource=bravo/mcp &lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;(10)&lt;/b&gt;
quarkus.oidc.bravo.resource-metadata.force-https-scheme=false

# Keycloak devservice that supports both the default and `bravo` OIDC tenants.

quarkus.keycloak.devservices.realm-path=alpha-realm.json,bravo-realm.json &lt;i class=&quot;conum&quot; data-value=&quot;11&quot;&gt;&lt;/i&gt;&lt;b&gt;(11)&lt;/b&gt;
quarkus.keycloak.devservices.realm-name=alpha &lt;i class=&quot;conum&quot; data-value=&quot;12&quot;&gt;&lt;/i&gt;&lt;b&gt;(12)&lt;/b&gt;
quarkus.keycloak.devservices.create-client=false &lt;i class=&quot;conum&quot; data-value=&quot;13&quot;&gt;&lt;/i&gt;&lt;b&gt;(13)&lt;/b&gt;

# CORS configuration to allow MCP Inspector&apos;s SPA script calls

quarkus.http.cors.enabled=true
quarkus.http.cors.origins=http://localhost:6274 &lt;i class=&quot;conum&quot; data-value=&quot;14&quot;&gt;&lt;/i&gt;&lt;b&gt;(14)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Root path for the default &lt;code&gt;alpha&lt;/code&gt; MCP server endpoint, with both &lt;em&gt;Streamable HTTP&lt;/em&gt; and SSE endpoints available under this path.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Root path for the &lt;code&gt;bravo&lt;/code&gt; MCP server endpoint, with both &lt;em&gt;Streamable HTTP&lt;/em&gt; and SSE endpoints available under this path.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Require authentication for all requests to the &lt;code&gt;alpha&lt;/code&gt; and &lt;code&gt;bravo&lt;/code&gt; MCP server endpoints. This authentication policy is enforced by the matching OIDC tenant configurations.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Default OIDC tenant secures the default MCP server &lt;code&gt;alpha&lt;/code&gt; endpoint, Keycloak DevService inserts a missing &lt;code&gt;quarkus.oidc.auth-server-url&lt;/code&gt; property that links to the Keycloak &lt;code&gt;alpha&lt;/code&gt; realm endpoint.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Require that tokens that are allowed to access the default MCP server &lt;code&gt;alpha&lt;/code&gt; endpoint must have an audience (&lt;code&gt;aud&lt;/code&gt;) claim that contains a &lt;code&gt;quarkus-mcp-alpha&lt;/code&gt; value.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enable the &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9728&quot;&gt;OAuth2 Protected Resource Metadata&lt;/a&gt; route for the default OIDC tenant. It will help &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; to find out about the authorization server that secures the default MCP server &lt;code&gt;alpha&lt;/code&gt; endpoint.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;OIDC &lt;code&gt;bravo&lt;/code&gt; tenant secures the MCP server &lt;code&gt;bravo&lt;/code&gt; endpoint. Its &lt;code&gt;quarkus.oidc.bravo.auth-server-url&lt;/code&gt; property links to the Keycloak &lt;code&gt;bravo&lt;/code&gt; realm endpoint.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Require that tokens that are allowed to access the MCP server &lt;code&gt;bravo&lt;/code&gt; endpoint must have an audience (&lt;code&gt;aud&lt;/code&gt;) claim that contains a &lt;code&gt;quarkus-mcp-bravo&lt;/code&gt; value.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;9&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enable the &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9728&quot;&gt;OAuth2 Protected Resource Metadata&lt;/a&gt; route for the OIDC &lt;code&gt;bravo&lt;/code&gt; tenant. It will help &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; to find out about the the authorization server that secures the MCP server &lt;code&gt;bravo&lt;/code&gt; endpoint.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;10&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Customize the relative path for &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9728&quot;&gt;OAuth2 Protected Resource Metadata&lt;/a&gt; route for the OIDC &lt;code&gt;bravo&lt;/code&gt; tenant. By default, it is &lt;code&gt;&lt;a href=&quot;http://localhost:8080/bravo&quot; class=&quot;bare&quot;&gt;http://localhost:8080/bravo&lt;/a&gt;&lt;/code&gt;, however, &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; can not find this route and expects &lt;code&gt;&lt;a href=&quot;http://localhost:8080/bravo/mcp&quot; class=&quot;bare&quot;&gt;http://localhost:8080/bravo/mcp&lt;/a&gt;&lt;/code&gt;, so we just tune it a bit to make &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; happy.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;11&quot;&gt;&lt;/i&gt;&lt;b&gt;11&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Ask Keycloak DevService to upload two realms to the Keycloak container, &lt;code&gt;alpha-realm.json&lt;/code&gt; and &lt;code&gt;bravo-realm.json&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;12&quot;&gt;&lt;/i&gt;&lt;b&gt;12&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Keycloak DevService must set the default OIDC tenant properies, we point to &lt;code&gt;alpha-realm.json&lt;/code&gt; for Keycloak DevService to use it to set properties such as &lt;code&gt;quarkus.oidc.auth-server-url&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;13&quot;&gt;&lt;/i&gt;&lt;b&gt;13&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Ask Keycloak not to add &lt;code&gt;quarkus.oidc.client-id&lt;/code&gt;. Using the realm verification keys, the configured audience, expiry checks is sufficient to verify Keycloak JWT access tokens; we also plan to deal with dynamically registered OIDC clients in the next blog post.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;14&quot;&gt;&lt;/i&gt;&lt;b&gt;14&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Allow &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; CORS requests.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can read about how &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9728&quot;&gt;OAuth2 Protected Resource Metadata&lt;/a&gt; is supported in Quarkus OIDC in the &lt;a href=&quot;https://quarkus.io/guides/security-oidc-expanded-configuration#resource-metadata-properties&quot;&gt;Expanded OpenId Connect Configuration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Keycloak &lt;code&gt;alpha&lt;/code&gt; and &lt;code&gt;bravo&lt;/code&gt; realms represent unique, non-intersecting security configurations backed up by Keycloak. Both of these realms are represented by default and &lt;code&gt;bravo&lt;/code&gt; OIDC tenants respectively. Quarkus OIDC uses its &lt;a href=&quot;https://quarkus.io/guides/security-openid-connect-multitenancy#configure-tenant-paths&quot;&gt;path-based tenant resolver&lt;/a&gt; to decide which OIDC tenant should handle the current MCP Server request.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You are welcome to update the default and &lt;code&gt;bravo&lt;/code&gt; OIDC tenant configurations to point to your preferred providers instead of Keycloak, for example, to multiple Entra ID or Auth0 tenants, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please also check the &lt;a href=&quot;#keycloak-vs-github&quot;&gt;Why was Keycloak preferred to GitHub in the demo ?&lt;/a&gt; section about the reasons behind preferring to use Keycloak in this demo, instead of GitHub that was used in the earlier &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/&quot;&gt;Getting ready for secure MCP with Quarkus MCP Server&lt;/a&gt; blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization&quot;&gt;MCP Authorization specification&lt;/a&gt; &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#token-audience-binding-and-validation&quot;&gt;requires&lt;/a&gt; that the token audience is validated. The specification prefers &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8707.html&quot;&gt;OAuth2 Resource Indicators&lt;/a&gt; to control the token audience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, by default, the resource identifier of the default MCP server &lt;code&gt;alpha&lt;/code&gt; endpoint is calculated as &lt;code&gt;&lt;a href=&quot;http://localhost:8080&quot; class=&quot;bare&quot;&gt;http://localhost:8080&lt;/a&gt;&lt;/code&gt; and MCP Inspector includes it as a &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8707.html&quot;&gt;OAuth2 Resource Indicator&lt;/a&gt; &lt;code&gt;resource&lt;/code&gt; parameter in the Keycloak redirect URL. The providers that already support the &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8707.html&quot;&gt;OAuth2 Resource Indicator&lt;/a&gt; specification can add the &lt;code&gt;&lt;a href=&quot;http://localhost:8080&quot; class=&quot;bare&quot;&gt;http://localhost:8080&lt;/a&gt;&lt;/code&gt; resource indicator to the access token&amp;#8217;s audience (&lt;code&gt;aud&lt;/code&gt;) claim.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Keycloak does not support the &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8707.html&quot;&gt;OAuth2 Resource Indicator&lt;/a&gt; specification yet therefore we configure Keycloak to use predefined audience values specific to MCP server &lt;code&gt;alpha&lt;/code&gt; and &lt;code&gt;bravo&lt;/code&gt; endpoints. For our demo, the use of the custom audience values is non-ambiguous and sufficient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When your OAuth2 provider start supporting the &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8707.html&quot;&gt;OAuth2 Resource Indicator&lt;/a&gt; specification, all you need to do to align with the &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization&quot;&gt;MCP Authorization specification&lt;/a&gt;&apos;s requirement to use resource indicators is to update the OIDC tenant token audience configuration to contain an audience such as &lt;code&gt;&lt;a href=&quot;http://localhost:8080&quot; class=&quot;bare&quot;&gt;http://localhost:8080&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also harden it by requiring a token to have both a custom audience value such as &lt;code&gt;quarkus-mcp-alpha&lt;/code&gt; and a resource value such as &lt;code&gt;&lt;a href=&quot;http://localhost:8080&quot; class=&quot;bare&quot;&gt;http://localhost:8080&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-tools&quot;&gt;&lt;/a&gt;MCP User Name Provider tools&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MCP Server has two &lt;em&gt;Streamable HTTP&lt;/em&gt; endpoints. The MCP and security configuration for each of these endpoints allows to group tools, resources and prompts according to specific deployment requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s create two tools that can return a name of the current MCP Client user, one per each endpoint:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package org.acme;

import io.quarkiverse.mcp.server.TextContent;
import io.quarkiverse.mcp.server.Tool;
import io.quarkus.oidc.UserInfo;
import io.quarkus.security.identity.SecurityIdentity;
import jakarta.inject.Inject;
import io.quarkiverse.mcp.server.McpServer;

public class ServerFeatures {

    @Inject
    SecurityIdentity identity; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    @Tool(name = &quot;alpha-user-name-provider&quot;, description = &quot;Provides a name of the current user in the Alpha realm&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    TextContent provideUserName() {
        return new TextContent(identity.getPrincipal().getName());
    }

    @Tool(name = &quot;bravo-user-name-provider&quot;, description = &quot;Provides a name of the current user in the Bravo realm&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    @McpServer(&quot;bravo&quot;)
    TextContent provideUserName2() {
        return new TextContent(identity.getPrincipal().getName());
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Capture a security identity represented by the verified access token&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;alpha-user-name-provider&lt;/code&gt; tool is accessible via the default &lt;em&gt;Streamable HTTP&lt;/em&gt; &lt;code&gt;alpha&lt;/code&gt; endpoint.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;bravo-user-name-provider&lt;/code&gt; tool is accessible via the &lt;code&gt;bravo&lt;/code&gt; &lt;em&gt;Streamable HTTP&lt;/em&gt; endpoint.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both the &lt;code&gt;alpha-user-name-provider&lt;/code&gt; and &lt;code&gt;bravo-user-name-provider&lt;/code&gt; tools are very simple tools designed to show that the identities of MCP client users on whose behalf these tools are called by MCP clients is available to tools to perform a user identity specific action, an important element for a secure agentic AI system. Of course, the real world tool implementations will be more interesting.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;keycloak-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#keycloak-configuration&quot;&gt;&lt;/a&gt;Keycloak Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Keycloak configuration has already been prepared in the &lt;code&gt;alpha-realm.json&lt;/code&gt; and &lt;code&gt;bravo-realm.json&lt;/code&gt; realm files that Keycloak DevService uploads to Keycloak at the start-up time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s have a closer look. Please go to &lt;code&gt;&lt;a href=&quot;http://localhost:8080/q/dev-ui&quot; class=&quot;bare&quot;&gt;http://localhost:8080/q/dev-ui&lt;/a&gt;&lt;/code&gt; and select an &lt;code&gt;OpenId Connect&lt;/code&gt; card:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_server_oauth2/keycloak_admin.png&quot; alt=&quot;Keycloak Admin&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on &lt;code&gt;Keycloak Admin&lt;/code&gt;, login as &lt;code&gt;admin:admin&lt;/code&gt; and check the &lt;code&gt;alpha&lt;/code&gt; and &lt;code&gt;bravo&lt;/code&gt; realm configurations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;alpha-realm.json&lt;/code&gt; has a single &lt;code&gt;alpha-client&lt;/code&gt; client and a single user, &lt;code&gt;alice&lt;/code&gt; with a password &lt;code&gt;alice&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;alpha-client&lt;/code&gt; is a public client because its &lt;code&gt;Client authentication&lt;/code&gt; option is disabled:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_server_oauth2/keycloak_public_client_capability.png&quot; alt=&quot;Public Keycloak Client&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Typically, public SPA applications work with the public clients, to avoid having to deal with managing the confidential client&amp;#8217;s secret.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;alpha-client&lt;/code&gt; is configured to support a callback URL provided by &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_server_oauth2/keycloak_alpha_client_general_settings.png&quot; alt=&quot;Keycloak Alpha Client settings&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;alpha-realm.json&lt;/code&gt; also has a custom &lt;code&gt;quarkus-mcp-alpha&lt;/code&gt; client scope with an audience mapping, and it is assigned to the &lt;code&gt;alfa-client&lt;/code&gt; client. It was done similarly to how it was done in the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-oidc-client/#keycloak-setup&quot;&gt;Use Quarkus MCP client to access secure MCP HTTP server from command line&lt;/a&gt; blog post. We start with creating a &lt;code&gt;quarkus-mcp-server&lt;/code&gt; client scope:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_server_oauth2/keycloak_quarkus_mcp_alpha_scope.png&quot; alt=&quot;Keycloak Client quarkus-mcp-alpha scope&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, we create an audience mapping for this scope:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_server_oauth2/keycloak_quarkus_mcp_alpha_scope_mapping.png&quot; alt=&quot;Keycloak Client quarkus-mcp-alpha scope mapping&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, we assign this client scope as an optional scope to the &lt;code&gt;alpha-client&lt;/code&gt; client:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_server_oauth2/keycloak_alpha_client_scope.png&quot; alt=&quot;Keycloak alpha-client scope assignment&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly, the &lt;code&gt;bravo-realm.json&lt;/code&gt; has a public &lt;code&gt;bravo-client&lt;/code&gt; client, and a single user, &lt;code&gt;jdoe&lt;/code&gt; with a password &lt;code&gt;jdoe&lt;/code&gt;. It also has a custom &lt;code&gt;quarkus-mcp-bravo&lt;/code&gt; client scope with an audience mapping.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both realms have the client scopes with the audience mappings to let users request the correct token audience by configuring a custom scope in the &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt;&apos;s OAuth2 Flow configuration. As implied in the &lt;a href=&quot;#mcp-server-configuration&quot;&gt;MCP Server Configuration&lt;/a&gt;, it will be no longer necessary once the &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8707.html&quot;&gt;OAuth2 Resource Indicator&lt;/a&gt; specification is supported by Keycloak and other providers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;keycloak-vs-github&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#keycloak-vs-github&quot;&gt;&lt;/a&gt;Why was Keycloak preferred to GitHub in the demo ?&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You may be wondering, why did we choose &lt;code&gt;Keycloak&lt;/code&gt; for this demo, instead of &lt;code&gt;GitHub&lt;/code&gt; that we used in the earlier &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/&quot;&gt;Getting ready for secure MCP with Quarkus MCP Server&lt;/a&gt; blog post ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main reason behind this is that the access tokens that are targeting MCP servers are expected to be designed to target MCP servers only. It is a good OAuth2 security recommendation. GitHub access tokens are meant to be used to access GitHub API, on behalf of the logged-in user, at the point where the login has happened, not via an MCP server indirection. For example, Claude AI offers a direct GitHub MCP integration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This consideration applies to other social providers such as Google.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is formally expressed in the &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#access-token-privilege-restriction&quot;&gt;MCP Authorization Access Token Privilege Restriction section&lt;/a&gt;: &lt;code&gt;MCP servers MUST only accept tokens specifically intended for themselves&amp;#8230;&amp;#8203;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also discussed it in the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-client/#access-token-delegation-considerations&quot;&gt;Access Token Delegation Considerations&lt;/a&gt; section of the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-client&quot;&gt;Use Quarkus MCP client to access secure MCP HTTP servers&lt;/a&gt; blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If your MCP server really needs to accept a token that it will not use itself, for example, in order to forward it further downstream, then consider an option of exchanging tokens for the audiences to be correct through the whole distributed token call chain. Please check the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-oidc-client/&quot;&gt;Use Quarkus MCP client to access secure MCP HTTP server from command line&lt;/a&gt; blog post where we use the standard &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8693&quot;&gt;OAuth2 Token Exchange&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;start-mcp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#start-mcp-server&quot;&gt;&lt;/a&gt;Start the MCP server in dev mode&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now let&amp;#8217;s start the MCP server in dev mode:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;mvn quarkus:dev&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_server_oauth2/quarkus_mcp_server_dev_mode.png&quot; alt=&quot;MCP server dev mode&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see that default &lt;em&gt;Streamable HTTP&lt;/em&gt; and SSE endpoints are available at &lt;code&gt;&lt;a href=&quot;http://localhost:8080/mcp&quot; class=&quot;bare&quot;&gt;http://localhost:8080/mcp&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;http://localhost:8080/mcp/sse&quot; class=&quot;bare&quot;&gt;http://localhost:8080/mcp/sse&lt;/a&gt;&lt;/code&gt; respectively, while the &lt;code&gt;bravo&lt;/code&gt; &lt;em&gt;Streamable HTTP&lt;/em&gt; and SSE endpoints are available at &lt;code&gt;&lt;a href=&quot;http://localhost:8080/bravo/mcp&quot; class=&quot;bare&quot;&gt;http://localhost:8080/bravo/mcp&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;http://localhost:8080/bravo/mcp/sse&quot; class=&quot;bare&quot;&gt;http://localhost:8080/bravo/mcp/sse&lt;/a&gt;&lt;/code&gt; respectively.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;start-mcp-inspector&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#start-mcp-inspector&quot;&gt;&lt;/a&gt;Step 2: Use MCP Inspector to access two secure MCP server endpoints&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;start-the-mcp-inspector&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#start-the-mcp-inspector&quot;&gt;&lt;/a&gt;Start the MCP Inspector&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;npx @modelcontextprotocol/inspector@0.16.7&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; provides a very good OAuth2 Flow support, it is still a very active project and at the moment, you may observe &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; failing to connect to the OAuth2 provider in some versions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; v0.16.7 has been proven to connect to Keycloak successfully and therefore we recommend you to use this version when working with this blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are now going to connect to two individual MCP &lt;em&gt;Streamable HTTP&lt;/em&gt; endpoints in turn.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;#demo-flow-diagram&quot;&gt;Demo MCP OAuth2 Flow Diagram&lt;/a&gt; section for an overview of how &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; performs a &lt;code&gt;Connect&lt;/code&gt; request.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please keep your browser&amp;#8217;s &lt;code&gt;Developer Tools Network&lt;/code&gt; tab open if you would like to observe how MCP Inspector probes various MCP server and Keycloak endpoints and eventually succeeds in getting a user logged in and acquiring the access token.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;mcp-inspector-connect-to-alpha&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-inspector-connect-to-alpha&quot;&gt;&lt;/a&gt;Connect to the default MCP Server &lt;code&gt;alpha&lt;/code&gt; endpoint&lt;/h4&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_server_oauth2/mcp_inspector_alpha_connect.png&quot; alt=&quot;MCP Inspector Alpha Connect&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If your browser does not show an &lt;code&gt;OAuth 2.0 Flow&lt;/code&gt; in the &lt;code&gt;Authentication&lt;/code&gt; view in the loaded &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; v0.16.7, try latest Firefox.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Set &lt;code&gt;Transport Type&lt;/code&gt; to &lt;code&gt;Streamable HTTP&lt;/code&gt;, &lt;code&gt;URL&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;http://localhost:8080/mcp&quot; class=&quot;bare&quot;&gt;http://localhost:8080/mcp&lt;/a&gt;&lt;/code&gt; address of the default MCP server &lt;code&gt;alpha&lt;/code&gt; endpoint.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;code&gt;OAuth 2.0 Flow&lt;/code&gt; authentication section, set the &lt;code&gt;Client ID&lt;/code&gt; to &lt;code&gt;alpha-client&lt;/code&gt;, and &lt;code&gt;Scope&lt;/code&gt; to &lt;code&gt;openid quarkus-mcp-alpha&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Requesting an &lt;code&gt;openid&lt;/code&gt; scope is not strictly necessary in this demo, but OpenId Connect providers will not issue an ID token without it, only the access token, and you&amp;#8217;ll likely need an SPA MCP Client to have access to the ID token in prod.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Requesting a &lt;code&gt;quarkus-mcp-alpha&lt;/code&gt; scope is necessary for Keycloak to add a &lt;code&gt;quarkus-mcp-alpha&lt;/code&gt; audience to the access token, please see how the &lt;code&gt;quarkus-mcp-alpha&lt;/code&gt; client scope was created in the &lt;a href=&quot;#keycloak-configuration&quot;&gt;Keycloak Configuration&lt;/a&gt; section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Redirect URI&lt;/code&gt; is preconfigured by &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; and points to the &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt;-managed &lt;code&gt;&lt;a href=&quot;http://localhost:6274/oauth&quot; class=&quot;bare&quot;&gt;http://localhost:6274/oauth&lt;/a&gt;&lt;/code&gt; callback endpoint where Keycloak will redirect the user to after the user login is complete.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now press &lt;code&gt;Connect&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As explained in the the &lt;a href=&quot;#demo-flow-diagram&quot;&gt;Demo MCP OAuth2 Flow Diagram&lt;/a&gt; section, &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; starts by trying to access the default MCP Server &lt;em&gt;Streamable HTTP&lt;/em&gt; &lt;code&gt;alpha&lt;/code&gt; endpoint without a valid token and gets a &lt;code&gt;401 WWW-Authenticate&lt;/code&gt; challenge, with the &lt;code&gt;resource_metadata&lt;/code&gt; parameter pointing to the &lt;code&gt;alpha&lt;/code&gt; endpoint&amp;#8217;s &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9728&quot;&gt;OAuth2 Protected Resource Metadata&lt;/a&gt; route.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; fetches the &lt;code&gt;alpha&lt;/code&gt; endpoint&amp;#8217;s protected resource metadata and finds out that it is secured by the Keycloak&amp;#8217;s &lt;code&gt;alpha&lt;/code&gt; realm.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; now discovers the Keycloak &lt;code&gt;alpha&lt;/code&gt; realm&amp;#8217;s metadata, and redirects you to Keycloak &lt;code&gt;alpha&lt;/code&gt; realm&amp;#8217;s authorization endpoint where you will see a Keycloak &lt;code&gt;Alpha&lt;/code&gt; realm login challenge:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_server_oauth2/alpha_realm_login.png&quot; alt=&quot;Alpha Realm Login&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Login as &lt;code&gt;alice:alice&lt;/code&gt;. Keycloak redirects you back to the &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt;&apos;s &lt;code&gt;&lt;a href=&quot;http://localhost:6274/oauth&quot; class=&quot;bare&quot;&gt;http://localhost:6274/oauth&lt;/a&gt;&lt;/code&gt; endpoint. &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; exchanges the returned &lt;code&gt;code&lt;/code&gt; for tokens and completes the authorization code flow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The access token with a &lt;code&gt;quarkus-mcp-alpha&lt;/code&gt; audience is now available, you can capture it using your browser&amp;#8217;s &lt;code&gt;Web Developer Tools&lt;/code&gt; and decode in JWT.io:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_server_oauth2/alpha_client_jwt.png&quot; alt=&quot;Alpha Client JWT&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; uses this token to let you select and run the &lt;code&gt;alpha-user-name-provider&lt;/code&gt; tool:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_server_oauth2/alpha_tool_run.png&quot; alt=&quot;Alpha Tool Run&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The way &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; was able to acquire the access token, knowing only the OAuth2 Client ID and the MCP server&amp;#8217;s endpoint address was interesting. See the &lt;a href=&quot;#demo-flow-diagram&quot;&gt;Demo MCP OAuth2 Flow Diagram&lt;/a&gt; section for the overview of how the whole OAuth2 flow works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now disconnect MCP Inspector from the MCP Server &lt;code&gt;alpha&lt;/code&gt; endpoint by pressing a &lt;code&gt;Disconnect&lt;/code&gt; button.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;connect-to-the-mcp-server-bravo-endpoint&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#connect-to-the-mcp-server-bravo-endpoint&quot;&gt;&lt;/a&gt;Connect to the MCP Server &lt;code&gt;bravo&lt;/code&gt; endpoint&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Connecting to the MCP Server &lt;code&gt;bravo&lt;/code&gt; endpoint works exactly the same as with the default &lt;code&gt;alpha&lt;/code&gt; endpoint, as explained in the &lt;a href=&quot;#mcp-inspector-connect-to-alpha&quot;&gt;Connect to the default MCP Server &lt;code&gt;alpha&lt;/code&gt; endpoint&lt;/a&gt; section, we only need to use the MCP Server &lt;code&gt;bravo&lt;/code&gt; endpoint related properties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Set &lt;code&gt;Transport Type&lt;/code&gt; to &lt;code&gt;Streamable HTTP&lt;/code&gt;, &lt;code&gt;URL&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;http://localhost:8080/bravo/mcp&quot; class=&quot;bare&quot;&gt;http://localhost:8080/bravo/mcp&lt;/a&gt;&lt;/code&gt; address of the MCP server &lt;code&gt;bravo&lt;/code&gt; endpoint.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;code&gt;OAuth 2.0 Flow&lt;/code&gt; authentication section, set the &lt;code&gt;Client ID&lt;/code&gt; to &lt;code&gt;bravo-client&lt;/code&gt;, and &lt;code&gt;Scope&lt;/code&gt; to &lt;code&gt;openid quarkus-mcp-bravo&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Keep &lt;code&gt;Redirect URI&lt;/code&gt; set to &lt;code&gt;&lt;a href=&quot;http://localhost:6274/oauth&quot; class=&quot;bare&quot;&gt;http://localhost:6274/oauth&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now press &lt;code&gt;Connect&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; starts by trying to access the MCP Server &lt;code&gt;bravo&lt;/code&gt; endpoint without a valid token and gets a &lt;code&gt;401 WWW-Authenticate&lt;/code&gt; challenge, with the &lt;code&gt;resource_metadata&lt;/code&gt; parameter pointing to the `bravo&amp;#8217;s  &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9728&quot;&gt;OAuth2 Protected Resource Metadata&lt;/a&gt; route.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; fetches the &lt;code&gt;bravo&lt;/code&gt; endpoint&amp;#8217;s protected resource metadata and finds out that it is secured by the Keycloak&amp;#8217;s &lt;code&gt;bravo&lt;/code&gt; realm.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt;  now discovers the Keycloak &lt;code&gt;bravo&lt;/code&gt; realm&amp;#8217;s metadata, and redirects you to Keycloak &lt;code&gt;bravo&lt;/code&gt; realm&amp;#8217;s authorization endpoint where you will see a Keycloak &lt;code&gt;Bravo&lt;/code&gt; realm login challenge:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_server_oauth2/bravo_realm_login.png&quot; alt=&quot;Bravo Realm Login&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Login as &lt;code&gt;jdoe:jdoe&lt;/code&gt;. Keycloak redirects you back to the &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt;&apos;s &lt;code&gt;&lt;a href=&quot;http://localhost:6274/oauth&quot; class=&quot;bare&quot;&gt;http://localhost:6274/oauth&lt;/a&gt;&lt;/code&gt; endpoint. &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; exchanges the returned &lt;code&gt;code&lt;/code&gt; for tokens and completes the authorization code flow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The access token with a &lt;code&gt;quarkus-mcp-bravo&lt;/code&gt; audience is now available. &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; uses this token to let you select and run the &lt;code&gt;bravo-user-name-provider&lt;/code&gt; tool:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_server_oauth2/bravo_tool_run.png&quot; alt=&quot;Bravo Tool Run&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;#mcp-inspector-connect-to-alpha&quot;&gt;Connect to the default MCP Server &lt;code&gt;alpha&lt;/code&gt; endpoint&lt;/a&gt; section for more explanations of how &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; manages to connect to the MCP Server endpoint knowing only its URL and the OAuth2 Client ID.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;security-considerations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#security-considerations&quot;&gt;&lt;/a&gt;Security Considerations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main security consideration for secure Quarkus MCP server deployments is to ensure that access tokens have a correct audience, for the MCP Server to assert that the current token is meant to access this MCP server only. MCP Servers that propagate tokens further should consider exchanging such tokens, for a new token to target the downstream service correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A token audience claim can have several values, and it must contain an &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8707.html&quot;&gt;OAuth2 Resource Indicator&lt;/a&gt; that points to a specific HTTP resource location or a custom audience value or both the resource indicator and the custom audience values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One should also consider carefully if an MCP server should enable its &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9728&quot;&gt;OAuth2 Protected Resource Metadata&lt;/a&gt; route which allows a public access to the information about the authorization server that secures this MCP Server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please keep in mind that it might be considered sensitive information, especially when no SPA MCP Client applications are used, when the provider login themes can be customized to make it less obvious to users what is the actual provider that is used to log them in.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog, we used &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector&quot;&gt;MCP Inspector&lt;/a&gt; to demonstrate how MCP Client can use OAuth2 Flow to login users and access secure Quarkus MCP &lt;em&gt;Streamable HTTP&lt;/em&gt; servers, when only an MCP Server address and OAuth2 Client ID can provide enough context for the flow to succeed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also demonstrated how Quarkus MCP Server can &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-mcp-server/dev/index.html#_multiple_server_configurations&quot;&gt;support multiple MCP HTTP configurations&lt;/a&gt; with their own unique security constraints supported with the &lt;a href=&quot;https://quarkus.io/guides/security-openid-connect-multitenancy#configure-tenant-paths&quot;&gt;Quarkus OIDC multi-tenancy resolver&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the next blog post in this series, we will look at how &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#access-token-privilege-restriction&quot;&gt;MCP Authorization&lt;/a&gt; OAuth2 Flow can use OAuth Dynamic Client Registration and how &lt;a href=&quot;https://github.com/quarkiverse/quarkus-oidc-proxy&quot;&gt;Quarkus OIDC Proxy&lt;/a&gt; can play its part in securing Quarkus MCP Servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy, and stay tuned !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 22 Sep 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/secure-mcp-server-oauth2/
            </guid>
            
            
            
            <author>Sergey Beryozkin (https://twitter.com/sberyozkin)</author>
            
        </item>
        
        <item>
            <title>A2A Java SDK: Support for the REST Transport is Now Here</title>
            <link>
                https://quarkus.io/blog/quarkus-a2a-java-0-3-0-beta-release/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we&amp;#8217;ve released A2A Java SDK 0.3.0.Beta1 which introduces support for the HTTP+JSON/REST transport.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our last &lt;a href=&quot;https://quarkus.io/blog/quarkus-a2a-java-0-3-0-alpha-release/&quot;&gt;blog post&lt;/a&gt; covered what&amp;#8217;s new in the 0.3.0 version of the A2A Java SDK. In this post, we&amp;#8217;ll focus on how to make use of the new HTTP+JSON/REST transport for both A2A server agents and clients.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;configuring-an-a2a-server-agent-to-support-the-rest-transport&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configuring-an-a2a-server-agent-to-support-the-rest-transport&quot;&gt;&lt;/a&gt;Configuring an A2A Server Agent to Support the REST Transport&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To enable your A2A server agent to support communication using HTTP+JSON/REST, add the following dependency:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;io.github.a2asdk&lt;/code&gt; &lt;code&gt;groupId&lt;/code&gt; is temporary and will likely change for future releases. Keep an eye on the &lt;code&gt;a2a-java&lt;/code&gt; &lt;a href=&quot;https://github.com/a2aproject/a2a-java/blob/main/README.md&quot;&gt;README&lt;/a&gt; for up-to-date documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.github.a2asdk&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;a2a-java-sdk-reference-rest&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a2a-java-sdk-reference-rest&lt;/code&gt; provides access to the core classes that make up the A2A specification and provides the HTTP endpoints that implement the A2A protocol using the HTTP+JSON/REST transport.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After adding this dependency, simply update your agent card to declare support for this new transport:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@Produces
@PublicAgentCard
public AgentCard agentCard() {
    return new AgentCard.Builder()
             .url(YOUR_HTTP_JSON_URL) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
             .preferredTransport(TransportProtocol.HTTP_JSON.asString()) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
             .additionalInterfaces(List.of(
                     new AgentInterface(TransportProtocol.HTTP_JSON.asString(),
                                        YOUR_HTTP_JSON_URL)
                     ... &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
             ))
             ...
             .build();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is the primary URL for your A2A server agent. This should be the URL for your preferred transport (e.g., &lt;code&gt;&lt;a href=&quot;http://localhost:8080&quot; class=&quot;bare&quot;&gt;http://localhost:8080&lt;/a&gt;&lt;/code&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Your A2A server agent&amp;#8217;s preferred transport, HTTP+JSON/REST in this example.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;additionalInterfaces&lt;/code&gt; can optionally contain an entry for the preferred transport. Any other transports you&amp;#8217;d like to support (e.g., &lt;code&gt;TransportProtocol.JSONRPC.asString()&lt;/code&gt; or &lt;code&gt;TransportProtocol.GRPC.asString()&lt;/code&gt;) can be specified here too.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more details on configuring your A2A server agent to support multiple transports, refer to our previous &lt;a href=&quot;https://quarkus.io/blog/quarkus-a2a-java-0-3-0-alpha-release/&quot;&gt;blog post&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;configuring-an-a2a-client-to-support-the-rest-transport&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configuring-an-a2a-client-to-support-the-rest-transport&quot;&gt;&lt;/a&gt;Configuring an A2A Client to Support the REST Transport&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get your A2A client to communicate using the HTTP+JSON/REST transport, you&amp;#8217;ll need to add a couple
dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, add the &lt;code&gt;a2a-java-sdk-client&lt;/code&gt; dependency to your project. This will provide access to a &lt;code&gt;Builder&lt;/code&gt; that you can use to create your A2A &lt;code&gt;Client&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.github.a2asdk&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;a2a-java-sdk-client&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, add the specific dependency for the HTTP+JSON/REST transport:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.github.a2asdk&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;a2a-java-sdk-client-transport-rest&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now use &lt;code&gt;Client.builder()&lt;/code&gt; to create a &lt;code&gt;Client&lt;/code&gt; that supports the HTTP+JSON/REST transport using the &lt;code&gt;withTransport&lt;/code&gt; method as shown below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;// Create the client using the builder
Client client = Client
        .builder(agentCard)
        .withTransport(RestTransport.class, new RestTransportConfig()) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        ....
        .build();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This specifies that our client can support the HTTP+JSON/REST transport. At least one transport must be configured using the &lt;code&gt;withTransport&lt;/code&gt; method.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a deep dive into creating clients with the &lt;code&gt;Client.Builder&lt;/code&gt;, check out this &lt;a href=&quot;https://quarkus.io/blog/quarkus-a2a-java-0-3-0-alpha-release/&quot;&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the release of A2A Java SDK 0.3.0.Beta1, building flexible, interoperable multi-agent systems just got easier with the new support for the HTTP+JSON/REST transport.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;further-reading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#further-reading&quot;&gt;&lt;/a&gt;Further Reading&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-a2a-java-0-3-0-alpha-release/&quot;&gt;Getting Started with Quarkus and A2A Java SDK 0.3.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/java/agents&quot;&gt;A2A Java SDK Samples&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/a2aproject/a2a-java/blob/main/README.md&quot;&gt;A2A Java SDK Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://a2a-protocol.org/latest/specification/&quot;&gt;A2A Specification&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 18 Sep 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-a2a-java-0-3-0-beta-release/
            </guid>
            
            
            
            <author>Farah Juma (https://twitter.com/farahjuma)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.26.4 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-26-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.26.4, a regular maintenance release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It contains some bug fixes and documentation improvements, as we continue strengthening Quarkus 3.26 to prepare for Quarkus 3.27 LTS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.26, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.26.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.26&quot;&gt;Quarkus 3.26 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.26.4&quot;&gt;3.26.4&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 17 Sep 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-26-4-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Multi-Language Agent Collaboration and Interoperability with A2A</title>
            <link>
                https://quarkus.io/blog/quarkus-a2a-multi-agent-content-creation/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Building a multi-agent system can involve using different languages to meet specific needs. The &lt;a href=&quot;https://a2a-protocol.org/latest/&quot;&gt;Agent2Agent (A2A) protocol&lt;/a&gt; is an open standard that enables AI agents to communicate and collaborate with one another, regardless of each agent&amp;#8217;s underlying technology stack.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post, we&amp;#8217;ll see how to create a multi-agent system, where agents written in Java, Python, and TypeScript work together to accomplish a goal: content creation. The multi-agent system uses A2A for communication between the AI agents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-a2a-multi-agent-content-creation/ContentCreationDiagram.png&quot; alt=&quot;ContentCreationDiagram&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;content-creation-sample&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#content-creation-sample&quot;&gt;&lt;/a&gt;Content Creation Sample&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re going to do a deep dive into the &lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/python/hosts/content_creation&quot;&gt;Content Creation&lt;/a&gt; sample from the &lt;a href=&quot;https://github.com/a2aproject/a2a-samples&quot;&gt;a2a-samples&lt;/a&gt; project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This sample showcases a content creation pipeline with a &lt;code&gt;Host&lt;/code&gt; agent that acts as the central orchestrator,
dynamically routing requests to a set of specialized agents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;agents&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#agents&quot;&gt;&lt;/a&gt;Agents&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a quick overview of all the agents in our multi-agent system:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Agent&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Role&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Technology Stack&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Host&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A2A Client&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Python, Google ADK, A2A Python SDK&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Serves as the central orchestrator, routing requests to the appropriate agent based on the task at hand.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Content Planner&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A2A Server&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Python, Google ADK, A2A Python SDK&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Receives a high-level content request and creates a detailed content outline.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Content Writer&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A2A Server&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java, Quarkus LangChain4j, A2A Java SDK&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Generates engaging content from a content outline.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Content Editor&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A2A Server&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TypeScript, Genkit, A2A JS SDK&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Proofreads and polishes the given content.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the agents are written in different programming languages and make use of different LLM frameworks.
This is to demonstrate what&amp;#8217;s possible with the A2A protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;handling-a-content-creation-request&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#handling-a-content-creation-request&quot;&gt;&lt;/a&gt;Handling a Content Creation Request&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upon receiving a content creation request from the user, the &lt;code&gt;Host&lt;/code&gt; agent breaks down the content creation task
into a few different sub-tasks: planning, writing, and editing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;dynamic-agent-selection&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dynamic-agent-selection&quot;&gt;&lt;/a&gt;Dynamic Agent Selection&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Host&lt;/code&gt; agent uses an LLM and the agent cards from our specialized A2A server agents to determine which agent to assign a particular sub-task to. For example, let&amp;#8217;s take a look at the agent card for our &lt;code&gt;Content Writer&lt;/code&gt; agent:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-json hljs&quot; data-lang=&quot;json&quot;&gt;{
  &quot;name&quot;: &quot;Content Writer Agent&quot;,
  &quot;description&quot;: &quot;An agent that can write a comprehensive and engaging piece of content based on the provided outline and high-level description of the content&quot;,
  &quot;url&quot;: &quot;http://localhost:10002&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;documentationUrl&quot;: &quot;http://example.com/docs&quot;,
  &quot;capabilities&quot;: {
    &quot;streaming&quot;: true,
    &quot;pushNotifications&quot;: false,
    &quot;stateTransitionHistory&quot;: false
  },
  &quot;defaultInputModes&quot;: [
    &quot;text&quot;
  ],
  &quot;defaultOutputModes&quot;: [
    &quot;text&quot;
  ],
  &quot;skills&quot;: [
    {
      &quot;id&quot;: &quot;writer&quot;,
      &quot;name&quot;: &quot;Writes content using an outline&quot;,
      &quot;description&quot;: &quot;Writes content using a given outline and high-level description of the content&quot;,
      &quot;tags&quot;: [
        &quot;writer&quot;
      ],
      &quot;examples&quot;: [
        &quot;Write a short, upbeat, and encouraging twitter post about learning Java. Base your writing on the given outline.&quot;
      ]
    }
  ],
  &quot;supportsAuthenticatedExtendedCard&quot;: false,
  &quot;additionalInterfaces&quot;: [
    {
      &quot;transport&quot;: &quot;JSONRPC&quot;,
      &quot;url&quot;: &quot;http://localhost:10002&quot;
    }
  ],
  &quot;preferredTransport&quot;: &quot;JSONRPC&quot;,
  &quot;protocolVersion&quot;: &quot;0.3.0&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The agent card for an A2A server agent can be found using its Well-Known URI, e.g., for the &lt;code&gt;Content Writer&lt;/code&gt; agent, we can fetch its agent card using &lt;a href=&quot;http://localhost:10002/.well-known/agent-card.json&quot; class=&quot;bare&quot;&gt;http://localhost:10002/.well-known/agent-card.json&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The description and skills specified in the agent card for the &lt;code&gt;Content Writer&lt;/code&gt; agent allow the &lt;code&gt;Host&lt;/code&gt; agent&amp;#8217;s LLM to determine that the writing sub-task should be sent to the &lt;code&gt;Content Writer&lt;/code&gt; agent.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;agent-communication&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#agent-communication&quot;&gt;&lt;/a&gt;Agent Communication&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Host&lt;/code&gt; agent communicates with each A2A server agent using an A2A client. Notice that an A2A client
does not need to be written in the same programming language as an A2A server since all that matters is
that both are using the A2A protocol to communicate with each other.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Later on in this post, we&amp;#8217;ll see how we can easily swap out the TypeScript &lt;code&gt;Content Editor&lt;/code&gt; agent for
an equivalent agent written in Java, highlighting the flexibility and interoperability that&amp;#8217;s made
possible by the A2A protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;running-the-agents&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#running-the-agents&quot;&gt;&lt;/a&gt;Running the Agents&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s get this multi-agent system running locally.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;content-planner&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#content-planner&quot;&gt;&lt;/a&gt;Content Planner&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a terminal:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;cd samples/python/agents/content_planner&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Follow the instructions in the &lt;code&gt;content_planner&lt;/code&gt; &lt;a href=&quot;https://github.com/a2aproject/a2a-samples/blob/main/samples/python/agents/content_planner/README.md&quot;&gt;README.md&lt;/a&gt; to start the &lt;code&gt;Content Planner&lt;/code&gt; agent.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;content-writer&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#content-writer&quot;&gt;&lt;/a&gt;Content Writer&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a terminal:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;cd samples/java/agents/content_writer&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Follow the instructions in the &lt;code&gt;content_writer&lt;/code&gt; &lt;a href=&quot;https://github.com/a2aproject/a2a-samples/blob/main/samples/java/agents/content_writer/README.md&quot;&gt;README.md&lt;/a&gt; to start the &lt;code&gt;Content Writer&lt;/code&gt; agent.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;content-editor&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#content-editor&quot;&gt;&lt;/a&gt;Content Editor&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a terminal:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;cd samples/js/src/agents/content-editor&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Follow the instructions in the &lt;code&gt;content-editor&lt;/code&gt; &lt;a href=&quot;https://github.com/a2aproject/a2a-samples/blob/main/samples/js/src/agents/content-editor/README.md&quot;&gt;README.md&lt;/a&gt; to start the &lt;code&gt;Content Editor&lt;/code&gt; agent.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;host&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#host&quot;&gt;&lt;/a&gt;Host&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a terminal:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;cd samples/python/hosts/content_creation
uv run .&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As mentioned in the agent &lt;code&gt;README.md&lt;/code&gt; files, don&amp;#8217;t forget to create a &lt;code&gt;.env&lt;/code&gt; file for each agent with your
&lt;code&gt;GOOGLE_API_KEY&lt;/code&gt;. This is needed since the agents in this sample make use of Gemini. You can create a
Google AI Studio API Key for free &lt;a href=&quot;https://aistudio.google.com/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;access-the-content-creation-application&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#access-the-content-creation-application&quot;&gt;&lt;/a&gt;Access the Content Creation Application&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that all of our agents are up and running, from your browser, navigate to &lt;a href=&quot;http://localhost:8083&quot; class=&quot;bare&quot;&gt;http://localhost:8083&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Try asking questions like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a short, concise LinkedIn post about getting started with the Agent2Agent protocol&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a short, upbeat X post about Quarkus LangChain4j&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-a2a-multi-agent-content-creation/UI.png&quot; alt=&quot;UI&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;swap-out-an-agent&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#swap-out-an-agent&quot;&gt;&lt;/a&gt;Swap Out an Agent&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the most powerful features of the A2A protocol is its interoperability. Let&amp;#8217;s see this in
action by swapping out the TypeScript-based &lt;code&gt;Content Editor&lt;/code&gt; agent for an equivalent agent written
in Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-a2a-multi-agent-content-creation/ContentCreationSwapped.png&quot; alt=&quot;ContentCreationSwapped&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;stop-the-typescript-content-editor-agent-and-host-agent&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#stop-the-typescript-content-editor-agent-and-host-agent&quot;&gt;&lt;/a&gt;Stop the TypeScript Content Editor Agent and Host Agent&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, stop the &lt;code&gt;Host&lt;/code&gt; agent and the &lt;code&gt;Content Editor&lt;/code&gt; agent so we can swap out the &lt;code&gt;Content Editor&lt;/code&gt; agent for
an equivalent agent written with Java instead of TypeScript.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;start-the-java-content-editor-agent&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#start-the-java-content-editor-agent&quot;&gt;&lt;/a&gt;Start the Java Content Editor Agent&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a terminal:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;cd samples/java/agents/content_editor&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Follow the instructions in the &lt;code&gt;content_editor&lt;/code&gt; &lt;a href=&quot;https://github.com/a2aproject/a2a-samples/blob/main/samples/java/agents/content_editor/README.md&quot;&gt;README.md&lt;/a&gt; to start the &lt;code&gt;Content Editor&lt;/code&gt; agent.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;start-the-host-agent&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#start-the-host-agent&quot;&gt;&lt;/a&gt;Start the Host Agent&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a terminal:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;cd samples/python/hosts/content_creation
uv run .&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;access-the-content-creation-application-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#access-the-content-creation-application-2&quot;&gt;&lt;/a&gt;Access the Content Creation Application&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From your browser, navigate to &lt;a href=&quot;http://localhost:8083&quot; class=&quot;bare&quot;&gt;http://localhost:8083&lt;/a&gt; and try asking some questions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time, the &lt;code&gt;Host&lt;/code&gt; agent will seamlessly use the Java-based &lt;code&gt;Content Editor&lt;/code&gt; agent for editing
content instead of the TypeScript-based &lt;code&gt;Content Editor&lt;/code&gt; agent. This flexibility is made possible
because the A2A protocol is language-agnostic. This can be really useful for prototyping agents
in one language to get things up and running quickly and then migrating to another language for
a production environment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post, we saw how to use the A2A protocol to enable agents written in different programming
languages and with different LLM frameworks to collaborate seamlessly to accomplish a goal. We also
saw how easy it is to swap out one of the agents for an equivalent agent written in a different language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;further-reading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#further-reading&quot;&gt;&lt;/a&gt;Further Reading&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/a2aproject/a2a-samples/blob/main/samples/python/hosts/content_creation/README.md&quot;&gt;Content Creation Sample&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-a2a-java-0-3-0-alpha-release/&quot;&gt;Getting Started with Quarkus and A2A Java SDK 0.3.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/java/agents&quot;&gt;A2A Java SDK Samples&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/a2aproject/a2a-java/blob/main/README.md&quot;&gt;A2A Java SDK Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://a2a-protocol.org/latest/specification/&quot;&gt;A2A Specification&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 15 Sep 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-a2a-multi-agent-content-creation/
            </guid>
            
            
            
            <author>Farah Juma (https://twitter.com/farahjuma)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.26.3 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-26-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.26.3, a regular maintenance release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It contains some bug fixes, CVE fixes and documentation improvements, as we continue strengthening Quarkus 3.26 to prepare for Quarkus 3.27 LTS. 3.27 LTS will be a continuation of the 3.26 branch. See the &lt;a href=&quot;https://quarkus.io/blog/lts-releases/&quot;&gt;blog&lt;/a&gt; for more information about LTS releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.26, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.26.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.26&quot;&gt;Quarkus 3.26 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.26.3&quot;&gt;3.26.3&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 10 Sep 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-26-3-released/
            </guid>
            
            
            
            <author>Jan Martiška (https://twitter.com/janmartiska)</author>
            
        </item>
        
        <item>
            <title>Getting Started with Quarkus and A2A Java SDK 0.3.0</title>
            <link>
                https://quarkus.io/blog/quarkus-a2a-java-0-3-0-alpha-release/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we have released A2A Java SDK 0.3.0.Alpha1, which aligns with the v0.3.0 version of the &lt;a href=&quot;https://github.com/a2aproject/A2A/tree/v0.3.0&quot;&gt;A2A specification&lt;/a&gt;. This &lt;a href=&quot;https://cloud.google.com/blog/products/ai-machine-learning/agent2agent-protocol-is-getting-an-upgrade&quot;&gt;latest version&lt;/a&gt; of the A2A protocol is more stable and introduces new features like support for the gRPC transport.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve made significant changes to the A2A Java SDK to support the new protocol version and improved the user experience for both the client side and server side. In this post, we&amp;#8217;ll cover what&amp;#8217;s changed since our last release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;recap-whats-a2a&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#recap-whats-a2a&quot;&gt;&lt;/a&gt;Recap: What&amp;#8217;s A2A?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before we dive into the details, let&amp;#8217;s quickly recap what &lt;a href=&quot;https://a2a-protocol.org/latest/specification/&quot;&gt;A2A&lt;/a&gt; is. The Agent2Agent (A2A) Protocol is an open standard initially developed by Google and is now part of the Linux Foundation. It enables AI agents to communicate and collaborate with one another, regardless of each agent&amp;#8217;s underlying framework, language, or vendor. This is very important, as it&amp;#8217;s paving the way for polyglot multi-agent systems. The A2A protocol has been gaining a lot of traction since being announced just a few months ago.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new-in-the-a2a-java-sdk&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new-in-the-a2a-java-sdk&quot;&gt;&lt;/a&gt;What&amp;#8217;s new in the A2A Java SDK?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s take a look at what&amp;#8217;s new for both A2A server agents and A2A clients.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;a2a-server-agent-updates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a2a-server-agent-updates&quot;&gt;&lt;/a&gt;A2A Server Agent Updates&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;supported-transports&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#supported-transports&quot;&gt;&lt;/a&gt;Supported Transports&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The A2A Java SDK now supports the gRPC transport protocol in addition to JSON-RPC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To turn your Quarkus application into an A2A server agent, you simply need to add one or more dependencies on our A2A Java SDK Server Reference implementations, depending on the transport(s) you&amp;#8217;d like your agent to support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The A2A Java SDK Server Reference implementations are based on Quarkus. If you&amp;#8217;re not using Quarkus,
check out the &lt;a href=&quot;https://github.com/wildfly-extras/a2a-java-sdk-server-jakarta&quot;&gt;A2A Java SDK for Jakarta Servers&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;io.github.a2asdk&lt;/code&gt; &lt;code&gt;groupId&lt;/code&gt; is temporary and will likely change for future releases. Keep an eye on the &lt;code&gt;a2a-java&lt;/code&gt; &lt;a href=&quot;https://github.com/a2aproject/a2a-java/blob/main/README.md&quot;&gt;README&lt;/a&gt; for up-to-date documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;json-rpc-2-0-transport&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#json-rpc-2-0-transport&quot;&gt;&lt;/a&gt;JSON-RPC 2.0 Transport&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To allow your A2A server agent to support communication using JSON-RPC, add the following dependency:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.github.a2asdk&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;a2a-java-sdk-reference-jsonrpc&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a2a-java-sdk-reference-jsonrpc&lt;/code&gt; provides access to the core classes that make up the A2A specification and provides the HTTP endpoint that implements the A2A protocol using the JSON-RPC transport. If you&amp;#8217;re not using Quarkus, the &lt;code&gt;org.wildfly.a2a:a2a-java-sdk-jakarta-jsonrpc&lt;/code&gt; dependency from the &lt;a href=&quot;https://github.com/wildfly-extras/a2a-java-sdk-server-jakarta&quot;&gt;A2A Java SDK for Jakarta Servers&lt;/a&gt; project can be used instead.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you&amp;#8217;ve added a CDI producer that creates an &lt;code&gt;AgentCard&lt;/code&gt;, the A2A Java SDK will automatically expose your agent card at the server agent&amp;#8217;s &lt;code&gt;.well-known/agent-card.json&lt;/code&gt; URI.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;grpc-transport&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#grpc-transport&quot;&gt;&lt;/a&gt;gRPC Transport&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To allow your A2A server agent to support communication using gRPC, add the following dependency:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.github.a2asdk&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;a2a-java-sdk-reference-grpc&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a2a-java-sdk-reference-grpc&lt;/code&gt; provides access to the core classes that make up the A2A specification and provides the gRPC service that implements the A2A protocol using the gRPC transport. If you&amp;#8217;re not using Quarkus, the &lt;code&gt;org.wildfly.a2a:a2a-java-sdk-jakarta-grpc&lt;/code&gt; dependency from the &lt;a href=&quot;https://github.com/wildfly-extras/a2a-java-sdk-server-jakarta&quot;&gt;A2A Java SDK for Jakarta Servers&lt;/a&gt; project can be used instead.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;multiple-transports&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#multiple-transports&quot;&gt;&lt;/a&gt;Multiple Transports&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can add dependencies on both &lt;code&gt;a2a-java-sdk-reference-jsonrpc&lt;/code&gt; and &lt;code&gt;a2a-java-sdk-reference-grpc&lt;/code&gt; if you&amp;#8217;d like your A2A server agent to be able to communicate with clients using either transport.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Support for the HTTP+JSON/REST transport will also be added to the A2A Java SDK very soon, keep an eye out for that!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;declaring-supported-transports-in-the-agentcard&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#declaring-supported-transports-in-the-agentcard&quot;&gt;&lt;/a&gt;Declaring Supported Transports in the &lt;code&gt;AgentCard&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;AgentCard&lt;/code&gt; is a class that describes the capabilities of an A2A server agent. Other agents or clients will use this to understand what our agent can do. Once you&amp;#8217;ve added one or more dependencies on the A2A Java SDK Server Reference implementations, the next step is to add a class that creates an &lt;code&gt;AgentCard&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When creating your &lt;code&gt;AgentCard&lt;/code&gt;, you must specify the primary endpoint for your A2A server agent and if your server agent supports multiple transports, these need to be specified as additional interfaces in your &lt;code&gt;AgentCard&lt;/code&gt; as shown in the example below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;import io.a2a.server.PublicAgentCard;
import io.a2a.spec.AgentCapabilities;
import io.a2a.spec.AgentCard;
import io.a2a.spec.AgentSkill;
...

@ApplicationScoped
public class WeatherAgentCardProducer {

    @Produces
    @PublicAgentCard
    public AgentCard agentCard() {
        return new AgentCard.Builder()
                .name(&quot;Weather Agent&quot;)
                .description(&quot;Helps with weather&quot;)
                .url(YOUR_JSONRPC_URL) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
                .preferredTransport(TransportProtocol.JSONRPC.asString()) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
                .additionalInterfaces(List.of( &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
                        new AgentInterface(TransportProtocol.JSONRPC.asString(), YOUR_JSONRPC_URL), &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
                        new AgentInterface(TransportProtocol.GRPC.asString(), YOUR_GRPC_URL) &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
                ))
                .version(&quot;1.0.0&quot;)
                .capabilities(new AgentCapabilities.Builder()
                        .streaming(true)
                        .pushNotifications(false)
                        .stateTransitionHistory(false)
                        .build())
                .defaultInputModes(Collections.singletonList(&quot;text&quot;))
                .defaultOutputModes(Collections.singletonList(&quot;text&quot;))
                .skills(Collections.singletonList(new AgentSkill.Builder()
                        .id(&quot;weather_search&quot;)
                        .name(&quot;Search weather&quot;)
                        .description(&quot;Helps with weather in city, or states&quot;)
                        .tags(Collections.singletonList(&quot;weather&quot;))
                        .examples(List.of(&quot;weather in LA, CA&quot;))
                        .build()))
                .protocolVersion(&quot;0.3.0&quot;)
                .build();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The primary endpoint URL for our A2A server agent. &lt;code&gt;YOUR_JSONRPC_URL&lt;/code&gt; should be the URL, as a &lt;code&gt;String&lt;/code&gt;, that is used to access your server agent using JSON-RPC as the transport (e.g., &lt;code&gt;&quot;http://localhost:8080&quot;&lt;/code&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The preferred transport for our A2A server agent, &lt;code&gt;JSON-RPC&lt;/code&gt; in this example. This is the transport protocol available at the primary endpoint URL.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The optional additional interfaces supported by our A2A server agent. This should include all supported transports.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The primary endpoint URL should also be specified here for completeness.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The gRPC transport URL. &lt;code&gt;YOUR_GRPC_URL&lt;/code&gt; should be the URL, as a &lt;code&gt;String&lt;/code&gt;, that is used to access your server agent using gRPC as the transport (e.g., &lt;code&gt;&quot;localhost:8080&quot;&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;a2a-client-updates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a2a-client-updates&quot;&gt;&lt;/a&gt;A2A Client Updates&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To make use of an A2A client using the A2A Java SDK, add the following dependency to your project:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.github.a2asdk&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;a2a-java-sdk-client&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;a2a-java-sdk-client&lt;/code&gt; dependency provides access to a &lt;code&gt;ClientBuilder&lt;/code&gt; that you can use to create your A2A &lt;code&gt;Client&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;supported-transports-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#supported-transports-2&quot;&gt;&lt;/a&gt;Supported Transports&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The A2A Java SDK client implementation now supports the gRPC transport protocol in addition to JSON-RPC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As mentioned previously, support for the HTTP+JSON/REST transport will be coming soon!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;json-rpc-2-0-transport-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#json-rpc-2-0-transport-2&quot;&gt;&lt;/a&gt;JSON-RPC 2.0 Transport&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To allow your client to support the JSON-RPC transport for communication, just &lt;code&gt;a2a-java-sdk-client&lt;/code&gt; is needed. No additional dependencies need to be manually added to your project.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;grpc-transport-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#grpc-transport-2&quot;&gt;&lt;/a&gt;gRPC Transport&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To allow your client to support the gRPC transport for communication, simply add the following dependency to your project:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.github.a2asdk&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;a2a-java-sdk-client-transport-grpc&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;creating-a-client&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#creating-a-client&quot;&gt;&lt;/a&gt;Creating a &lt;code&gt;Client&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An A2A &lt;code&gt;Client&lt;/code&gt; can now be created using a &lt;code&gt;ClientBuilder&lt;/code&gt;. The &lt;code&gt;ClientBuilder&lt;/code&gt; will select the appropriate transport protocol to use based on information obtained from the &lt;code&gt;AgentCard&lt;/code&gt; for the A2A server agent that this client will be communicating with, also taking into account client-specified transport configuration. The &lt;code&gt;ClientBuilder&lt;/code&gt; will then create a &lt;code&gt;Client&lt;/code&gt; that will use the selected transport to communicate with the A2A server and the &lt;code&gt;Client&lt;/code&gt; will also make use of any other client-specified configuration like whether to use streaming (&lt;code&gt;true&lt;/code&gt; by default), accepted output modes, history length for messages, and so on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We want to give a shoutout to David Brassely, one of our community contributors, for working with us on improving the &lt;code&gt;Client&lt;/code&gt; creation experience!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s take a look at an example to see how a &lt;code&gt;Client&lt;/code&gt; can now be created using the &lt;code&gt;ClientBuilder&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;// First, get the agent card for the A2A server agent you want to connect to
AgentCard agentCard = new A2ACardResolver(&quot;http://localhost:1234&quot;).getAgentCard();

// Specify general client configuration and preferences for the ClientBuilder
ClientConfig clientConfig = new ClientConfig.Builder()
        .setAcceptedOutputModes(List.of(&quot;text&quot;))
        ...
        .build();

// Create event consumers to handle responses that will be received from the A2A server
// (these consumers will be used for both streaming and non-streaming responses)
List&amp;lt;BiConsumer&amp;lt;ClientEvent, AgentCard&amp;gt;&amp;gt; consumers = List.of(
    (event, card) -&amp;gt; {
        if (event instanceof MessageEvent messageEvent) {
            // handle the messageEvent.getMessage()
            ...
        } else if (event instanceof TaskEvent taskEvent) {
            // handle the taskEvent.getTask()
            ...
        } else if (event instanceof TaskUpdateEvent updateEvent) {
            // handle the updateEvent.getTask()
            ...
        }
    }
);

// Create a handler that will be used for any errors that occur during streaming
Consumer&amp;lt;Throwable&amp;gt; errorHandler = error -&amp;gt; {
    // handle the error.getMessage()
    ...
};

// Optional: Create a channel factory function that takes the agent URL and returns a Channel for gRPC
Function&amp;lt;String, Channel&amp;gt; channelFactory = agentUrl -&amp;gt; {
    return ManagedChannelBuilder.forTarget(agentUrl)
            ...
            .build();
};

// Create the client using the builder
Client client = Client
        .builder(agentCard)
        .clientConfig(clientConfig)
        .withTransport(JSONRPCTransport.class, new JSONRPCTransportConfig()) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        .withTransport(GrpcTransport.class, new GrpcTransportConfig(channelFactory)) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        .addConsumers(consumers)
        .streamingErrorHandler(errorHandler)
        .build();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This specifies that our client can support the &lt;code&gt;JSON-RPC&lt;/code&gt; transport. At least one transport must be configured using the &lt;code&gt;withTransport&lt;/code&gt; method.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This specifies that our client can support the &lt;code&gt;gRPC&lt;/code&gt; transport.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once created, the &lt;code&gt;Client&lt;/code&gt; can be used to send messages, get the current state of a task, cancel an ongoing task, get, set, and delete push notification configuration, and resubscribe to a task.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve taken a look at the key updates in A2A Java SDK 0.3.0, including the new gRPC transport and changes to how you configure both A2A server agents and A2A clients. To quickly get started creating your own A2A agents with Quarkus, check out the resources below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;further-reading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#further-reading&quot;&gt;&lt;/a&gt;Further Reading&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/java/agents&quot;&gt;A2A Java SDK Samples&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/a2aproject/a2a-java/blob/main/README.md&quot;&gt;A2A Java SDK Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://a2a-protocol.org/latest/specification/&quot;&gt;A2A Specification&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 04 Sep 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-a2a-java-0-3-0-alpha-release/
            </guid>
            
            
            
            <author>Farah Juma (https://twitter.com/farahjuma)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.26.2 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-26-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.26.2, a regular maintenance release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It contains some bug fixes and documentation improvements, as we continue strengthening Quarkus 3.26 to prepare for Quarkus 3.27 LTS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.26, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.26.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.26&quot;&gt;Quarkus 3.26 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.26.2&quot;&gt;3.26.2&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 03 Sep 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-26-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.26.1, 3.20.2.2 and 3.15.6.2 - Emergency releases</title>
            <link>
                https://quarkus.io/blog/quarkus-3-26-1-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.26.1, 3.20.2.2 and 3.15.6.2 to fix an important regression introduced in Vert.x 4.5.18.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A regression in Vert.x introduced in 4.5.18 can lead to a pool HTTP client connection that does not have a correct state and stop making progress when receiving bytes,
so the application will not observe the entirety of the HTTP response and therefore hang when receiving the data.
It also means that clients of the library might not obtain a connection in a timely manner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It has been &lt;a href=&quot;https://github.com/eclipse-vertx/vert.x/pull/5683&quot;&gt;fixed&lt;/a&gt; in Vert.x 4.5.20 and we decided to push emergency releases for our current and LTS streams to promptly address the issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We recommend upgrading to these releases without delay if you are using a Quarkus version based on Vert.x 4.5.18 (i.e. 3.26.0, 3.25.4, 3.20.2.1, and 3.15.6.1).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.26.1 also contains some other unrelated fixes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.26, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.26.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.26&quot;&gt;Quarkus 3.26 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.26.1&quot;&gt;3.26.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;3.20.2.2 and 3.15.6.2 only contain the Vert.x update to 4.5.20.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Fri, 29 Aug 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-26-1-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.26 - Hibernate updates, named persistence units in Hibernate Reactive, Dev UI as MCP functions, and more.</title>
            <link>
                https://quarkus.io/blog/quarkus-3-26-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.26 is an important milestone towards our next LTS release:
it marks the feature freeze for Quarkus 3.27 LTS, which will be based on 3.26 and released at the end of September.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We urge you to upgrade to this release and report any issues you may find, so we can address them before the LTS release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.26 introduces the following notable changes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/49429&quot;&gt;#49429&lt;/a&gt; - Update to Hibernate ORM 7.1, Hibernate Search 8.1, and Hibernate Reactive 3.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/48007&quot;&gt;#48007&lt;/a&gt; - Support named persistence units and data sources in Hibernate Reactive&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/49408&quot;&gt;#49408&lt;/a&gt; - Offline startup and dialect configuration for Hibernate ORM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/49165&quot;&gt;#49165&lt;/a&gt; - Dev UI HQL console redesign + Hibernate Assistant functionality&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47414&quot;&gt;#47414&lt;/a&gt; - Expose Dev UI&amp;#8217;s capabilities as MCP functions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/49003&quot;&gt;#49003&lt;/a&gt; - OIDC Client filter - allow to trigger token refresh when REST client request results in 401&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/49042&quot;&gt;#49042&lt;/a&gt; - Support for customizing request and response body in OIDC filters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/48687&quot;&gt;#48687&lt;/a&gt; - Add functionality to capture Quarkus application runtime data using JFR extension&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/49256&quot;&gt;#49256&lt;/a&gt; - Bump Gradle version to 9.0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition, Quarkus 3.26 drops support for legacy config classes entirely, so make sure you update your third-party extensions to the latest,
as their new versions should already have been moved to &lt;code&gt;@ConfigMapping&lt;/code&gt; interfaces.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.26, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.26.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.26&quot;&gt;Quarkus 3.26 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hibernate&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hibernate&quot;&gt;&lt;/a&gt;Hibernate&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Hibernate extensions got several improvements in this release:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We updated to Hibernate ORM 7.1, Hibernate Search 8.1, and Hibernate Reactive 3.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Hibernate Reactive extension now supports named persistence units and data sources - which was a long-awaited feature&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Hibernate ORM extension now supports offline startup and dialect configuration - which allows to start up even if the database is not reachable at startup time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Dev UI HQL console has been redesigned and now includes Hibernate Assistant functionality: we are looking forward to your feedback on this new feature!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dev-ui&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dev-ui&quot;&gt;&lt;/a&gt;Dev UI&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apart from the improvements mentioned above, we started exposing the Dev UI&amp;#8217;s capabilities as MCP functions,
meaning you can now pilot the Dev UI from your favorite AI tooling.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;oidc&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#oidc&quot;&gt;&lt;/a&gt;OIDC&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The OIDC extension now allows to trigger token refresh when a REST client request results in 401.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, you can now customize the request and response body in OIDC filters.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jfr&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jfr&quot;&gt;&lt;/a&gt;JFR&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using the JFR extension, you can now capture Quarkus application runtime data such as application name, application version, and the list of active extensions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;gradle&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#gradle&quot;&gt;&lt;/a&gt;Gradle&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Gradle version used by default when creating a new project has been bumped to 9.0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gradle 8.14 is still supported but some earlier 8.x versions might not work anymore, due to the changes we made to support Gradle 9.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-langchain4j&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-langchain4j&quot;&gt;&lt;/a&gt;Quarkus LangChain4j&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus LangChain4j was updated to 1.1.2.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been upgraded to &lt;a href=&quot;https://camel.apache.org/blog/2025/08/camel-quarkus-3.26.0/&quot;&gt;3.26.0&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-cxf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-cxf&quot;&gt;&lt;/a&gt;Quarkus CXF&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus CXF has been upgraded to 3.26.1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Release notes are available for:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.26.0.html&quot;&gt;3.26.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.26.1.html&quot;&gt;3.26.1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.26.0.CR1&quot;&gt;3.26.0.CR1&lt;/a&gt; and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.26.0&quot;&gt;3.26.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1115&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.26 release, thanks to Alex Bevilacqua, Alexey Loubyansky, Ali Hamzayev, Andy Damevin, ayagmar, Ayden Chance, azerr, Bruno Baptista, Chihiro Ito, Chris Laprun, Christian Beikov, Clement Escoffier, David M. Lloyd, Erik Mattheis, Fouad Almalki, George Gastaldi, Georgios Andrianakis, Guillaume Nodet, Guillaume Smet, Holly Cummins, Ioannis Canellos, Jakub Jedlicka, Jan Martiska, Jonathan Dowland, Joseph Zhang, Julien Ponge, Justin Bertram, Karm Michal Babacek, Katia Aresti, Ladislav Thon, Lars Andringa, Luca Molteni, Marco Belladelli, marko-bekhta, Martin Bartoš, Martin Kouba, Matheus Cruz, Michael Edgar, Michal Vavřík, Mikhail Polivakha, mposolda, Pavel Rappo, Phillip Krüger, Roberto Cortez, Rolfe Dlugy-Hegwer, Rostislav Svoboda, Sanne Grinovero, Sebastian Zieja, Sergey Beryozkin, Severin Gehwolf, shjones, Stéphane Épardaud, Teymur Babayev, viktor, Vincent Sevel, xstefank, and Yoann Rodière.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 28 Aug 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-26-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.25.4 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-25-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.25.4, the fourth maintenance release for our 3.25 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Amongst other fixes, this release addresses &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2025-55163&quot;&gt;CVE-2025-55163&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.25, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.25.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.25&quot;&gt;Quarkus 3.25 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.25.4&quot;&gt;3.25.4&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 20 Aug 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-25-4-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>CVE emergency fixes - August 2025</title>
            <link>
                https://quarkus.io/blog/cve-fixes-aug-2025/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released two emergency releases for LTS branches - Quarkus 3.15.6.1 and 3.20.2.1 to address
&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2025-55163&quot;&gt;CVE-2025-55163&lt;/a&gt;.
The fix mitigates a vulnerability affecting the Quarkus HTTP/2 transport.
Furthermore, 3.20.2.1 fixes a recent &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/49133&quot;&gt;regression in context propagation behavior&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are using these versions and the mentioned components, the update is recommended.
The fix will be also included in the upcoming 3.26.0 and 3.25.4 releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 18 Aug 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/cve-fixes-aug-2025/
            </guid>
            
            
            
            <author>Jan Martiška (https://twitter.com/janmartiska)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #59 - August</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-59/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Learn how to integrate LangChain4j with Quarkus MCP for building intelligent assistants using tools and natural language queries with Omozegie Aziegbe&amp;#8217;s blog article &quot;LangChain4j Quarkus MCP Example&quot;. Read &quot;Create a Java REST API with Quarkus and Eclipse JNoSQL for MongoDB&quot; by Otavio Santana to learn how to create a RESTful API using Quarkus and integrate it with Eclipse JNoSQL to work with MongoDB. Learn how to create a simple RESTful Java AI application that asks a large language model (LLM) to write a short poem based on a topic provided by the application user in Laura Cowen&amp;#8217;s article &quot;Create your first AI Java application with Quarkus and LangChain4j&quot;. &quot;Building a CLI with Quarkus, Kotlin and GraalVM&quot; by Maarten Mulders is a great guide that covers project setup, dependency injection, PicoCLI integration, and proven practices for developer productivity, automation, and modern software development. Learn out to combine K-Means clustering, a local LLM, and Quarkus to transform image uploads into beautiful, named color palettes with &quot;Color Whisperer: Build a Java App That Sees the Soul of Your Images&quot; by Markus Eisele. See how to create a summarizing agent that speaks the A2A protocol and harnesses local or cloud LLMs in Markus Eisele&amp;#8217;s &quot;Build Your First AI Agent in Java: Quarkus, Langchain4j, and the A2A SDK&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/59/&quot;&gt;Newsletter #59: August&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 13 Aug 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-59/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.25.3 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-25-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.25.3, the third maintenance release for our 3.25 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also released Quarkus 3.26.0.CR1, the first release candidate for 3.26 and it also marks the feature freeze for the upcoming 3.27 LTS,
as 3.27 LTS will be branched off from 3.26.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.25, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.25.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.25&quot;&gt;Quarkus 3.25 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.25.3&quot;&gt;3.25.3&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 13 Aug 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-25-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.25.2 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-25-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.25.2, the second maintenance release for our 3.25 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.25, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.25.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.25&quot;&gt;Quarkus 3.25 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.25.2&quot;&gt;3.25.2&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Fri, 08 Aug 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-25-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.25.1 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-25-1-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.25.1, the first maintenance release for our 3.25 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.25, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.25.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.25&quot;&gt;Quarkus 3.25 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.25.1&quot;&gt;3.25.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 06 Aug 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-25-1-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.25 - Virtual threads for GraphQL, Micrometer update and various new security-related features</title>
            <link>
                https://quarkus.io/blog/quarkus-3-25-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.25 with the following significant new features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47802&quot;&gt;#47802&lt;/a&gt; - Virtual threads support for SmallRye GraphQL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/48482&quot;&gt;#48482&lt;/a&gt; - Security - Provide a fluent API to set up path-specific authorization programmatically&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/48296&quot;&gt;#48296&lt;/a&gt; - OIDC Client: Add periodic asynchronous tokens refresh for performance critical applications&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/48734&quot;&gt;#48734&lt;/a&gt; - Support for OAuth2 Protected Resource Metadata&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are now preparing 3.26, which will be the base for our new LTS, 3.27 LTS.
The feature freeze for the next LTS is on August 12th.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.25, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.25.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.25&quot;&gt;Quarkus 3.25 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;virtual-threads-support-for-smallrye-graphql&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#virtual-threads-support-for-smallrye-graphql&quot;&gt;&lt;/a&gt;Virtual threads support for SmallRye GraphQL&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have had a Quarkus virtual threads story for a long time:
Quarkus 3.6 introduced virtual threads support for Quarkus REST.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since then, a lot more features got support for virtual threads added e.g. Quarkus Messaging, gRPC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Quarkus 3.25, we introduce the support of virtual threads in the &lt;a href=&quot;https://quarkus.io/guides/smallrye-graphql#runonvirtualthread&quot;&gt;SmallRye GraphQL extension&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;security&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#security&quot;&gt;&lt;/a&gt;Security&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;fluent-api-to-set-up-path-specific-authorization&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fluent-api-to-set-up-path-specific-authorization&quot;&gt;&lt;/a&gt;Fluent API to set up path-specific authorization&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To defined path-specific authorization, you previously had to use configuration properties such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.http.auth.permission.permit1.paths=/public/*
quarkus.http.auth.permission.permit1.policy=permit
quarkus.http.auth.permission.permit1.methods=GET

quarkus.http.auth.permission.deny1.paths=/forbidden
quarkus.http.auth.permission.deny1.policy=deny

quarkus.http.auth.permission.roles1.paths=/roles-secured/*,/other/*,/api/*
quarkus.http.auth.permission.roles1.policy=role-policy1
quarkus.http.auth.policy.role-policy1.roles-allowed=user,admin&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is still a possibility but you now also have the option to use a programmatic API if it is more convenient for you.
For instance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public class HttpSecurityConfiguration {
    void configure(@Observes HttpSecurity httpSecurity) {
        httpSecurity
                .get(&quot;/public/*&quot;).permit()
                .path(&quot;/roles-secured/*&quot;, &quot;/other/*&quot;, &quot;/api/*&quot;).roles(&quot;admin&quot;, &quot;user&quot;)
                .path(&quot;/forbidden&quot;).authorization().deny();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;periodic-asynchronous-tokens-refresh&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#periodic-asynchronous-tokens-refresh&quot;&gt;&lt;/a&gt;Periodic asynchronous tokens refresh&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The OIDC Client currently refreshes the token during the current request execution,
which might be impractical for high performance applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.25 introduces the ability to refresh the tokens in the background by using the &lt;code&gt;quarkus.oidc-client.refresh-interval&lt;/code&gt; configuration property.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;support-for-oauth2-protected-resource-metadata&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#support-for-oauth2-protected-resource-metadata&quot;&gt;&lt;/a&gt;Support for OAuth2 Protected Resource Metadata&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.25 adds initial support for &lt;a href=&quot;https://datatracker.ietf.org/doc/rfc9728/&quot;&gt;RFC 9728&amp;#8217;s OAuth 2.0 Protected Resource Metadata&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See our &lt;a href=&quot;https://quarkus.io/guides/security-oidc-expanded-configuration#resource-metadata-properties&quot;&gt;documentation&lt;/a&gt; for all the details about this new feature.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;legacy-config-classes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#legacy-config-classes&quot;&gt;&lt;/a&gt;Legacy config classes&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have started sunsetting the legacy config classes support and, with 3.25, you can&amp;#8217;t build an extension using legacy config classes anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 3.26, the support for legacy config classes will be entirely dropped from Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-langchain4j&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-langchain4j&quot;&gt;&lt;/a&gt;Quarkus LangChain4j&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus LangChain4j is now part of the Quarkus Platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first version of Quarkus LangChain4j we included is &lt;code&gt;1.1.0&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been upgraded to 3.25.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.25.0.CR1&quot;&gt;3.25.0.CR1&lt;/a&gt; and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.25.0&quot;&gt;3.25.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1103 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.25 release, thanks to Alex Martel, Alexey Loubyansky, Anis Ikram, Antonio Macrì, Blaz Mrak, Bruno Baptista, Chris Laprun, Christian, Christian Beikov, Clement Escoffier, comrt, David M. Lloyd, Erik Mattheis, Foivos Zakkak, Fouad Almalki, Francesco Nigro, George Gastaldi, Georgios Andrianakis, Guillaume LECLERC, Guillaume Smet, Holly Cummins, Ilya Korennoy, Inaki Villar, Ivan Petkov, Izziizzi-ux, James Netherton, Jan Martiska, Jonathan Dowland, Julien Ponge, Katia Aresti, Kevin Wooten, Ladislav Thon, Lars Andringa, Lorenzo Vannucchi, Marco Belladelli, Marco Bungart, marko-bekhta, Martin Bartoš, Martin Kouba, Matej Novotny, Matej Vašek, Matheus Oliveira da Silva, Max Rydahl Andersen, melloware, Michal Vavřík, Nicola Concetti, Ozan Gunalp, Paulo Casaes, Peter Palaga, Phillip Krüger, Pierre Beitz, Ramon Boss, Robert Pospisil, Roberto Cortez, Rostislav Svoboda, Sebastian Zieja, Sergey Beryozkin, Severin Gehwolf, Sopka, Stéphane Épardaud, Teymur Babayev, Thomas Canava, Vincent Sevel, and Yoann Rodière.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 30 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-25-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Use Quarkus MCP client to access secure MCP HTTP server from command line</title>
            <link>
                https://quarkus.io/blog/secure-mcp-oidc-client/
            </link>
            <description>
                &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-client/&quot;&gt;Use Quarkus MCP client to access secure MCP HTTP servers&lt;/a&gt; blog post, we explained how a user can login to Quarkus LangChain4j AI server application with GitHub OAuth2 and have Google AI Gemini use &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html&quot;&gt;Quarkus MCP Client&lt;/a&gt; to access a secure &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server&quot;&gt;Quarkus MCP Server&lt;/a&gt; user name provider tool with a GitHub access token.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, not every AI service application is going to be designed to require a user login: for example, it may run as a command line application or cron scheduler. But also, not every AI service application that requires a user login will be able to use a user login token to access a secure MCP server because such a server may only support tokens of different type.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, we will explain how &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html&quot;&gt;Quarkus MCP Client&lt;/a&gt; that runs in a command line Quarkus LangChain4j AI application can itself acquire an access token using an OAuth2 &lt;code&gt;client_credentials&lt;/code&gt; grant and use it to access a secure &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server&quot;&gt;Quarkus MCP Server&lt;/a&gt; service account name provider tool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will work with &lt;a href=&quot;https://www.keycloak.org/&quot;&gt;Keycloak&lt;/a&gt; and rely on it to demonstrate how to approach securing complex, distributed AI applications that may span multiple security boundaries, by requiring that access tokens are restricted to specific audiences, and exchanging them to acquire new, correct audiences.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;demo-architecture&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#demo-architecture&quot;&gt;&lt;/a&gt;Demo architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_client/demo-architecture.png&quot; alt=&quot;Command Line Poem Service Architecture&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see in the diagram above, a command line agent uses a &lt;code&gt;Poem Service&lt;/code&gt; AI service to create a poem. The &lt;code&gt;Poem Service&lt;/code&gt; uses &lt;code&gt;AI Gemini&lt;/code&gt; and requests &lt;code&gt;MCP Client&lt;/code&gt; to complete a tool call to help &lt;code&gt;AI Gemini&lt;/code&gt; to find out the service account name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MCP client must use an access token. It uses an OAuth2 &lt;code&gt;client_credential&lt;/code&gt; grant to acquire a service account token and propagate it to the secure MCP server. This service account token&amp;#8217;s audience restricts it to accessing the MCP server only.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MCP server tool implementation must access a REST server to complete the tool action. However, it can not use the current access token that is restricted to accessing this MCP server because the REST server accepts tokens that are meant to access this REST server only.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, the MCP server exchanges the current token to set the REST server audience before propagating it, with the REST server successfully completing the secure tool call, with the response returned to the MCP Client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are now ready to start working on the demo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find the complete project source in the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-cmd-client-server&quot;&gt;Quarkus LangChain4j Command Line Secure MCP Client Server sample&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-mcp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-mcp-server&quot;&gt;&lt;/a&gt;Step 1 - Create and start MCP server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let&amp;#8217;s create a secure Quarkus MCP SSE server that can enforce an authenticated access to its tool, verify that the access token has a correct audience, and complete a tool action by exchanging the current access token for a new access token with the REST server audience and propagating this token to the REST server to get the required service account name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-dependencies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-dependencies&quot;&gt;&lt;/a&gt;MCP server maven dependencies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the following dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.mcp&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-mcp-server-sse&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &amp;lt;version&amp;gt;1.4.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-oidc&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-rest&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-rest-client-oidc-token-propagation&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-mcp-server-sse&lt;/code&gt; is required to support MCP Streamable HTTP and SSE transports.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-oidc&lt;/code&gt; is required to secure access to MCP SSE endpoints. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-rest&lt;/code&gt; is required to support REST server that the MCP tool has to call. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-rest-client-oidc-token-propagation&lt;/code&gt; also brings &lt;code&gt;quarkus-rest-client&lt;/code&gt; and is required to support a REST client call to REST server with the token exchange and propagation. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-tool&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-tool&quot;&gt;&lt;/a&gt;MCP Service Account Name Tool&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s create a tool that can return a name of the current service account.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import org.eclipse.microprofile.rest.client.inject.RestClient;
import io.quarkiverse.mcp.server.TextContent;
import io.quarkiverse.mcp.server.Tool;
import jakarta.inject.Inject;

public class ServiceAccountNameProvider { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    @RestClient
    @Inject
    ServiceAccountNameRestClient serviceAccountNameRestClient; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

    @Tool(name = &quot;sevice-account-name-provider&quot;, description = &quot;Provides a name of the current service account&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    TextContent provideServiceAccountName() {
        return new TextContent(serviceAccountNameRestClient.getServiceAccountName()); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Provide a tool that can return a name of the current service account.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use an injected &lt;code&gt;ServiceAccountNameRestClient&lt;/code&gt; to access the REST server to complete the service account name request. See the &lt;a href=&quot;#service-account-name-rest-client&quot;&gt;Service Account Name REST client&lt;/a&gt; section below for more details.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MCP server tool can be invoked only if the current MCP request is authenticated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post we do not enforce the secure tool access with annotations such as &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-client/#mcp-server-tool&quot;&gt;@PermissionAllowed&lt;/a&gt; or &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/#tool&quot;&gt;@Authenticated&lt;/a&gt; but only use the HTTP security policy configuration instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See how both main MCP SSE and tool endpoints are secured in the &lt;a href=&quot;#mcp-server-configuration&quot;&gt;MCP Server Configuration&lt;/a&gt; section below.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;service-account-name-rest-client&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#service-account-name-rest-client&quot;&gt;&lt;/a&gt;Service Account Name REST client&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;#mcp-server-tool&quot;&gt;MCP Service Account Name Tool&lt;/a&gt; uses the Service Account Name REST client to call the REST server to complete a service account name request.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This REST client looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;
import io.quarkus.oidc.token.propagation.common.AccessToken;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Produces;

@RegisterRestClient
@AccessToken &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
public interface ServiceAccountNameRestClient {

    @GET
    @Produces(&quot;text/plain&quot;)
    String getServiceAccountName(); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Get a service account name from the REST server. See the &lt;a href=&quot;#service-account-name-rest-server&quot;&gt;Service Account Name REST server&lt;/a&gt; section below for more details.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use &lt;code&gt;@AccessToken&lt;/code&gt; annotation to require the access token exchange and propagation. This single &lt;code&gt;@AccessToken&lt;/code&gt; annotation, supported by an additional configuration in the &lt;a href=&quot;#mcp-server-configuration&quot;&gt;MCP Server Configuration&lt;/a&gt; section below, is all that is required to support this complex access token flow.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;service-account-name-rest-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#service-account-name-rest-server&quot;&gt;&lt;/a&gt;Service Account Name REST server&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;#mcp-server-tool&quot;&gt;MCP Service Account Name Tool&lt;/a&gt; uses the &lt;a href=&quot;#service-account-name-rest-client&quot;&gt;Service Account Name REST client&lt;/a&gt; to get a service account name from the Service Account Name REST server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This REST server looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import io.quarkus.security.Authenticated;
import io.quarkus.security.identity.SecurityIdentity;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;

@Path(&quot;/service-account-name&quot;)
public class ServiceAccountNameRestServer {

    @Inject
    SecurityIdentity securityIdentity;

    @GET
    @Produces(&quot;text/plain&quot;)
    @Authenticated &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    public String getServiceAccountName() {
        return securityIdentity.getPrincipal().getName(); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Provide a secure REST resource method that can return a service account name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use an injected &lt;code&gt;SecurityIdentity&lt;/code&gt; to complete the method&amp;#8217;s task, in this case - return a service account identity name.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this demo, the REST server is collocated with the MCP server to simplify the demo. Of course, in production, such REST servers will most likely be remote.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, let&amp;#8217;s have a look, in the &lt;a href=&quot;#mcp-server-configuration&quot;&gt;MCP Server Configuration&lt;/a&gt; section, how access to both the &lt;a href=&quot;#mcp-server-tool&quot;&gt;MCP Service Account Name Tool&lt;/a&gt; and this server is restricted to tokens with specific audiences only.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-configuration&quot;&gt;&lt;/a&gt;MCP Server Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s configure our secure MCP server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;# MCP server
quarkus.mcp.server.server-info.name=Service Account Name Provider &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
quarkus.mcp.server.traffic-logging.enabled=true
quarkus.mcp.server.traffic-logging.text-limit=1000

# Require an authenticated access to MCP server
quarkus.http.auth.permission.authenticated.paths=/mcp/* &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
quarkus.http.auth.permission.authenticated.policy=authenticated

# Default Quarkus OIDC tenant that verifies access tokens which reach the MCP server.
quarkus.oidc.client-id=quarkus-mcp-server &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
quarkus.oidc.token.audience=quarkus-mcp-server &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

# Request a token exchange before the token propagation
quarkus.rest-client-oidc-token-propagation.exchange-token=true &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

# OIDC client that performs the current token exchange
quarkus.oidc-client.auth-server-url=${quarkus.oidc.auth-server-url} &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
quarkus.oidc-client.client-id=${quarkus.oidc.client-id}
quarkus.oidc-client.credentials.secret=${quarkus.oidc.credentials.secret}
quarkus.oidc-client.scopes=quarkus-mcp-service-scope
quarkus.oidc-client.grant.type=exchange
quarkus.oidc-client.grant-options.exchange.subject_token_type=urn:ietf:params:oauth:token-type:access_token &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;

# REST client which accesses a protected REST server, by propagating the exchanged token
io.quarkiverse.langchain4j.sample.ServiceAccountNameRestClient/mp-rest/url=http://localhost:8080/service-account-name  &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;

# OIDC `service-account-name-rest-server` tenant that secures a protected REST server.
quarkus.oidc.service-account-name-rest-server.auth-server-url=${quarkus.oidc.auth-server-url} &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
quarkus.oidc.service-account-name-rest-server.token.audience=quarkus-mcp-service &lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;(9)&lt;/b&gt;
quarkus.oidc.service-account-name-rest-server.tenant-paths=/service-account-name

# Keycloak devservice that enables a default OIDC tenant that secures MCP server.
quarkus.keycloak.devservices.image-name=quay.io/keycloak/keycloak:26.3.1 &lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;(10)&lt;/b&gt;
quarkus.keycloak.devservices.port=8081
# Keycloak may require more memory on some systems
quarkus.keycloak.devservices.container-memory-limit=1250M&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Declare MCP server and enable traffic logging.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enforce an authenticated access to the main MCP SSE and tool endpoints. The configured pattern covers both the initial &apos;/mcp/sse&apos; handshake and &apos;/mcp/messages/&apos; requests.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Default OIDC tenant that secures the MCP SSE endpoint and tool. It is supported by Keycloak Dev Service in dev mode. In simple cases you do not even have to configure the default OIDC tenant. But in this demo, the default OIDC tenant is required to enforce that the tokens which reach the MCP server contain a &lt;code&gt;quarkus-mcp-server&lt;/code&gt; audience.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Request an access token exchange before the &lt;a href=&quot;#service-account-name-rest-client&quot;&gt;Service Account Name REST client&lt;/a&gt; propagates it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configure OIDC client to perform the token exchange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Set the &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8693#name-token-type-identifiers&quot;&gt;type&lt;/a&gt; of a new token that the current token will be exchanged for to &lt;code&gt;access_token&lt;/code&gt;. Starting from Quarkus 3.25, an expected new  token type will be set to &lt;code&gt;access_token&lt;/code&gt; by default, and users will not have to configure this property when the access token type is required when exchanging tokens.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configure the &lt;a href=&quot;#service-account-name-rest-client&quot;&gt;Service Account Name REST client&lt;/a&gt; with the REST server address. The REST server is collocated with the MCP server only to simplify the demo.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The OIDC tenant that protects the REST server only.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;9&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The OIDC tenant that protects the REST server requires that the tokens that are used to access it contain a REST server &lt;code&gt;quarkus-mcp-service&lt;/code&gt; audience.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;10&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configure Keycloak dev service to use one of the latest released Keycloak images, and make it run on a fixed &lt;code&gt;8081&lt;/code&gt; port to simplify the &lt;a href=&quot;#poem-service-configuration&quot;&gt;Poem Service Configuration&lt;/a&gt; where an access to Keycloak is also required.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;start-mcp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#start-mcp-server&quot;&gt;&lt;/a&gt;Start the MCP server in dev mode&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now let&amp;#8217;s start the MCP server in dev mode:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;mvn quarkus:dev&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and go to the &lt;a href=&quot;#keycloak-setup&quot;&gt;Step 2 - Keycloak setup&lt;/a&gt; in the next section to complete the Keycloak configuration that is required to support the secure MCP server token audience and exchange requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;keycloak-setup&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#keycloak-setup&quot;&gt;&lt;/a&gt;Step 2 - Keycloak setup&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we &lt;a href=&quot;#start-mcp-server&quot;&gt;started the MCP server in dev mode&lt;/a&gt;, Keycloak Dev Service launched a Keycloak container, made it available on port &lt;code&gt;8081&lt;/code&gt;, created a &lt;code&gt;quarkus&lt;/code&gt; realm with the &lt;code&gt;quarkus-mcp-server&lt;/code&gt; client - this client name was configured with the &lt;code&gt;quarkus.oidc.client-id=quarkus-mcp-server&lt;/code&gt; property in the &lt;a href=&quot;#mcp-server-configuration&quot;&gt;MCP Server Configuration&lt;/a&gt; section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;quarkus-mcp-server&lt;/code&gt; client represents a confidential OIDC client that protects the MCP server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But MCP server and REST server have additional token audience and exchange requirements and we must complete the Keycloak setup to support those requirements. Let&amp;#8217;s do it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to &lt;code&gt;&lt;a href=&quot;http://localhost:8081&quot; class=&quot;bare&quot;&gt;http://localhost:8081&lt;/a&gt;&lt;/code&gt; and login as a Keycloak admin, with the &lt;code&gt;admin&lt;/code&gt; name and &lt;code&gt;admin&lt;/code&gt; password credentials.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Select the &lt;code&gt;quarkus&lt;/code&gt; realm:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_client/quarkus-realm.png&quot; alt=&quot;Quarkus Realm&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, create a &lt;code&gt;quarkus-mcp-client&lt;/code&gt; OIDC client that the Quarkus MCP client will use to acquire OAuth2 &lt;code&gt;client_credentials&lt;/code&gt; tokens for accessing the MCP server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Start with the &lt;code&gt;General Settings&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_client/quarkus-mcp-client.png&quot; alt=&quot;Quarkus MCP Client&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and enable &lt;code&gt;Client authentication&lt;/code&gt; and &lt;code&gt;Service accounts roles&lt;/code&gt; capabilities:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_client/quarkus-mcp-client-service-account.png&quot; alt=&quot;Quarkus MCP Client Service Account&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Save the &lt;code&gt;quarkus-mcp-client&lt;/code&gt; OIDC client. Click on its &lt;code&gt;Credentials&lt;/code&gt; tab and copy the generated secret to export it later as the &lt;a href=&quot;#oidc-client-secret&quot;&gt;OIDC client secret&lt;/a&gt; in order to run the command line AI &lt;code&gt;Poem Service&lt;/code&gt; application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the Quarkus MCP client to be able to access MCP server with access tokens that the &lt;code&gt;quarkus-mcp-client&lt;/code&gt; OIDC client will acquire, these tokens must contain an audience (&lt;code&gt;aud&lt;/code&gt;) claim with a &lt;code&gt;quarkus-mcp-server&lt;/code&gt; audience. The MCP server is configured in the &lt;a href=&quot;#mcp-server-configuration&quot;&gt;MCP Server Configuration&lt;/a&gt; section to require this audience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Keycloak supports several options for adding an audience (&lt;code&gt;aud&lt;/code&gt;) claim to issued tokens. We will use an option that involves creating a custom &lt;code&gt;Client scope&lt;/code&gt; with an &lt;code&gt;Audience&lt;/code&gt; mapping.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to the &lt;code&gt;Client scopes&lt;/code&gt; and create an &lt;code&gt;Optional&lt;/code&gt; &lt;code&gt;quarkus-mcp-server-scope&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_client/quarkus-mcp-server-scope.png&quot; alt=&quot;Quarkus MCP Server Scope&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the &lt;code&gt;quarkus-mcp-server-scope&lt;/code&gt; scope is created, go to its &lt;code&gt;Mappings&lt;/code&gt; tab, and choose &lt;code&gt;Configure a new mapper&lt;/code&gt; option and select &lt;code&gt;Audience&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_client/quarkus-mcp-server-scope-aud.png&quot; alt=&quot;Quarkus MCP Server Scope Audience&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Name this mapper as &lt;code&gt;quarkus-mcp-server-as-audience&lt;/code&gt; and choose &lt;code&gt;quarkus-mcp-server&lt;/code&gt; as an &lt;code&gt;Included Client Audience&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_client/quarkus-mcp-server-scope-aud-details.png&quot; alt=&quot;Quarkus MCP Server Scope Audience Details&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the &lt;code&gt;quarkus-mcp-server-scope&lt;/code&gt; is created, add it as an &lt;code&gt;Optional&lt;/code&gt; scope to the &lt;code&gt;quarkus-mcp-client&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_client/add-quarkus-mcp-server-scope-to-quarkus-mcp-client.png&quot; alt=&quot;Add Scope to Client&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, when Quarkus MCP client will use the &lt;code&gt;quarkus-mcp-client&lt;/code&gt; OIDC client to acquire tokens, it will request a &lt;code&gt;quarkus-mcp-server-scope&lt;/code&gt; token scope, resulting in Keycloak issuing tokens with an audience that contains the &lt;code&gt;quarkus-mcp-server&lt;/code&gt; - exactly what the Quarkus MCP server requires.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, we need to support Quarkus MCP server exchanging the incoming access token with the &lt;code&gt;quarkus-mcp-server&lt;/code&gt; audience for a new token that will contain a REST server audience instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create a &lt;code&gt;quarkus-mcp-service&lt;/code&gt; OIDC client that represents the REST server, similarly to how you created the &lt;code&gt;quarkus-mcp-client&lt;/code&gt; OIDC client. Next, create a &lt;code&gt;quarkus-mcp-service-scope&lt;/code&gt; client scope, similarly to how you created the &lt;code&gt;quarkus-mcp-server-scope&lt;/code&gt; client scope, choosing the &lt;code&gt;quarkus-mcp-service&lt;/code&gt; as an &lt;code&gt;Included Client Audience&lt;/code&gt; when creating an audience mapping for this scope.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the &lt;code&gt;quarkus-mcp-service-scope&lt;/code&gt; is created, add it as an &lt;code&gt;Optional&lt;/code&gt;  client scope to the &lt;code&gt;quarkus-mcp-server&lt;/code&gt; MCP Server OIDC client, similarly to how you added the &lt;code&gt;quarkus-mcp-server-scope&lt;/code&gt; to the &lt;code&gt;quarkus-mcp-client&lt;/code&gt; above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, update the &lt;code&gt;quarkus-mcp-server&lt;/code&gt; capability to support a &lt;code&gt;Standard Token Exchange&lt;/code&gt;, see the &lt;a href=&quot;https://www.keycloak.org/securing-apps/token-exchange#_standard-token-exchange-enable&quot;&gt;How to enable token exchange&lt;/a&gt; example in the Keycloak documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, the &lt;code&gt;quarkus-mcp-server&lt;/code&gt; OIDC client that secures the MCP server can also exchange the incoming token and request a new &lt;code&gt;quarkus-mcp-service&lt;/code&gt; audience by adding the &lt;code&gt;quarkus-mcp-service-scope&lt;/code&gt; scope to the token exchange grant request, exactly what the REST server requires.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you actively work with another OAuth2 provider that can produce tokens with required audiences and exchange them using a standard token exchange grant, then you can also try to adapt this demo to work with that provider instead.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-poem-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-poem-service&quot;&gt;&lt;/a&gt;Step 3 - Create and run Poem Service from command line&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MCP server is now &lt;a href=&quot;#start-mcp-server&quot;&gt;running&lt;/a&gt; and ready to accept tool calls. Let&amp;#8217;s create a command line AI &lt;code&gt;Poem Service&lt;/code&gt; that will work with AI Gemini and use Quarkus MCP client to complete tool calls.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;poem-service-maven-dependencies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#poem-service-maven-dependencies&quot;&gt;&lt;/a&gt;Poem Service Maven dependencies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the following dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-langchain4j-ai-gemini&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-langchain4j-mcp&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-langchain4j-oidc-client-mcp-auth-provider&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;quarkus-picocli&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-langchain4j-ai-gemini&lt;/code&gt; brings support for AI Gemini.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-langchain4j-mcp&lt;/code&gt; provides core MCP Client support.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-langchain4j-oidc-cient-mcp-auth-provider&lt;/code&gt; provides an implementation of &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html#_authorization&quot;&gt;McpClientAuthProvider&lt;/a&gt; that can supply access tokens that it itself acquires with an OAuth2 &lt;code&gt;client_credentials&lt;/code&gt; grant (or any other supported grant that does not require a user input). Note, this dependency is different from the &lt;code&gt;quarkus-langchain4j-oidc-mcp-auth-provider&lt;/code&gt; one that supplies tokens already available after an authorization code flow completes, it was demoed in the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-client/#poem-service-maven-dependencies&quot;&gt;Use Quarkus MCP client to access secure MCP HTTP servers&lt;/a&gt; blog post to propagate GitHub login access tokens.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-picocli&lt;/code&gt; supports building command-line Quarkus applications. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;ai-gemini-key&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ai-gemini-key&quot;&gt;&lt;/a&gt;AI Gemini API key&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Poem Service&lt;/code&gt; relies on AI Gemini to create a poem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Get &lt;a href=&quot;https://aistudio.google.com/app/apikey&quot;&gt;AI Gemini API key&lt;/a&gt; and export it as an &lt;code&gt;AI_GEMINI_API_KEY&lt;/code&gt; environment property.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;oidc-client-secret&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#oidc-client-secret&quot;&gt;&lt;/a&gt;OIDC client secret&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus MCP client will use an implementation of &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html#_authorization&quot;&gt;McpClientAuthProvider&lt;/a&gt; provided by the &lt;code&gt;quarkus-langchain4j-oidc-cient-mcp-auth-provider&lt;/code&gt; dependency.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This &lt;code&gt;McpClientAuthProvider&lt;/code&gt; uses the &lt;a href=&quot;#poem-service-configuration&quot;&gt;configured OIDC client&lt;/a&gt; to acquire access tokens using an OAuth2 &lt;code&gt;client_credentials&lt;/code&gt; grant, where an OIDC client secret must be provided.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Export the OIDC &lt;code&gt;quarkus-mcp-client&lt;/code&gt; client secret that you copied when working through the &lt;a href=&quot;#keycloak-setup&quot;&gt;Step 2 - Keycloak setup&lt;/a&gt; section as an &lt;code&gt;OIDC_CLIENT_SECRET&lt;/code&gt; environment property.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;poem-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#poem-service&quot;&gt;&lt;/a&gt;Poem Service&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Poem Service&lt;/code&gt; is a simple Quarkus LangChain4j AI service:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import dev.langchain4j.service.UserMessage;
import io.quarkiverse.langchain4j.RegisterAiService;
import io.quarkiverse.langchain4j.mcp.runtime.McpToolBox;

@RegisterAiService
public interface PoemService {
    @UserMessage(&quot;&quot;&quot;
            Write a short 1 paragraph poem in {language} about a Java programming language.
            Provide a translation to English if the original poem language is not English.
            Dedicate the poem to the service account, refer to this account by its name.&quot;&quot;&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    @McpToolBox(&quot;service-account-name&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    String writePoem(String language); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Request to write a poem about Java.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use Quarkus MCP &lt;code&gt;service-account-name&lt;/code&gt; client configured in the &lt;a href=&quot;#poem-service-configuration&quot;&gt;Poem Service Configuration&lt;/a&gt; section to call a tool that can provide a service account name.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This service is called from the &lt;code&gt;PoemCommand&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import java.util.concurrent.Callable;
import jakarta.enterprise.context.control.ActivateRequestContext;
import jakarta.inject.Inject;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;

@Command(name = &quot;poem&quot;, mixinStandardHelpOptions = true, description = &quot;Create a poem&quot;, version = &quot;v1.0&quot;)
@ActivateRequestContext
public class PoemCommand implements Callable&amp;lt;Integer&amp;gt; {

    @Option(names = { &quot;-l&quot;, &quot;--language&quot; }, description = &quot;Poem language&quot;, defaultValue = &quot;English&quot;)
    String poemLanguage;

    @Inject
    PoemService poemService;

    @Override
    public Integer call() {
        System.out.println(poemService.writePoem(poemLanguage)); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        return 0;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Call &lt;code&gt;PoemService&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;poem-service-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#poem-service-configuration&quot;&gt;&lt;/a&gt;Poem Service Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s see how the command line &lt;code&gt;Poem Service&lt;/code&gt; configuration looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.langchain4j.mcp.service-account-name.transport-type=http &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
quarkus.langchain4j.mcp.service-account-name.url=http://localhost:8081/mcp/sse/ &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

quarkus.oidc-client.auth-server-url=http://localhost:8081/realms/quarkus &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
quarkus.oidc-client.client-id=quarkus-mcp-client &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
quarkus.oidc-client.credentials.secret=${oidc_client_secret} &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
quarkus.oidc-client.scopes=quarkus-mcp-server-scope &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;

quarkus.langchain4j.ai.gemini.api-key=${ai_gemini_api_key} &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
quarkus.langchain4j.ai.gemini.log-requests=true &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
quarkus.langchain4j.ai.gemini.log-responses=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enable MCP client HTTP transport. In this demo we use SSE, but &lt;code&gt;Streamable HTTP&lt;/code&gt; is also supported.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Point to the Quarkus MCP server endpoint that you started in the &lt;a href=&quot;#start-mcp-server&quot;&gt;Start the MCP server in dev mode&lt;/a&gt; step.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configure &lt;a href=&quot;https://quarkus.io/guides/security-openid-connect-client-reference&quot;&gt;OIDC client&lt;/a&gt; to acquire access tokens using OAuth2 &lt;code&gt;client_credentials&lt;/code&gt; grant, a default grant type supported by the OIDC client. OIDC client points to a Keycloak &lt;code&gt;quarkus&lt;/code&gt; realm, note the fixed &lt;code&gt;8081&lt;/code&gt; port that you requested Keycloak Dev Service to use for Keycloak in the &lt;a href=&quot;#keycloak-setup&quot;&gt;Step 2 - Keycloak setup&lt;/a&gt; section.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;OIDC client id, you created the OIDC &lt;code&gt;quarkus-mcp-client&lt;/code&gt; client in the &lt;a href=&quot;#keycloak-setup&quot;&gt;Step 2 - Keycloak setup&lt;/a&gt; section.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;OIDC &lt;code&gt;quarkus-mcp-client&lt;/code&gt; client secret that you exported during the &lt;a href=&quot;#oidc-client-secret&quot;&gt;OIDC client secret&lt;/a&gt; step.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Request that the tokens issued to &lt;code&gt;quarkus-mcp-client&lt;/code&gt; must contain a &lt;code&gt;quarkus-mcp-server&lt;/code&gt; MCP server audience. You created a client &lt;code&gt;quarkus-mcp-server-scope&lt;/code&gt; scope with a &lt;code&gt;quarkus-mcp-server&lt;/code&gt; client audience mapping in the &lt;a href=&quot;#keycloak-setup&quot;&gt;Step 2 - Keycloak setup&lt;/a&gt; section.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;AI Gemini key that you acquired and exported during the &lt;a href=&quot;#ai-gemini-key&quot;&gt;AI Gemini API key&lt;/a&gt; step.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enable AI Gemini request and response logging&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please pay attention to the fact that the MCP client configuration has a &lt;code&gt;service-account-name&lt;/code&gt; name. You referred to this configuration with the &lt;code&gt;@McpToolBox(&quot;service-account-name&quot;)&lt;/code&gt; annotation in the &lt;a href=&quot;#poem-service&quot;&gt;Poem Service&lt;/a&gt; section.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;package-poem-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#package-poem-service&quot;&gt;&lt;/a&gt;Package Poem Service&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Package the command line &lt;code&gt;Poem Service&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;mvn clean package&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;run-poem-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#run-poem-service&quot;&gt;&lt;/a&gt;Run Poem Service&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run the command line &lt;code&gt;Poem Service&lt;/code&gt; that you packaged in the &lt;a href=&quot;#package-poem-service&quot;&gt;Package Poem Service&lt;/a&gt; section:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;java -jar target/quarkus-app/quarkus-run.jar&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should get a response such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;For service-account-quarkus-mcp-client, this Java ode I write,
A language strong, with classes bright, and objects shining light.
From simple apps to systems grand, its power knows no end,
With threads and streams, a helping hand,  a journey without bend.
Its virtual machine, a sturdy friend,  on which great feats depend.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How about trying another language ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;java -jar target/quarkus-app/quarkus-run.jar --language Greek&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should get a response such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;Here&apos;s a short poem in Greek about Java, dedicated to the service account &quot;service-account-quarkus-mcp-client&quot;:

**Greek:**

Ω, Java, γλώσσα ισχυρή και γρήγορη,
για προγραμματισμό, εργαλείο ακριβές.
Στον service-account-quarkus-mcp-client αφιερωμένη,
η δύναμή σου, πάντα  αξιοθαύμαστη.

**English Translation:**

O Java, language strong and fast,
For programming, a precise tool.
Dedicated to service-account-quarkus-mcp-client,
Your power, always admirable.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;have-token-audiences-made-any-difference&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#have-token-audiences-made-any-difference&quot;&gt;&lt;/a&gt;Have token audiences made any difference ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the command line &lt;code&gt;Poem Service&lt;/code&gt; to &lt;a href=&quot;#run-poem-service&quot;&gt;run successfully&lt;/a&gt;, Quarkus MCP client had to acquire a token with a &lt;code&gt;quarkus-mcp-server&lt;/code&gt; audience to access the MCP server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is how a token that Keycloak issues to the MCP client looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_client/token-with-quarkus-mcp-server-aud.png&quot; alt=&quot;Token with quarkus-mcp-server audience&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The token &lt;code&gt;aud&lt;/code&gt; claim contains two audience values, one of them is a required &lt;code&gt;quarkus-mcp-server&lt;/code&gt; audience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the MCP &lt;code&gt;quarkus-mcp-server&lt;/code&gt; server to complete the Quarkus MCP client request, it had to verify that the token had a correct &lt;code&gt;quarkus-mcp-server&lt;/code&gt; audience, and exchange it for a new token with a &lt;code&gt;quarkus-mcp-service&lt;/code&gt; audience to access the REST server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is how an exchanged token that a Keycloak issues to the MCP server looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_client/token-with-quarkus-mcp-service-aud.png&quot; alt=&quot;Token with quarkus-mcp-service audience&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The token &lt;code&gt;aud&lt;/code&gt; claim contains a required &lt;code&gt;quarkus-mcp-service&lt;/code&gt; audience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note this token still retains a record of the original &lt;code&gt;quarkus-mcp-client&lt;/code&gt; client that acquired the previous token, but also lists &lt;code&gt;quarkus-mcp-server&lt;/code&gt; as the authorizing party (&lt;code&gt;azp&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s try to access both MCP server and REST server without an audience claim.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensure the MCP server is &lt;a href=&quot;#start-mcp-server&quot;&gt;running&lt;/a&gt; and &lt;a href=&quot;#keycloak-setup&quot;&gt;Keycloak is configured&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the demo, the OIDC &lt;code&gt;quarkus-mcp-client&lt;/code&gt; client acquires tokens that are used to access the MCP server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use the following curl command to acquire a &lt;code&gt;client_credentials&lt;/code&gt; token for the &lt;code&gt;quarkus-mcp-client&lt;/code&gt; client, omitting a &lt;code&gt;quarkus-mcp-server-scope&lt;/code&gt; grant property:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl -X POST -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -d &quot;grant_type=client_credentials&amp;amp;client_id=quarkus-mcp-client&amp;amp;client_secret=keycloak_quarkus_mcp_client_secret&quot; http://localhost:8081/realms/quarkus/protocol/openid-connect/token&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and confirm at &lt;a href=&quot;https://jwt.io/&quot;&gt;jwt.io&lt;/a&gt; that the returned JWT token has no audience claim.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Try to access the MCP server with this token:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl -H &quot;Authorization: Bearer &amp;lt;token&amp;gt;&quot; http://localhost:8080/mcp/sse&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and you will get HTTP 401.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What about the REST server ? In the demo, the OIDC &lt;code&gt;quarkus-mcp-server&lt;/code&gt; client acquires tokens that are used to access the REST server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use the following curl command to acquire a &lt;code&gt;client_credentials&lt;/code&gt; token  for the &lt;code&gt;quarkus-mcp-server&lt;/code&gt; client, omitting a &lt;code&gt;quarkus-mcp-service-scope&lt;/code&gt; grant property:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl -X POST -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -d &quot;grant_type=client_credentials&amp;amp;client_id=quarkus-mcp-server&amp;amp;client_secret=secret&quot; http://localhost:8081/realms/quarkus/protocol/openid-connect/token&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and confirm at &lt;a href=&quot;https://jwt.io/&quot;&gt;jwt.io&lt;/a&gt; that the returned JWT token has no audience claim.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Try to access the REST server with this token:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl -H &quot;Authorization: Bearer &amp;lt;token&amp;gt;&quot; http://localhost:8080/service-account-name&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and you will get HTTP 401.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also enforce a stricter verification by requiring that tokens received by both MCP and REST servers were issued to the &lt;code&gt;quarkus-mcp-client&lt;/code&gt; and &lt;code&gt;quarkus-mcp-server&lt;/code&gt; respectively by adding the following configuration fragment to the &lt;a href=&quot;#mcp-server-configuration&quot;&gt;MCP Server Configuration&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;# Tokens that are accepted by MCP server must have been requested by `quarkus-mcp-client`

quarkus.oidc.token.required-claims.azp=quarkus-mcp-client

# Tokens that are accepted by REST server must have been requested by `quarkus-mcp-server`

quarkus.oidc.service-account-name-rest-server.token.required-claims.azp=quarkus-mcp-server&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resource-indicator&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#resource-indicator&quot;&gt;&lt;/a&gt;Note about Resource Indicators&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization&quot;&gt;latest 2025-06-18 MCP authorization specification&lt;/a&gt; &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#token-audience-binding-and-validation&quot;&gt;requires&lt;/a&gt; the use of &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8707.html&quot;&gt;OAuth2 Resource Indicators&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OAuth2 Resource Indicator allows for a fine grained token audience restriction, in the presence of multiple, diverse resource servers that must be accessed with tokens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a simple demo that we created in this blog post, having a token to contain an audience only is sufficient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If your provider already supports &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8707.html&quot;&gt;OAuth2 Resource Indicators&lt;/a&gt; and you need to have a token to also include a resource indicator, configure OIDC client to request it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, you can add &lt;code&gt;quarkus.oidc-client.grant.client.extra-params.resource=http://localhost:8080/mcp&lt;/code&gt; to the &lt;a href=&quot;#poem-service-configuration&quot;&gt;Poem Service Configuration&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case, to have the MCP server verify that an access token contains a correct resource indicator, add &lt;code&gt;quarkus.oidc.token.required-claims.resource=http://localhost:8080/mcp&lt;/code&gt; to the &lt;a href=&quot;#mcp-server-configuration&quot;&gt;MCP Server Configuration&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;security-considerations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#security-considerations&quot;&gt;&lt;/a&gt;Security Considerations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensuring that each participant in your distributed AI system is properly secured and accepts tokens thar are meant to access this participant only is crucial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Token audience restriction is one of the key OAuth2 mechanisms that supports this goal, with &lt;a href=&quot;#resource-indicator&quot;&gt;resource indicators&lt;/a&gt; allowing to achieve a finer-grained audience restriction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8693&quot;&gt;Token exchange&lt;/a&gt; can help to correctly switch the OAuth2 security context when the tokens are flowing in a multi-hop distributed AI application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Read more about the &lt;a href=&quot;https://modelcontextprotocol.io/specification/draft/basic/authorization#access-token-privilege-restriction&quot;&gt;Access Token Privilege Restriction&lt;/a&gt; in the &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization&quot;&gt;latest 2025-06-18 MCP authorization specification&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, we demonstrated how &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html&quot;&gt;Quarkus MCP Client&lt;/a&gt; can access secure MCP servers by acquiring access tokens using an OAuth2 &lt;code&gt;client_credentials&lt;/code&gt; grant and propagating them to the secure Quarkus MCP server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also looked into restricting tokens to specific audiences and started learning about an important OAuth2 &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8693&quot;&gt;token exchange&lt;/a&gt; grant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have more content dedicated to AI and MCP security lined up for you, stay tuned !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/secure-mcp-oidc-client/
            </guid>
            
            
            
            <author>Sergey Beryozkin (https://twitter.com/sberyozkin)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.24.5 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-24-5-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.24.5, the fourth (we skipped 3.24.0) maintenance release for our 3.24 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will release 3.25 next week.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.24, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.24.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.24&quot;&gt;Quarkus 3.24 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.24.5&quot;&gt;3.24.5&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-24-5-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.20.2 released - LTS maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-20-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.20.2, our second maintenance release for the 3.20 LTS stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.20.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.20, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update --stream=3.20&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.20.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.20.2&quot;&gt;the full changelog of 3.20.2 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-20-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.15.6 released - LTS maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-15-6-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.15.6, our next maintenance release for the 3.15 LTS stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.15.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.15, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update --stream=3.15&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.15.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.15.6&quot;&gt;the full changelog of 3.15.6 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-15-6-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.24.4 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-24-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.24.4, the third (we skipped 3.24.0) maintenance release for our 3.24 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.24, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.24.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.24&quot;&gt;Quarkus 3.24 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.24.4&quot;&gt;3.24.4&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 17 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-24-4-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Introducing Quarkus quickjs4j: Seamless JavaScript Integration in Your Quarkus Applications</title>
            <link>
                https://quarkus.io/blog/quickjs4j/
            </link>
            <description>
                &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re excited to announce the release of the Quarkus quickjs4j extension, a powerful new addition to the
Quarkus ecosystem that enables seamless execution of JavaScript code within your Java applications. Built
on top of the &lt;a href=&quot;https://github.com/roastedroot/quickjs4j&quot;&gt;quickjs4j library&lt;/a&gt;, this extension brings the
lightweight QuickJS JavaScript engine to both JVM and Native Quarkus, with full CDI integration and
compile-time optimizations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whether you need to execute dynamic business logic, implement configurable rules engines, or integrate with
JavaScript-based algorithms, the Quarkus quickjs4j extension provides a type-safe, performant solution that
leverages Quarkus&amp;#8217;s build-time processing capabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-javascript-in-java-applications&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-javascript-in-java-applications&quot;&gt;&lt;/a&gt;Why JavaScript in Java Applications?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus applications often need to execute dynamic logic that can be modified without recompiling the entire
application. JavaScript provides an excellent solution for this use case, offering:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dynamic Configuration&lt;/strong&gt;: Update business rules and logic without application restarts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Scripting Capabilities&lt;/strong&gt;: Enable power users to customize application behavior&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Algorithm Integration&lt;/strong&gt;: Leverage existing JavaScript libraries and algorithms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rapid Prototyping&lt;/strong&gt;: Quickly test and iterate on complex logic&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus quickjs4j extension makes this integration seamless while maintaining the performance and developer
experience you expect from Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;key-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#key-features&quot;&gt;&lt;/a&gt;Key Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;compile-time-code-generation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#compile-time-code-generation&quot;&gt;&lt;/a&gt;Compile-time Code Generation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The extension automatically generates CDI beans and proxy classes for your JavaScript interfaces during build
time, ensuring optimal performance and early error detection.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;full-cdi-integration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-cdi-integration&quot;&gt;&lt;/a&gt;Full CDI Integration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JavaScript interfaces are first-class citizens in your Quarkus application, injectable like any other CDI bean.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;flexible-script-loading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#flexible-script-loading&quot;&gt;&lt;/a&gt;Flexible Script Loading&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Load JavaScript files from multiple sources:
- Classpath resources (recommended for packaged scripts)
- Filesystem paths (for dynamic script loading)
- URLs (for remote script execution)
- Anywhere else (using the optional Factory pattern)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;context-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#context-support&quot;&gt;&lt;/a&gt;Context Support&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pass Java objects as context to JavaScript execution, enabling bidirectional communication between Java and
JavaScript code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;sandboxed-execution&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sandboxed-execution&quot;&gt;&lt;/a&gt;Sandboxed Execution&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;QuickJs4J provides a secure and efficient way to execute JavaScript within Java. By running code in a sandbox,
it ensures:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Memory safety – JavaScript runs in isolation, protecting your application from crashes or memory leaks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No system access by default – JavaScript cannot access the filesystem, network, or other sensitive resources unless explicitly allowed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Portability – Being pure Java bytecode, it runs wherever the JVM does.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Native-image friendly – Compatible with GraalVM&amp;#8217;s native-image for fast, lightweight deployments.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whether you&amp;#8217;re embedding scripting capabilities or isolating untrusted code, QuickJs4J is designed for safe and
seamless integration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#getting-started&quot;&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Adding the extension to your Quarkus application is straightforward. First, add the dependency to your &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.quickjs4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-quickjs4j&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${quarkus-quickjs4j.version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You&amp;#8217;ll also need to enable the annotation processor for code generation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;build&amp;gt;
    &amp;lt;plugins&amp;gt;
        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;configuration&amp;gt;
                &amp;lt;annotationProcessorPaths&amp;gt;
                    &amp;lt;path&amp;gt;
                        &amp;lt;groupId&amp;gt;io.quarkiverse.quickjs4j&amp;lt;/groupId&amp;gt;
                        &amp;lt;artifactId&amp;gt;quarkus-quickjs4j&amp;lt;/artifactId&amp;gt;
                        &amp;lt;version&amp;gt;${quarkus-quickjs4j.version}&amp;lt;/version&amp;gt;
                    &amp;lt;/path&amp;gt;
                &amp;lt;/annotationProcessorPaths&amp;gt;
            &amp;lt;/configuration&amp;gt;
        &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;simple-example-javascript-calculator&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#simple-example-javascript-calculator&quot;&gt;&lt;/a&gt;Simple Example: JavaScript Calculator&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s create a simple calculator to demonstrate the extension&amp;#8217;s capabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, define a Java interface annotated with &lt;code&gt;@ScriptInterface&lt;/code&gt; and &lt;code&gt;@ScriptImplementation&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package com.example;

import io.roastedroot.quickjs4j.annotations.ScriptInterface;
import io.quarkiverse.quickjs4j.annotations.ScriptImplementation;

@ScriptInterface
@ScriptImplementation(location = &quot;calculator.js&quot;)
public interface Calculator {
    int add(int a, int b);
    int multiply(int a, int b);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, create the JavaScript implementation in &lt;code&gt;src/main/resources/calculator.js&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-javascript hljs&quot; data-lang=&quot;javascript&quot;&gt;function add(a, b) {
    return a + b;
}

function multiply(a, b) {
    return a * b;
}

export { add, multiply };&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, inject and use the calculator in your Quarkus application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package com.example;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;

@ApplicationScoped
public class MathService {

    @Inject
    Calculator calculator;

    public int performCalculation() {
        int sum = calculator.add(5, 3);        // Returns 8
        int product = calculator.multiply(4, 7); // Returns 28
        double quotient = calculator.divide(10.0, 2.0); // Returns 5.0

        return sum + product + (int) quotient;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s it! The extension handles all the complexity of JavaScript execution, type conversion, and CDI
integration behind the scenes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;advanced-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#advanced-features&quot;&gt;&lt;/a&gt;Advanced Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;context-objects-for-bidirectional-communication&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#context-objects-for-bidirectional-communication&quot;&gt;&lt;/a&gt;Context Objects for Bidirectional Communication&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A powerful feature of quickjs4j is the ability to provide Java context objects that JavaScript code
can invoke:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@ScriptInterface(context = CalculatorContext.class)
@ScriptImplementation(location = &quot;calculator.js&quot;)
public interface Calculator {
    int add(int a, int b);
    int multiply(int a, int b);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@ApplicationScoped
public class CalculatorContext {
    public void log(String message) {
        System.out.println(&quot;Calc&amp;gt;&amp;gt; &quot; + message);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your JavaScript code can then call these Java methods:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-javascript hljs&quot; data-lang=&quot;javascript&quot;&gt;function add(a, b) {
    Calculator_Builtins.log(`Adding ${a} + ${b}`);
    return a + b;
}

function multiply(a, b) {
    Calculator_Builtins.log(`Multiplying ${a} * ${b}`);
    return a * b;
}

export { add, multiply };&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;factory-pattern-for-dynamic-scripts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#factory-pattern-for-dynamic-scripts&quot;&gt;&lt;/a&gt;Factory Pattern for Dynamic Scripts&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For scenarios where you need to load scripts dynamically at runtime, use the factory pattern:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@ApplicationScoped
public class DynamicMathService {

    @Inject
    CalculatorContext context;

    @Inject
    ScriptInterfaceFactory&amp;lt;Calculator, CalculatorContext&amp;gt; calculatorFactory;

    public void executeCustomScript() {
        // Load your javascript from some dynamic source
        String scriptContent = loadDynamicScriptContent();

        // Create calculator instance with dynamic script
        Calculator calculator = calculatorFactory.create(scriptContent, context);

        // Use the calculator
        int result = calculator.add(10, 20);
        System.out.println(&quot;Result: &quot; + result);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This approach is perfect for applications that need to execute user-provided scripts or
load scripts from external sources.  Note that the execution of the script is fully sandboxed.
Only the methods exposed by the Context can be invoked from within the script.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;error-handling-and-debugging&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#error-handling-and-debugging&quot;&gt;&lt;/a&gt;Error Handling and Debugging&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JavaScript errors are propagated as Java exceptions, making debugging straightforward:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;try {
    double result = calculator.divide(10, 0);
} catch (RuntimeException e) {
    logger.error(&quot;JavaScript execution failed: {}&quot;, e.getMessage(), e);
    // Handle the error appropriately
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;build-time-magic&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#build-time-magic&quot;&gt;&lt;/a&gt;Build-time Magic&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Behind the scenes, the extension performs build-time code generation, creating:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CDI Bean Classes&lt;/strong&gt;: &lt;code&gt;{InterfaceName}_CDI&lt;/code&gt; - Injectable CDI beans&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Factory Classes&lt;/strong&gt;: &lt;code&gt;{InterfaceName}_Factory&lt;/code&gt; - Injectable factory beans&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Proxy Classes&lt;/strong&gt;: &lt;code&gt;{InterfaceName}_Proxy&lt;/code&gt; - Generated by quickjs4j&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Context Builtins&lt;/strong&gt;: &lt;code&gt;{ContextName}_Builtins&lt;/code&gt; - JavaScript-accessible Java methods&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This build-time approach ensures minimal runtime overhead while providing full IDE
support with code completion and type checking.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;performance-considerations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#performance-considerations&quot;&gt;&lt;/a&gt;Performance Considerations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The QuickJS engine is designed for lightweight, fast JavaScript execution. Combined with
Quarkus&amp;#8217;s build-time optimizations, the extension provides:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fast Startup&lt;/strong&gt;: Minimal impact on application startup time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Low Memory Footprint&lt;/strong&gt;: Efficient memory usage for JavaScript execution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Native Image Support&lt;/strong&gt;: Full compatibility with GraalVM native images&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Build-time Validation&lt;/strong&gt;: Early detection of interface mismatches and errors&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-cases&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#use-cases&quot;&gt;&lt;/a&gt;Use Cases&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus quickjs4j extension is perfect for:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Business Rules Engines&lt;/strong&gt;: Implement configurable business logic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Template Processing&lt;/strong&gt;: Generate dynamic content with JavaScript templates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Algorithm Integration&lt;/strong&gt;: Leverage existing JavaScript algorithms and libraries&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User Scripting&lt;/strong&gt;: Allow power users to customize application behavior&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Configuration Logic&lt;/strong&gt;: Implement complex configuration scenarios&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;current-status-and-future-plans&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#current-status-and-future-plans&quot;&gt;&lt;/a&gt;Current Status and Future Plans&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The extension is currently in &lt;strong&gt;experimental status&lt;/strong&gt;, meaning APIs may evolve based on
community feedback. We&amp;#8217;re actively working on:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Enhanced error reporting and debugging capabilities&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Performance optimizations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configurable JavaScript engine options&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improved IDE integration and tooling&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular, we have a lot of work to do in optimizing performance.  There are
clear tradeoffs to consider around flexibility and speed, as well as customization.
The current experimental implementation takes a very conservative approach to
ensure full sandboxing and thread safety.  The result is a slower implementation,
but one that is guaranteed to be thread safe and fully sandboxed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;getting-involved&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#getting-involved&quot;&gt;&lt;/a&gt;Getting Involved&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus quickjs4j extension is part of the Quarkiverse ecosystem and welcomes community
contributions. Whether you&amp;#8217;re interested in:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reporting bugs or requesting features&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Contributing code improvements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sharing use cases and examples&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improving documentation&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Visit our &lt;a href=&quot;https://github.com/quarkiverse/quarkus-quickjs4j&quot;&gt;GitHub repository&lt;/a&gt; to get involved.
We would really love for you to try out quickjs4j in Quarkus and give us feedback.  The best
way to evolve the functionality is by hearing from users!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus quickjs4j extension opens up exciting possibilities for Java developers who need
to integrate JavaScript execution into their applications. With its compile-time code generation,
full CDI integration, and flexible script loading options, it provides a powerful yet easy-to-use
solution for dynamic code execution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Try it out and let us know what you think! We&amp;#8217;re excited to see what the community builds with this
capability.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links-and-resources&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links-and-resources&quot;&gt;&lt;/a&gt;Links and Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to learn more about QuickJS itself, or the upstream quickjs4j Java project,
here are some helpful links:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkiverse/quarkus-quickjs4j&quot;&gt;Quarkus quickjs4j GitHub Repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/roastedroot/quickjs4j&quot;&gt;quickjs4j Library&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bellard.org/quickjs/&quot;&gt;QuickJS JavaScript Engine&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 15 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quickjs4j/
            </guid>
            
            
            
            <author>Eric Wittmann (https://twitter.com/apicurio)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #58 - July</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-58/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Discover more about the launch of the Agent2Agent (A2A) Java SDK, contributed by the WildFly and the Quarkus communities. Learn how to build a Model Context Protocol server and client using Quarkus and LangChain4J in “Using the Model Context Protocol With Quarkus and Langchain4j” by Vishal Shanbhag &amp;amp; Saajan Nagendra. Make sure you read “AI Tool Calling with Quarkus LangChain4j” by piotr.minkowski to explore Quarkus LangChain4j AI support&amp;#8217;s integration with chat models, focusing on &quot;tool calling&quot; (function calling), an AI application pattern that enhances models via API/external tool interaction.  See how to trace microservice calls across network boundaries using Quarkus, REST clients, and Jaeger in Markus Eisele’s post “The Distributed Dragon Forge: A Hands-On OpenTelemetry Adventure with Quarkus”. Finally, check out Loïc Mathieu’s article to learn how to build  a chatbot with Google Gemini Vertex AI and Quarkus Comments Feed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/58/&quot;&gt;Newsletter #58: July&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 14 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-58/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Getting Started with Quarkus and the A2A Java SDK</title>
            <link>
                https://quarkus.io/blog/quarkus-and-a2a-java-sdk/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A couple of weeks ago, we &lt;a href=&quot;https://quarkus.io/blog/a2a-project-launches-java-sdk/&quot;&gt;announced&lt;/a&gt; that our &lt;a href=&quot;https://github.com/a2aproject/a2a-java&quot;&gt;A2A Java SDK&lt;/a&gt; has been contributed to the official A2A project! This was a collaboration between our WildFly and Quarkus teams at Red Hat and Google. Today, we have released A2A Java SDK 0.2.3.Beta1, which aligns with the v0.2.3 version of the &lt;a href=&quot;https://github.com/a2aproject/A2A/tree/v0.2.3&quot;&gt;A2A specification&lt;/a&gt;. In this blog post, we&amp;#8217;ll cover how to easily get started with Quarkus and A2A using the A2A Java SDK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also check out our &lt;a href=&quot;https://www.youtube.com/watch?v=5CZzW-wvEQs&quot;&gt;short video&lt;/a&gt; that gives an introduction to the A2A Java SDK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/5CZzW-wvEQs?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-a2a&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-a2a&quot;&gt;&lt;/a&gt;What&amp;#8217;s A2A?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before jumping into the details, let&amp;#8217;s go through what &lt;a href=&quot;https://a2aproject.github.io/A2A/specification/&quot;&gt;A2A&lt;/a&gt; is. The &lt;em&gt;Agent2Agent&lt;/em&gt; (A2A) protocol is an open standard developed by Google. It enables AI agents to communicate and collaborate with one another, regardless of each agent&amp;#8217;s underlying framework, language, or vendor. This is important, as it paves the way for polyglot multi-agent systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;main-concepts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#main-concepts&quot;&gt;&lt;/a&gt;Main Concepts&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The A2A protocol involves a few important concepts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt; - This is the end user who has a request that will require the help of one or more agents.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A2A Client&lt;/strong&gt; - This is the client that will send requests on the user&amp;#8217;s behalf to an A2A server agent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A2A Server&lt;/strong&gt; - This is the server agent that will receive and respond to requests from an A2A client agent. An A2A server agent exposes an HTTP endpoint that implements the A2A protocol.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A2A client and A2A server agents can be implemented using different languages and frameworks. They just need to be able to speak with each other using the A2A protocol. Communication happens using JSON-RPC 2.0 over HTTP(S) as the transport. A2A SDKs written for various programming languages enable this interoperability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/orgs/a2aproject/repositories&quot;&gt;A2A project&lt;/a&gt; aims to provide SDKs for various languages. Using the &lt;a href=&quot;https://github.com/a2aproject/a2a-python&quot;&gt;A2A Python SDK&lt;/a&gt; and our &lt;a href=&quot;https://github.com/a2aproject/a2a-java&quot;&gt;A2A Java SDK&lt;/a&gt;, for example, it&amp;#8217;s possible for an A2A client agent written in Python to communicate with an A2A server agent written in Java and vice versa.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;from-a-quarkus-langchain4j-ai-service-to-an-a2a-server-agent&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#from-a-quarkus-langchain4j-ai-service-to-an-a2a-server-agent&quot;&gt;&lt;/a&gt;From a Quarkus LangChain4j AI Service to an A2A Server Agent&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s say we have a &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/ai-services.html&quot;&gt;Quarkus LangChain4j AI service&lt;/a&gt; that can respond to user queries about the weather by making use of a weather MCP server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@RegisterAiService
@ApplicationScoped
public interface WeatherAgent {

    @SystemMessage(&quot;&quot;&quot;
            You are a specialized weather forecast assistant. Your primary function is to
            utilize the provided tools to retrieve and relay weather information in response
            to user queries. You must rely exclusively on these tools for data and refrain
            from inventing information. Ensure that all responses include the detailed output
            from the tools used and are formatted in Markdown.
            &quot;&quot;&quot;
    )
    @McpToolBox(&quot;weather&quot;) // &amp;lt;-- The weather MCP server that will be used
    String chat(@UserMessage String question);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To turn this weather agent into an A2A server agent, there are a few simple steps we need to follow:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;add-an-a2a-java-sdk-server-dependency&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#add-an-a2a-java-sdk-server-dependency&quot;&gt;&lt;/a&gt;Add an A2A Java SDK Server Dependency&lt;/h3&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;io.github.a2asdk&lt;/code&gt; &lt;code&gt;groupId&lt;/code&gt; is temporary and will likely change for future releases. Keep an eye on the &lt;code&gt;a2a-java&lt;/code&gt; &lt;a href=&quot;https://github.com/a2aproject/a2a-java/blob/main/README.md&quot;&gt;README&lt;/a&gt; for up-to-date documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.github.a2asdk&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;a2a-java-sdk-server-quarkus&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a2a-java-sdk-server-quarkus&lt;/code&gt; provides access to the core classes that make up the A2A specification and provides the HTTP endpoint that implements the A2A protocol. This dependency makes use of Quarkus Reactive Routes. If not using Quarkus, the &lt;code&gt;a2a-java-sdk-server-jakarta&lt;/code&gt; dependency can be used to expose an A2A server agent in a Jakarta server supporting CDI and Jakarta RESTful Web Services.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;add-a-class-that-creates-an-a2a-agentcard&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#add-a-class-that-creates-an-a2a-agentcard&quot;&gt;&lt;/a&gt;Add a Class that Creates an A2A &lt;code&gt;AgentCard&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;AgentCard&lt;/code&gt; is a class that describes the capabilities of an A2A server agent. Other agents or clients will use this to understand what our weather agent can do. The A2A Java SDK will automatically expose this agent card at the server agent&amp;#8217;s &lt;code&gt;.well-known/agent.json&lt;/code&gt; URI. For example, if our A2A server agent is running on &lt;a href=&quot;http://localhost:10001&quot; class=&quot;bare&quot;&gt;http://localhost:10001&lt;/a&gt;, the agent card will be available at &lt;a href=&quot;http://localhost:10001/.well-known/agent.json&quot; class=&quot;bare&quot;&gt;http://localhost:10001/.well-known/agent.json&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;import io.a2a.server.PublicAgentCard;
import io.a2a.spec.AgentCapabilities;
import io.a2a.spec.AgentCard;
import io.a2a.spec.AgentSkill;
...

@ApplicationScoped
public class WeatherAgentCardProducer {

    @Produces
    @PublicAgentCard
    public AgentCard agentCard() {
        return new AgentCard.Builder()
                .name(&quot;Weather Agent&quot;)
                .description(&quot;Helps with weather&quot;)
                .url(&quot;http://localhost:10001&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
                .version(&quot;1.0.0&quot;)
                .capabilities(new AgentCapabilities.Builder() &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
                        .streaming(true)
                        .pushNotifications(false)
                        .stateTransitionHistory(false)
                        .build())
                .defaultInputModes(Collections.singletonList(&quot;text&quot;))
                .defaultOutputModes(Collections.singletonList(&quot;text&quot;))
                .skills(Collections.singletonList(new AgentSkill.Builder()
                        .id(&quot;weather_search&quot;)
                        .name(&quot;Search weather&quot;)
                        .description(&quot;Helps with weather in city, or states&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
                        .tags(Collections.singletonList(&quot;weather&quot;))
                        .examples(List.of(&quot;weather in LA, CA&quot;)) &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
                        .build()))
                .build();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The URL of our A2A server agent. We set &lt;code&gt;quarkus.http.port&lt;/code&gt; to &lt;code&gt;10001&lt;/code&gt; in our &lt;code&gt;application.properties&lt;/code&gt; file so our A2A server agent will be available at &lt;a href=&quot;http://localhost:10001&quot; class=&quot;bare&quot;&gt;http://localhost:10001&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Indicates the capabilities of our A2A server agent like whether it supports streaming, push notifications, and state transition history.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Describes what our agent can do.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;An example query that our agent can handle.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;add-a-class-that-creates-an-a2a-agentexecutor&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#add-a-class-that-creates-an-a2a-agentexecutor&quot;&gt;&lt;/a&gt;Add a class that creates an A2A &lt;code&gt;AgentExecutor&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;AgentExecutor&lt;/code&gt; is a class that will be used to process requests sent to our A2A server agent. It will pass the requests received from the A2A client to our Quarkus LangChain4j AI service and is responsible for returning the responses back to the A2A client. The A2A Java SDK will call this executor when a request is sent to our A2A server agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the &lt;code&gt;AgentExecutor&lt;/code&gt; interface specifies two methods, &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;cancel&lt;/code&gt;, that we need to implement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;import io.a2a.server.agentexecution.AgentExecutor;
import io.a2a.server.agentexecution.RequestContext;
import io.a2a.server.events.EventQueue;
import io.a2a.server.tasks.TaskUpdater;
import io.a2a.spec.JSONRPCError;
import io.a2a.spec.Message;
import io.a2a.spec.Part;
import io.a2a.spec.Task;
import io.a2a.spec.TaskNotCancelableError;
import io.a2a.spec.TaskState;
import io.a2a.spec.TextPart;
...

@ApplicationScoped
public class WeatherAgentExecutorProducer {

    @Inject
    WeatherAgent weatherAgent; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    @Produces
    public AgentExecutor agentExecutor() {
        return new WeatherAgentExecutor(weatherAgent);
    }

    private static class WeatherAgentExecutor implements AgentExecutor {

        private final WeatherAgent weatherAgent;

        public WeatherAgentExecutor(WeatherAgent weatherAgent) {
            this.weatherAgent = weatherAgent;
        }

        @Override
        public void execute(RequestContext context, EventQueue eventQueue) throws JSONRPCError { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
            TaskUpdater updater = new TaskUpdater(context, eventQueue);

            // mark the task as submitted and start working on it
            if (context.getTask() == null) {
                updater.submit();
            }
            updater.startWork();

            // extract the text from the message
            String userMessage = extractTextFromMessage(context.getMessage());

            // call the weather agent with the user&apos;s message
            String response = weatherAgent.chat(userMessage); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;

            // create the response part
            TextPart responsePart = new TextPart(response, null);
            List&amp;lt;Part&amp;lt;?&amp;gt;&amp;gt; parts = List.of(responsePart);

            // add the response as an artifact and complete the task
            updater.addArtifact(parts, null, null, null);
            updater.complete();
        }

        @Override
        public void cancel(RequestContext context, EventQueue eventQueue) throws JSONRPCError { &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
            Task task = context.getTask();

            if (task.getStatus().state() == TaskState.CANCELED) {
                // task already cancelled
                throw new TaskNotCancelableError();
            }

            if (task.getStatus().state() == TaskState.COMPLETED) {
                // task already completed
                throw new TaskNotCancelableError();
            }

            // cancel the task
            TaskUpdater updater = new TaskUpdater(context, eventQueue);
            updater.cancel();
        }

        private String extractTextFromMessage(Message message) {
            StringBuilder textBuilder = new StringBuilder();
            if (message.getParts() != null) {
                for (Part part : message.getParts()) {
                    if (part instanceof TextPart textPart) {
                        textBuilder.append(textPart.getText());
                    }
                }
            }
            return textBuilder.toString();
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is our Quarkus LangChain4j AI service.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;execute&lt;/code&gt; method will be used to process requests from an A2A client.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Here we are invoking our Quarkus LangChain4j AI service.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;cancel&lt;/code&gt; method be used to cancel an ongoing request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s it, we can now start our Quarkus application as shown below and our A2A server agent will be available at &lt;a href=&quot;http://localhost:10001&quot; class=&quot;bare&quot;&gt;http://localhost:10001&lt;/a&gt;. A2A client agents can now send weather-related queries to our A2A server agent and our agent will respond with the weather information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;$ mvn quarkus:dev&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve gone from a Quarkus LangChain4j AI service to an A2A server agent in just a few steps!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The source code for this example is available &lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/multi_language/python_and_java_multiagent/weather_agent&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;validating-our-a2a-server-agent-using-the-a2a-inspector&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#validating-our-a2a-server-agent-using-the-a2a-inspector&quot;&gt;&lt;/a&gt;Validating our A2A Server Agent Using the A2A Inspector&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/a2aproject/a2a-inspector&quot;&gt;A2A Inspector&lt;/a&gt; is a web application that&amp;#8217;s very easy to run and can be used to inspect any A2A server agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can use the A2A Inspector to validate our A2A server agent by specifying our server agent&amp;#8217;s URL in the &lt;code&gt;Connect&lt;/code&gt; text box.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The A2A Inspector will obtain and show our server agent&amp;#8217;s agent card:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-and-a2a-java-sdk/a2a-inspector-agent-card.png&quot; alt=&quot;a2a inspector agent card&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that this matches the information we provided in our &lt;code&gt;WeatherAgentCardProducer&lt;/code&gt; class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also use the inspector to send requests to the A2A server agent and to view the raw HTTP requests and responses.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;multi-agent-orchestration-with-python-and-java-server-agents&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#multi-agent-orchestration-with-python-and-java-server-agents&quot;&gt;&lt;/a&gt;Multi-Agent Orchestration with Python and Java Server Agents&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s take a look at a more complex example that makes use of our weather A2A server agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-and-a2a-java-sdk/multiagent-java-python.png&quot; alt=&quot;multiagent java python&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a multi-agent example where a host agent delegates requests to two different A2A server agents, an Airbnb agent and our Weather agent, based on the user&amp;#8217;s question. Under the hood, the host agent makes use of each agent&amp;#8217;s agent card to determine the capabilities of each agent and uses an LLM to determine which agent to delegate the request to based on their capabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/multi_language/python_and_java_multiagent/airbnb_agent&quot;&gt;Airbnb agent&lt;/a&gt; is a Python agent that&amp;#8217;s implemented using LangGraph and makes use of the A2A Python SDK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/multi_language/python_and_java_multiagent/weather_agent&quot;&gt;Weather agent&lt;/a&gt; is our Java agent that&amp;#8217;s implemented using Quarkus LangChain4j and makes use of the A2A Java SDK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the host agent uses A2A clients written in Python to communicate with the server agents. It&amp;#8217;s also possible to use an &lt;a href=&quot;https://github.com/a2aproject/a2a-java?tab=readme-ov-file#a2a-client&quot;&gt;A2A client&lt;/a&gt; written in Java using our A2A Java SDK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The complete source code for this example is available &lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/multi_language/python_and_java_multiagent&quot;&gt;here&lt;/a&gt;. To experiment with this multi-agent example, try sending different types of questions to the host agent, for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What&amp;#8217;s the weather in New York, NY?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find me a room in LA, CA, July 7-9, 2 adults&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the host agent will delegate the first question to the Weather agent and the second question to the Airbnb agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-and-a2a-java-sdk/new_york_weather.png&quot; alt=&quot;new york weather&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the second question will be delegated to the Airbnb agent:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-and-a2a-java-sdk/la_airbnb.png&quot; alt=&quot;la airbnb&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve seen how easy it is to get started with Quarkus and A2A using the A2A Java SDK. With just a few steps, we can turn a Quarkus LangChain4j AI service into an A2A server agent that can communicate with other A2A agents, regardless of the language or framework they are implemented in. The LangChain4j and Quarkus teams are also working on removing most of the boilerplate code to expose an A2A server and interact with A2A clients. So, stay tuned!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;further-reading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#further-reading&quot;&gt;&lt;/a&gt;Further Reading&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://a2aproject.github.io/A2A/specification/&quot;&gt;A2A Specification&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/a2aproject/a2a-java/blob/main/README.md&quot;&gt;A2A Java SDK Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 09 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-and-a2a-java-sdk/
            </guid>
            
            
            
            <author>Farah Juma (https://twitter.com/farahjuma)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.24.3 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-24-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.24.3, the second (we skipped 3.24.0) maintenance release for our 3.24 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.24, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.24.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.24&quot;&gt;Quarkus 3.24 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.24.3&quot;&gt;3.24.3&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 09 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-24-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Sunsetting legacy config classes</title>
            <link>
                https://quarkus.io/blog/legacy-config-classes-sunsetting/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After having migrated the whole Quarkus code base and Quarkiverse extensions to @ConfigMapping interfaces in Quarkus 3.19,
we announce the sunsetting of legacy config classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;some-history&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#some-history&quot;&gt;&lt;/a&gt;Some history&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 2022, we introduced in Quarkus a new configuration infrastructure for extensions based on interfaces annotated with &lt;code&gt;@ConfigMapping&lt;/code&gt;.
They were a replacement for the legacy config classes that were used in Quarkus extensions,
which came with several issues and were specific to extensions (you couldn&amp;#8217;t use them in applications).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new &lt;code&gt;@ConfigMapping&lt;/code&gt; infrastructure unified extension and application configuration on the same infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Quarkus 3.19k, released late February this year, we moved all the core extensions to this new infrastructure (except for some classes that were kept for compatibility purposes)
and deprecated the legacy config classes support, together with dropping close to all the existing config classes: we kept a few for compatibility reasons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The extension annotation processor was also modified to require a specific option &lt;code&gt;-AlegacyConfigRoot=true&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plan has always been to sunset the legacy config classes so that we could remove all the machinery related to it,
and offer a single unified configuration mechanism.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;current-state&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#current-state&quot;&gt;&lt;/a&gt;Current state&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The current state of the public Quarkus ecosystem is the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;All the Core extensions are using the new &lt;code&gt;@ConfigMapping&lt;/code&gt;-based infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All the Quarkiverse extensions have been updated to use the new &lt;code&gt;@ConfigMapping&lt;/code&gt;-based infrastructure (except for &lt;code&gt;quarkus-logging-json&lt;/code&gt; but we have a &lt;a href=&quot;https://github.com/quarkiverse/quarkus-logging-json/pull/345&quot;&gt;pull request ready&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some other extensions participating to the Ecosystem CI have also been updated such as &lt;a href=&quot;https://persistence.blazebit.com/&quot;&gt;Blaze-Persistence&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We know some of you also develop custom extensions so we highly recommend moving your custom extensions to &lt;code&gt;@ConfigMapping&lt;/code&gt; as soon as possible, if not already done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find more information about it in &lt;a href=&quot;https://quarkus.io/guides/writing-extensions#configuration&quot;&gt;our documentation&lt;/a&gt; and a ton of examples in the &lt;a href=&quot;https://github.com/search?q=repo%3Aquarkusio%2Fquarkus%20%40ConfigMapping&amp;amp;type=code&quot;&gt;Quarkus Core repository&lt;/a&gt; or the &lt;a href=&quot;https://github.com/search?q=org%3Aquarkiverse+%40ConfigMapping&amp;amp;type=code&quot;&gt;Quarkiverse extensions&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any questions while migrating, please ask them in &lt;a href=&quot;https://github.com/quarkusio/quarkus/discussions/categories/q-a&quot;&gt;GitHub Discussions&lt;/a&gt;, we will be happy to help.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;coming-in-3-25&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#coming-in-3-25&quot;&gt;&lt;/a&gt;Coming in 3.25&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 3.25, we will throw an error when the extension annotation processor is used with &lt;code&gt;-AlegacyConfigRoot=true&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;It won&amp;#8217;t be possible to build an extension containing legacy config classes with Quarkus 3.25 anymore.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;coming-in-3-26&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#coming-in-3-26&quot;&gt;&lt;/a&gt;Coming in 3.26&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 3.26, we will remove all support for legacy config classes, meaning they won&amp;#8217;t work anymore.
&lt;strong&gt;If one of the extensions of your application is using any legacy config class, your application won&amp;#8217;t build.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that since 3.19.4, you get a warning if any of the extensions in your application is using legacy config classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will also drop all the compatibility classes we kept until then:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;GlobalDevServicesConfig&lt;/code&gt;: use &lt;code&gt;DevServicesConfig&lt;/code&gt; instead&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;HttpConfiguration&lt;/code&gt;: use &lt;code&gt;VertxHttpConfig&lt;/code&gt; instead&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;HttpBuildTimeConfig&lt;/code&gt;: use &lt;code&gt;VertxHttpBuildTimeConfig&lt;/code&gt; instead&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;feedback-and-questions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#feedback-and-questions&quot;&gt;&lt;/a&gt;Feedback and questions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any feedback or questions regarding this change, please either use &lt;a href=&quot;https://github.com/quarkusio/quarkus/discussions/categories/q-a&quot;&gt;GitHub Discussions&lt;/a&gt; or the &lt;a href=&quot;https://groups.google.com/g/quarkus-dev&quot;&gt;quarkus-dev Google groups&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 03 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/legacy-config-classes-sunsetting/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.24.2 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-24-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.24.2, the first (we skipped 3.24.0) maintenance release for our 3.24 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.24, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.24.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.24&quot;&gt;Quarkus 3.24 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.24.2&quot;&gt;3.24.2&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 02 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-24-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus and WildFly teams from Red Hat collaborating with Google on launch of Agent2Agent Java SDK</title>
            <link>
                https://quarkus.io/blog/a2a-project-launches-java-sdk/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The agent revolution just took a massive leap forward! Following the
recent landmark &lt;a href=&quot;https://developers.googleblog.com/en/google-cloud-donates-a2a-to-linux-foundation/&quot;&gt;announcement&lt;/a&gt; that Google has donated the Agent2Agent
(A2A) protocol to the Linux Foundation, we’re thrilled to announce the
launch of the &lt;a href=&quot;https://github.com/a2aproject/a2a-java&quot;&gt;A2A Java SDK&lt;/a&gt;, created by the WildFly and Quarkus teams in close collaboration, and now contributed to the official A2A project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;a-new-era-under-linux-foundation-stewardship&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-new-era-under-linux-foundation-stewardship&quot;&gt;&lt;/a&gt;A New Era Under Linux Foundation Stewardship&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://a2aproject.github.io/A2A/latest/specification&quot;&gt;A2A&lt;/a&gt; protocol’s transition to the Linux Foundation represents more
than just a change of governance: it’s a commitment to vendor-neutral,
community-driven innovation. Similar how WildFly and Quarkus both recently joined the CommonHaus foundation. This ensures that A2A, as a critical interoperability
standard, remains open and accessible to all. With more than 100
companies now supporting the protocol, we’re witnessing the formation of
what industry leaders are calling &amp;#8220;an open, interoperable Internet of
Agents.&amp;#8221;
With the A2A Java SDK now part of this movement, enterprise developers can participate in this open agent ecosystem from day one.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-java-sdk-matters&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-java-sdk-matters&quot;&gt;&lt;/a&gt;Why Java SDK Matters&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s where things get exciting from a technical perspective: &lt;strong&gt;true
polyglot agent ecosystems&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The agent landscape has been fragmented, with Python dominating AI/ML
workflows, JavaScript powering web-based agents, and Java serving as the
backbone of enterprise backend systems. Siloed development across language ecosystems has held back the true potential of agentic applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our Java SDK shatters these barriers by implementing the A2A protocol
specification natively in Java, enabling:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enterprise-grade agent integration&lt;/strong&gt; with existing Java
infrastructure&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Seamless interoperability&lt;/strong&gt; between Java agents and those written in
Python, JavaScript, or any A2A-compatible language with
well-tested enterprise capabilities (including observability, security&amp;#8230;&amp;#8203;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And you know what? Writing agents in Java is now as easy as writing&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;1-a-class-that-creates-an-a2a-agent-card&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1-a-class-that-creates-an-a2a-agent-card&quot;&gt;&lt;/a&gt;1. A class that creates an A2A Agent Card&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;import io.a2a.spec.AgentCapabilities;
import io.a2a.spec.AgentCard;
import io.a2a.spec.AgentSkill;
import io.a2a.spec.PublicAgentCard;
...

@ApplicationScoped
public class WeatherAgentCardProducer {

    @Produces
    @PublicAgentCard
    public AgentCard agentCard() {
        return new AgentCard.Builder()
                .name(&quot;Weather Agent&quot;)
                .description(&quot;Helps with weather&quot;)
                .url(&quot;http://localhost:10001&quot;)
                .version(&quot;1.0.0&quot;)
                .capabilities(new AgentCapabilities.Builder()
                        .streaming(true)
                        .pushNotifications(false)
                        .stateTransitionHistory(false)
                        .build())
                .defaultInputModes(Collections.singletonList(&quot;text&quot;))
                .defaultOutputModes(Collections.singletonList(&quot;text&quot;))
                .skills(Collections.singletonList(new AgentSkill.Builder()
                        .id(&quot;weather_search&quot;)
                        .name(&quot;Search weather&quot;)
                        .description(&quot;Helps with weather in city, or states&quot;)
                        .tags(Collections.singletonList(&quot;weather&quot;))
                        .examples(List.of(&quot;weather in LA, CA&quot;))
                        .build()))
                .build();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-a-class-that-creates-an-a2a-agent-executor&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2-a-class-that-creates-an-a2a-agent-executor&quot;&gt;&lt;/a&gt;2. A class that creates an A2A Agent Executor&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;import io.a2a.server.agentexecution.AgentExecutor;
import io.a2a.server.agentexecution.RequestContext;
import io.a2a.server.events.EventQueue;
import io.a2a.server.tasks.TaskUpdater;
import io.a2a.spec.JSONRPCError;
import io.a2a.spec.Message;
import io.a2a.spec.Part;
import io.a2a.spec.Task;
import io.a2a.spec.TaskNotCancelableError;
import io.a2a.spec.TaskState;
import io.a2a.spec.TextPart;
...

@ApplicationScoped
public class WeatherAgentExecutorProducer {

    @Inject
    WeatherAgent weatherAgent;

    @Produces
    public AgentExecutor agentExecutor() {
        return new WeatherAgentExecutor(weatherAgent);
    }

    private static class WeatherAgentExecutor implements AgentExecutor {

        private final WeatherAgent weatherAgent;

        public WeatherAgentExecutor(WeatherAgent weatherAgent) {
            this.weatherAgent = weatherAgent;
        }

        @Override
        public void execute(RequestContext context, EventQueue eventQueue) throws JSONRPCError {
            TaskUpdater updater = new TaskUpdater(context, eventQueue);

            // mark the task as submitted and start working on it
            if (context.getTask() == null) {
                updater.submit();
            }
            updater.startWork();

            // extract the text from the message
            String userMessage = extractTextFromMessage(context.getMessage());

            // call the weather agent with the user&apos;s message
            String response = weatherAgent.chat(userMessage);

            // create the response part
            TextPart responsePart = new TextPart(response, null);
            List&amp;lt;Part&amp;lt;?&amp;gt;&amp;gt; parts = List.of(responsePart);

            // add the response as an artifact and complete the task
            updater.addArtifact(parts, null, null, null);
            updater.complete();
        }

        @Override
        public void cancel(RequestContext context, EventQueue eventQueue) throws JSONRPCError {
            Task task = context.getTask();

            if (task.getStatus().state() == TaskState.CANCELED) {
                // task already cancelled
                throw new TaskNotCancelableError();
            }

            if (task.getStatus().state() == TaskState.COMPLETED) {
                // task already completed
                throw new TaskNotCancelableError();
            }

            // cancel the task
            TaskUpdater updater = new TaskUpdater(context, eventQueue);
            updater.cancel();
        }

        private String extractTextFromMessage(Message message) {
            StringBuilder textBuilder = new StringBuilder();
            if (message.getParts() != null) {
                for (Part part : message.getParts()) {
                    if (part instanceof TextPart textPart) {
                        textBuilder.append(textPart.getText());
                    }
                }
            }
            return textBuilder.toString();
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pretty straightforward, right? The SDK provides all the necessary
components to create agent cards, handle agent execution, and manage
communication between agents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note: In future some of this boiler plate code we expect will be simplified by Quarkus and other frameworks using the A2A Java SDK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And when it comes to client-side development, it&amp;#8217;s even easier. The SDK
includes a simple A2A client that allows you to interact with A2A agents
using the A2A protocol. This client abstracts away the complexities of
the protocol, making it easy to send messages, receive responses, and
manage agent interactions. Creating an A2A client in Java is as simple as:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;1-create-an-a2a-client&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1-create-an-a2a-client&quot;&gt;&lt;/a&gt;1. Create an A2A client&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;// Create an A2AClient (the URL specified is the server agent&apos;s URL, be sure to replace it with the actual URL of the A2A server you want to connect to)
A2AClient client = new A2AClient(&quot;http://localhost:1234&quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-send-a-message-to-the-a2a-server-agent&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2-send-a-message-to-the-a2a-server-agent&quot;&gt;&lt;/a&gt;2. Send a message to the A2A server agent&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;// Send a text message to the A2A server agent
Message message = A2A.toUserMessage(&quot;tell me a joke&quot;); // the message ID will be automatically generated for you
MessageSendParams params = new MessageSendParams.Builder()
        .message(message)
        .build();
SendMessageResponse response = client.sendMessage(params);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;A2A#toUserMessage&lt;/code&gt; will automatically generate a message ID
for you when creating the &lt;code&gt;Message&lt;/code&gt; if you don’t specify it. You can
also explicitly specify a message ID like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;Message message = A2A.toUserMessage(&quot;tell me a joke&quot;, &quot;message-1234&quot;); // messageId is message-1234&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the SDK also provides a convenient way to handle task management,
allowing you to create, get the current state, and cancel tasks with ease. This is
especially useful for managing long-running operations or coordinating
complex workflows between multiple agents. You can find more details
about task management and many other features in the &lt;strong&gt;&lt;a href=&quot;https://github.com/a2aproject/a2a-java&quot;&gt;A2A Java SDK&lt;/a&gt;&lt;/strong&gt; repository&amp;#8217;s.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You just want more code? Are you interested to see interoperability in action? Explore our
&lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/multi_language/python_and_java_multiagent&quot;&gt;multi-language
sample implementation&amp;#44;&lt;/a&gt; which demonstrates how Python and Java
agents collaborate seamlessly. See this picture for a bird-eye overview,
and checkout the code for more insights&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/a2a-announce/a2a-agentic.png&quot; alt=&quot;a2a agentic&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;technical-excellence-the-mutiny-zero-advantage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#technical-excellence-the-mutiny-zero-advantage&quot;&gt;&lt;/a&gt;Technical Excellence: The Mutiny-Zero Advantage&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And if you need your agent to be reactive, don&amp;#8217;t worry about the dependencies you are adding, because
the Java SDK leverages &lt;strong&gt;mutiny-zero&lt;/strong&gt; as its reactive foundation, a
decision that reflects our commitment to framework-agnostic excellence.
&lt;a href=&quot;https://smallrye.io/smallrye-mutiny-zero/latest/&quot;&gt;Mutiny Zero&lt;/a&gt; is a minimal API for creating reactive streams-compliant
publishers that weighs less than 50K and have &lt;strong&gt;zero&lt;/strong&gt; external dependencies
beyond the Reactive Streams API. This architecture delivers several
compelling advantages:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;No Vendor Lock-in&lt;/strong&gt;: No specific technology commitments for your
agents.&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lightweight Performance&lt;/strong&gt;: Faster startups, reduced resource
consumption.&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Maximum Compatibility&lt;/strong&gt;: Seamless integration with existing Java
reactive ecosystems.&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Future-Proof Design&lt;/strong&gt;: Ready for Java’s modern Flow APIs, backward
compatible.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This reactive foundation ensures your Java agents can handle
high-throughput, low-latency agent-to-agent communications while
remaining lightweight and composable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;community-driven-innovation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#community-driven-innovation&quot;&gt;&lt;/a&gt;Community-Driven Innovation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What started as an external contribution has now become an official part
of the A2A project repository, showcasing how the ecosystem can rapidly
evolve through diverse contributions. This is precisely the kind of
collaborative development that will accelerate A2A adoption and
innovation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ready to dive in? Here’s your roadmap:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Explore the SDK&lt;/strong&gt;: Visit
&lt;a href=&quot;https://github.com/a2aproject/a2a-java&quot;&gt;github.com/a2aproject/a2a-java&lt;/a&gt;
to examine the implementation&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Study Real Examples&lt;/strong&gt;: Check out the
&lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/multi_language/python_and_java_multiagent&quot;&gt;multi-language
samples&lt;/a&gt; to see interoperability in action&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Join the Community&lt;/strong&gt;: Connect with fellow developers in the A2A
ecosystem&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Start Building&lt;/strong&gt;: Begin prototyping your first multi-language agent
team&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-bigger-picture-collaborative-intelligence&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-bigger-picture-collaborative-intelligence&quot;&gt;&lt;/a&gt;The Bigger Picture: Collaborative Intelligence&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The A2A protocol aims to break down the silos that currently limit the
potential of AI infuse applications by providing a common language for
AI agents to discover each other’s capabilities, securely exchange
information, and coordinate complex tasks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Java now joining Python and JavaScript in the A2A ecosystem, we’re
building towards a future where intelligence is truly collaborative,
where the most sophisticated AI systems are assembled from specialized
agents, each optimized for specific tasks but unified through
standardized communication protocols.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This Java SDK launch is just the beginning. The A2A project under Linux
Foundation stewardship is positioned for rapid expansion, with
additional language implementations, enhanced security features, and
enterprise-grade tooling on the horizon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Your contributions matter&lt;/strong&gt;. Whether you’re fixing bugs, adding
features, creating examples, or building integrations with other frameworks — every commithelps build this collaborative future.
The agent revolution is here, and with the A2A Java SDK, the entire Java
ecosystem can participate. Let’s build something amazing together! 🚀&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Fri, 27 Jun 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/a2a-project-launches-java-sdk/
            </guid>
            
            
            
            <author>Stefano Maestri (https://twitter.com/maeste)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.24 - Dev Assistant, Hibernate ORM 7, Hibernate Validator 9...</title>
            <link>
                https://quarkus.io/blog/quarkus-3-24-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.24.
It comes with major version upgrades to major components and a brand new feature: the Dev Assistant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47756&quot;&gt;#47756&lt;/a&gt; - Introduce the Assistant&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/41310&quot;&gt;#41310&lt;/a&gt; - Upgrade to Hibernate ORM 7.0, Hibernate Reactive 3.0, and Hibernate Search 8.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/42292&quot;&gt;#42292&lt;/a&gt; - Upgrade to Hibernate Validator 9.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47108&quot;&gt;#47108&lt;/a&gt; - Upgrade to Kafka Client 4.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47830&quot;&gt;#47830&lt;/a&gt; - Add OIDC Health Check&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.24, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.24.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.24&quot;&gt;Quarkus 3.24 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dev-assistant&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dev-assistant&quot;&gt;&lt;/a&gt;Dev Assistant&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We all love Quarkus&apos; Dev UI and Quarkus 3.24 paves the way for major improvements to the Dev UI through a brand new feature: the Dev Assistant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Assistant is a new extension point to provide features assisting you in your daily coding:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Generate clients from your OpenAPI specification&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate additional test data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#8230;&amp;#8203; sky is the limit!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Assistant can offer features that are backed by AI, but isn&amp;#8217;t limited to it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have been cooking an extension leveraging the Assistant feature for a while: &lt;a href=&quot;https://github.com/quarkiverse/quarkus-chappie&quot;&gt;Quarkus Chappie&lt;/a&gt;.
You can already add it to your projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But don&amp;#8217;t see it as the end of things:
you can develop your own Assistant features in your extensions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/Q88NQp_Uul4?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hibernate-orm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hibernate-orm&quot;&gt;&lt;/a&gt;Hibernate ORM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hibernate ORM was updated to &lt;a href=&quot;https://hibernate.org/orm/releases/7.0/&quot;&gt;7.0&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a major version and it comes with new features and significant changes that are presented in more details in a &lt;a href=&quot;https://quarkus.io/blog/hibernate7-on-quarkus/&quot;&gt;dedicated blog post&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please also have a look to the dedicated section of our &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.24#jakarta-persistence-hibernate-orm&quot;&gt;migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hibernate ORM 7.0 is an implementation of &lt;a href=&quot;https://jakarta.ee/specifications/persistence/3.2/&quot;&gt;Jakarta Persistence 3.2&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hibernate-reactive&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hibernate-reactive&quot;&gt;&lt;/a&gt;Hibernate Reactive&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hibernate Validator was updated to &lt;a href=&quot;https://hibernate.org/reactive/releases/3.0/&quot;&gt;3.0&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hibernate-search&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hibernate-search&quot;&gt;&lt;/a&gt;Hibernate Search&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hibernate Search was updated to &lt;a href=&quot;https://hibernate.org/search/releases/8.0/&quot;&gt;8.0&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hibernate-validator&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hibernate-validator&quot;&gt;&lt;/a&gt;Hibernate Validator&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hibernate Validator was updated to &lt;a href=&quot;https://hibernate.org/validator/releases/9.0/&quot;&gt;9.0&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hibernate Validator 9.0 is an implementation of &lt;a href=&quot;https://jakarta.ee/specifications/bean-validation/3.1/&quot;&gt;Jakarta Validation 3.1&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;kafka-client&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kafka-client&quot;&gt;&lt;/a&gt;Kafka Client&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Kafka Client has been updated to 4.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;oidc-health-check&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#oidc-health-check&quot;&gt;&lt;/a&gt;OIDC health check&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.24 offers a health check for OIDC that allows to check your Quarkus application is able to connect to your OIDC server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been upgraded to 3.24.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.24.0.CR1&quot;&gt;3.24.0.CR1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.24.0&quot;&gt;3.24.0&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.24.1&quot;&gt;3.24.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1092 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.24 release, thanks to Alexandre Dutra, Alexey Loubyansky, appiepollo14, Ashish Ranjan, Bill Burke, Bruno Baptista, Clement Escoffier, David M. Lloyd, Davide D&amp;#8217;Alto, Erik Mattheis, Foivos Zakkak, Fouad Almalki, gbourant, George Gastaldi, Georgios Andrianakis, Guillaume Smet, Holly Cummins, Inaki Villar, João Lopes, Julien Ponge, Katia Aresti, Kevin Wooten, Ladislav Thon, Lars, Lukas Schmitt, Marc Nuri, Marco Belladelli, marko-bekhta, Martin Bartoš, Martin Kouba, Martin Panzer, Matej Novotny, melloware, Michael Edgar, Michal Maléř, Michal Vavřík, Nicholas Hassan, nort3x, Ozan Gunalp, patriot1burke, Peter Palaga, Phillip Krüger, Robert Stupp, Roberto Cortez, Rostislav Svoboda, Sebastian Vogl, Sergey Beryozkin, Stefan Schmöller, Steve Hawkins, Stuart Douglas, Stéphane Épardaud, Teymur Babayev, Tim van der Lippe, Vincent Potucek, Volodymyr, xstefank, Yahya Berbeche, and Yoann Rodière.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 25 Jun 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-24-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Hibernate ORM 7 on Quarkus: each new version brings a better database experience</title>
            <link>
                https://quarkus.io/blog/hibernate7-on-quarkus/
            </link>
            <description>
                &lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hibernate ORM is improving at a very fast speed, and so is its integration with Quarkus, as great database access is a key part of the Quarkus experience.
The latest Quarkus 3.24 release upgrades Hibernate to version 7, a major upgrade that implies some breaking changes, and thus will require paying attention to the &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/7.0/migration-guide/migration-guide.html&quot;&gt;migration guide&lt;/a&gt; when upgrading.
Developers working on Hibernate and Quarkus are constantly collaborating, so here’s a quick peek at what happened over the past few months and at what Quarkus users might expect in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;license-and-governance-updates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#license-and-governance-updates&quot;&gt;&lt;/a&gt;License and Governance Updates&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both Quarkus and Hibernate are now projects of the &lt;a href=&quot;https://www.commonhaus.org&quot;&gt;Commonhaus Foundation&lt;/a&gt;, a non-profit organization dedicated to creating a collaborative environment for open-source libraries.
Since the upgrade to Hibernate 7, Quarkus and all Hibernate libraries now share the same open-source license: the &lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apache License Version 2.0&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hibernate-orm-7-0-updates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hibernate-orm-7-0-updates&quot;&gt;&lt;/a&gt;Hibernate ORM 7.0 Updates&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new version of Hibernate brings better performance and &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/7.0/whats-new/whats-new.html&quot;&gt;all kinds of new features&lt;/a&gt;, some of which improve the developer experience, such as &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/7.0/whats-new/whats-new.html#session-find-multiple&quot;&gt;using &lt;code&gt;findMultiple()&lt;/code&gt; and &lt;code&gt;getMultiple()&lt;/code&gt;&lt;/a&gt; to efficiently fetch entities in batches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;support-for-jakarta-data&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#support-for-jakarta-data&quot;&gt;&lt;/a&gt;Support for Jakarta Data&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://jakarta.ee/specifications/data/1.0/jakarta-data-1.0&quot;&gt;Jakarta Data&lt;/a&gt; is a simpler way to write data-accessing applications, and it’s been supported in Quarkus since &lt;a href=&quot;https://in.relation.to/2024/11/04/data-in-quarkus/&quot;&gt;November 2024&lt;/a&gt;. We suggest giving it a try, as it enables a very quick and easy implementation of the DAO/repository patterns, without any boilerplate code and in a type-safe manner. To get started, simply include the &lt;code&gt;jakarta.data:jakarta.data-api&lt;/code&gt; dependency with the latest version of Quarkus, i.e.:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
       &amp;lt;groupId&amp;gt;jakarta.data&amp;lt;/groupId&amp;gt;
       &amp;lt;artifactId&amp;gt;jakarta.data-api&amp;lt;/artifactId&amp;gt;
 &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s an example of how a simple repository can be written:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@Repository
public interface Library {

    @Find
    Optional&amp;lt;Book&amp;gt; byIsbn(String isbn);

    @Query(&quot;&quot;&quot;
            select b.isbn, b.title, listagg(a.name, &apos; &amp;amp; &apos;)
            from Book b join b.authors a
            group by b
            order by b.isbn
            &quot;&quot;&quot;)
    List&amp;lt;Summary&amp;gt; summarize();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This topic deserves a deeper dive, so let us know if you&amp;#8217;re interested, as we could provide more content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the meantime, you can always refer to the &lt;a href=&quot;https://quarkus.io/version/main/guides/hibernate-orm#jakarta-data-2&quot;&gt;dedicated Quarkus guide&lt;/a&gt; to get started quickly, and to the &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/7.0/repositories/html_single/Hibernate_Data_Repositories.html&quot;&gt;corresponding documentation in Hibernate ORM&lt;/a&gt; for more advanced usage.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;new-restrictions-api&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-restrictions-api&quot;&gt;&lt;/a&gt;New Restrictions API&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the deprecation of the old Hibernate Criteria API, developers were still missing its simplicity, so the Hibernate team introduced a new &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/7.0/introduction/html_single/Hibernate_Introduction.html#restrictions-and-ordering&quot;&gt;Restrictions API&lt;/a&gt; that even has new features, such as the possibility to further restrict an already-written JPQL/HQL query.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;List&amp;lt;Book&amp;gt; books =
    SelectionSpecification.create(Book.class,
        &quot;&quot;&quot;
            from Book where discontinued = false
        &quot;&quot;&quot;)
        .restrict(Restriction.startsWith(Book_.title, &quot;hibernate&quot;))
        .sort(Order.desc(Book_.title))
        .createQuery(session)
        .setPage(Page.first(50))
        .getResultList();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This feature can also be used with &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/7.0/repositories/html_single/Hibernate_Data_Repositories.html#dynamic-restrictions&quot;&gt;Hibernate Data Repositories&lt;/a&gt; (the Hibernate implementation of the Jakarta Data API), and create a repository that allows filtering without having to write any JPQL/HQL code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@Find
List&amp;lt;Book&amp;gt; books(Restriction&amp;lt;Book&amp;gt; restriction,
                 Order&amp;lt;Book&amp;gt; order);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When user will call the method, they can pass the &lt;code&gt;Restriction&lt;/code&gt; objects to filter the wanted book.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;var books =
       library.books(Restriction.contains(Book_.title, &quot;Hibernate&quot;),
                     Order.of(_Book.title.ascIgnoreCase(),
                              _Book.isbn.asc()));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hibernate-reactive-together-with-hibernate-orm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hibernate-reactive-together-with-hibernate-orm&quot;&gt;&lt;/a&gt;Hibernate Reactive together with Hibernate ORM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A long-awaited feature is the ability to &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/13425&quot;&gt;mix Hibernate ORM and Hibernate Reactive extensions&lt;/a&gt; in the same Quarkus application. Without this feature, making the two extensions coexist required workarounds that are now unnecessary: since Quarkus 3.24, it&amp;#8217;s now possible to mix the two.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hibernate Reactive is a powerful reactive data access abstraction, but its advantages vary per project. Instead of dictating usage, we now enable users to experiment easily with both Hibernate ORM and Reactive. Projects using Hibernate ORM can add the Reactive extension, create reactive resources reusing mapped entities, run tests and benchmarks, and determine if it suits their specific needs and scalability goals. While using both, it’s easier to choose the most suitable approach for different use cases. Another benefit is that it makes it easier to migrate in small steps from one to the other as necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Panache users will also have this possibility starting from &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/46096&quot;&gt;Panache 2.0&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;injection-of-the-schemamanager&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#injection-of-the-schemamanager&quot;&gt;&lt;/a&gt;Injection of the SchemaManager&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Hibernate Schema Manager is a powerful tool to generate DDL scripts out of Java objects. Its power is now available to be used in Quarkus via dependency injection. This is particularly useful when &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/7.0/introduction/html_single/Hibernate_Introduction.html#testing&quot;&gt;writing tests&lt;/a&gt; letting you programmatically control when to do schema export, schema validation, data cleanup, and schema cleanup.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-future&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-future&quot;&gt;&lt;/a&gt;The Future&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The teams have many plans for the future of these important projects: the DevUI of Quarkus will be enhanced with improvements to the developer experience, with the possibility of &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/39584&quot;&gt;executing arbitrary HQL queries&lt;/a&gt; to try out the syntax and experiment with test data and &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/43723&quot;&gt;generating migration scripts on the fly&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/hibernate7/console.gif&quot; alt=&quot;console&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re working on improving the Hibernate Reactive extension as well, by providing support for &lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/48007&quot;&gt;Named Data Sources and Named Persistence Units&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, as part of giving a better experience for the user, the Quarkus and Hibernate teams constantly collaborate on performance and efficiency improvements. For example, an optimization that &lt;a href=&quot;https://hibernate.atlassian.net/browse/HHH-18326&quot;&gt;avoids the need for an &lt;code&gt;IdentityHashMap&lt;/code&gt; to track persistence entities&lt;/a&gt; improved the performance by &lt;a href=&quot;https://github.com/hibernate/hibernate-orm-benchmark/pull/15&quot;&gt;8% while running a simple query of 100-1000 immutable entities&lt;/a&gt;, end even more when dealing with persistent collections.
And that&amp;#8217;s just &lt;em&gt;one&lt;/em&gt; improvement among many, and not the last one: even bigger performance improvements are expected in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/guides/update-quarkus&quot;&gt;Take a look at the new release&lt;/a&gt; and let us know what you think!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 25 Jun 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/hibernate7-on-quarkus/
            </guid>
            
            
            
            <author>Luca Molteni (https://twitter.com/volothamp)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.23.4 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-23-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.23.4, the third (we skipped 3.23.1) maintenance release for our 3.23 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.23, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.23.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.23&quot;&gt;Quarkus 3.23 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.23.4&quot;&gt;3.23.4&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-23-4-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #57 - June</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-57/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus MCP Server is blazing a trail as the first Java MCP server with Streamable HTTP support—unlocking new possibilities for developers. Read more about in the blog post &quot;Quarkus MCP Server: The First Java Server SDK to Support Streamable HTTP!&quot; by Max Rydahl Andersen. Learn how Quarkus MCP Client can use access tokens to access secure MCP servers in Sergey Beryozkin&amp;#8217;s blog post &quot;Use Quarkus MCP client to access secure MCP HTTP servers&quot;. Leverage ChatGPT and existing Maven skills, to rapidly develop and deploy a new API with Quarkus. Ease the learning curve and achieving quick validation on Heroku. See how in &quot;How To Introduce a New API Quickly Using Quarkus and ChatGPT&quot; by John Vester. Explore LLM guardrails, why they matter, and how you can effectively implement them to ensure safe and trustworthy AI interactions in &quot;Ensuring Safe and Reliable AI Interactions with LLM Guardrails&quot; by Brian Vermeer. Learn about Prasbanth&amp;#8217;s first experience to see how the Java ecosystem is adapting to the world of cloud-native applications — and how that experience left him motivated to continue this journey in &quot;From Traditional Java to Cloud-Native with Quarkus: My First Boston Java Users Meetup Experience&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/57/&quot;&gt;Newsletter #57: June&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 12 Jun 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-57/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.23.3 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-23-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.23.3, the second (we skipped 3.23.1) maintenance release for our 3.23 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.23, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.23.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.23&quot;&gt;Quarkus 3.23 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.23.3&quot;&gt;3.23.3&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 11 Jun 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-23-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.23.2 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-23-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.23.2, the first (we skipped 3.23.1) maintenance release for our 3.23 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.23, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.23.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.23&quot;&gt;Quarkus 3.23 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.23.1&quot;&gt;3.23.1&lt;/a&gt; and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.23.2&quot;&gt;3.23.2&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-23-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.23 - Named datasources for Hibernate Reactive, OIDC bearer step up authentication</title>
            <link>
                https://quarkus.io/blog/quarkus-3-23-0-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.23.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;3.23 comes with a lot of small improvements and some bugfixes together with a couple of new features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47631&quot;&gt;#47631&lt;/a&gt; - Enable named data sources for Hibernate Reactive&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47445&quot;&gt;#47445&lt;/a&gt; - OIDC: Add bearer token step up authentication&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.23, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.23.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.23&quot;&gt;Quarkus 3.23 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;named-data-sources-for-hibernate-reactive&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#named-data-sources-for-hibernate-reactive&quot;&gt;&lt;/a&gt;Named data sources for Hibernate Reactive&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With 3.22, we started the journey of bringing the Hibernate Reactive extension up to par with the Hibernate ORM one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 3.23, it&amp;#8217;s now possible to point Hibernate Reactive to a named datasource.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next step will be to have support for multiple named persistence units for Hibernate Reactive and hopefully it will arrive in 3.24.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;oidc-bearer-step-up-authentication&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#oidc-bearer-step-up-authentication&quot;&gt;&lt;/a&gt;OIDC bearer step up authentication&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.23 introduces support for the OAuth 2.0 Step Up Authentication Challenge Protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can learn more about it in the &lt;a href=&quot;https://quarkus.io/guides/security-oidc-bearer-token-authentication#step-up-authentication&quot;&gt;dedicated section&lt;/a&gt; of the OIDC Bearer token authentication guide.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-cxf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-cxf&quot;&gt;&lt;/a&gt;Quarkus CXF&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus CXF 3.23 was released and is now available in &lt;a href=&quot;https://code.quarkus.io/?extension-search=origin:platform%20quarkus-cxf&quot;&gt;Quarkus Platform 3.23&lt;/a&gt;.
Check the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.23.0.html&quot;&gt;Quarkus CXF 3.23.0&lt;/a&gt; and &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.23.1.html&quot;&gt;3.23.1&lt;/a&gt; release notes for more information about what is new in these releases.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been upgraded to 3.23.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.23.0.CR1&quot;&gt;3.23.0.CR1&lt;/a&gt; and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.23.0&quot;&gt;3.23.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1083 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.23 release, thanks to Aditya Thakur, Alexandre Dutra, Alexey Loubyansky, Andrii Denysenko, Andy Damevin, appiepollo14, ayagmar, Bruno Baptista, Clement Escoffier, Fedor Dudinsky, Foivos Zakkak, Fouad Almalki, George Gastaldi, Georgios Andrianakis, Guillaume Smet, Holly Cummins, iedo, Ladislav Thon, Luca Molteni, luca-bassoricci, Lucien Brule, Magnus Gustafsson, Marc Nuri, mariofusco, marko-bekhta, Martin Bartoš, Martin Kouba, Martin Panzer, Matej Novotny, Matheus Cruz, Max Rydahl Andersen, melloware, Michael Edgar, Michal Vavřík, Michiel Dockx, Mikhail Polivakha, Olivier V, Ozan Gunalp, Peter Palaga, Phillip Krüger, Robert Stupp, Roberto Cortez, Rolfe Dlugy-Hegwer, Rostislav Svoboda, Sebastian Vogl, Sergey Beryozkin, Severin Gehwolf, shjones, Steve Hawkins, Stuart Douglas, Tamas Cservenak, and Yoann Rodière.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 28 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-23-0-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus MCP Server: The First Java Server SDK to Support Streamable HTTP!</title>
            <link>
                https://quarkus.io/blog/streamable-http-mcp/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Model Context Protocol (MCP) is taking the developer world by storm, and now, with its latest spec update: Streamable HTTP support has arrived!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re thrilled to announce that Quarkus MCP Server is the very first Java-based MCP server SDK to embrace this innovation, making it easier than ever for you to build, experiment, and deploy MCP-powered solutions—wherever you need them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server/releases/tag/1.2.0&quot;&gt;Quarkus MCP Server 1.2&lt;/a&gt; now supports Streamable HTTP alongside &lt;code&gt;stdio&lt;/code&gt; and &lt;code&gt;SSE&lt;/code&gt; transports. This enables new possibilities for connecting your MCP servers to mobile apps and cloud services. While the implementation is fully functional, some advanced features like &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26/basic/transports#resumability-and-redelivery&quot;&gt;Resumability and Redelivery&lt;/a&gt; are planned for future releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-streamable-http-matters&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-streamable-http-matters&quot;&gt;&lt;/a&gt;Why Streamable HTTP Matters&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Streamable HTTP is the approach MCP spec have taken for real-time, efficient, and scalable communication between clients and servers. It opens the door to new integrations and user experiences, especially for platforms and devices where traditional transports like SSE or stdio aren&amp;#8217;t ideal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And now, thanks to Quarkus MCP Server, Java developers are at the forefront of this evolution. Whether you&amp;#8217;re building AI assistants, developer tools, or next-gen chatbots, Streamable HTTP gives you the flexibility to reach more users, faster.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;easy-upgrade&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#easy-upgrade&quot;&gt;&lt;/a&gt;Easy upgrade&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ready to try it out? Just update your Maven dependency to the latest Quarkus MCP Server SSE transport:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.mcp&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-mcp-server-sse&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s it! You&amp;#8217;re now equipped to serve Streamable HTTP from your Java MCP server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to see how to write your own MCP server? Check out our previous post: &lt;a href=&quot;https://quarkus.io/blog/mcp-server/&quot;&gt;Introducing MCP Servers&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;quarkus-mcp-servers-power-and-simplicity&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-mcp-servers-power-and-simplicity&quot;&gt;&lt;/a&gt;Quarkus MCP Servers: Power and Simplicity&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-servers&quot;&gt;Quarkus MCP Servers project&lt;/a&gt; brings a suite of ready-to-use MCP servers, all built on Quarkus. With version 1.0.0.CR4, streamable HTTP support is baked in—no extra configuration required. We just updated the dependency, and it was ready to go!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To enable Streamable HTTP, simply launch any server in Quarkus MCP Servers with the &lt;code&gt;--sse&lt;/code&gt; flag:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;jbang jvminsight@mcp-java --sse&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;connecting-clients&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#connecting-clients&quot;&gt;&lt;/a&gt;Connecting Clients&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The default URL for Streamable HTTP is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;http://&amp;lt;your-ip&amp;gt;:8080/mcp/&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(For SSE, use &lt;code&gt;&lt;a href=&quot;http://&amp;lt;your-ip&amp;gt;:8080/mcp/sse&quot; class=&quot;bare&quot;&gt;http://&amp;lt;your-ip&amp;gt;:8080/mcp/sse&lt;/a&gt;&lt;/code&gt; as before.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While Streamable HTTP is still new, some pioneering clients already support it. Notably, the open source iOS app &lt;a href=&quot;https://github.com/daodao97/chatmcp&quot;&quot;&gt;ChatMCP&lt;/a&gt; (available on &lt;a href=&quot;https://testflight.apple.com/join/dCXksFJV&quot;&gt;TestFlight&lt;/a&gt;) and a non-open source version on the &lt;a href=&quot;https://apps.apple.com/dk/app/chatmcp/id6745196560&quot;&gt;iOS App Store&lt;/a&gt; both work seamlessly with MCP and support or even require Streamable HTTP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a quick demo of ChatMCP in action with the jvminsight server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;360&quot; height=&quot;640&quot; src=&quot;https://www.youtube.com/embed/6GomKEMucYs?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;kotlin-lightweight-and-fun&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kotlin-lightweight-and-fun&quot;&gt;&lt;/a&gt;Kotlin: Lightweight and Fun&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus supports both Java and Kotlin, giving you flexibility in how you build your MCP servers. Want to experiment? Here&amp;#8217;s a playful example of a Kotlin MCP server you can run instantly with JBang. It fetches a random image from &lt;a href=&quot;https://picsum.photos/&quot; class=&quot;bare&quot;&gt;https://picsum.photos/&lt;/a&gt; and returns it as a base64-encoded image, as the MCP spec requires.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-kotlin hljs&quot; data-lang=&quot;kotlin&quot;&gt;///usr/bin/env jbang &quot;$0&quot; &quot;$@&quot; ; exit $?

//KOTLIN
//DEPS io.quarkus:quarkus-bom:${quarkus.version:3.20.0}@pom
//DEPS io.quarkiverse.mcp.servers:mcp-server-shared:1.0.0.CR4

import io.quarkiverse.mcp.server.*
import java.net.URL
import java.util.Base64.getEncoder
import kotlin.io.readBytes

class demo {

   @Tool(description = &quot;Get a random picture&quot;)
   fun randomimage(@ToolArg(description = &quot;seed for randomness&quot;) seed: String,
                   @ToolArg(description = &quot;width&quot;, defaultValue = &quot;300&quot;) width: Int,
                   @ToolArg(description = &quot;height&quot;, defaultValue = &quot;300&quot;) height : Int): ImageContent {

      val image = URL(&quot;https://picsum.photos/seed/$seed/$width/$height&quot;).readBytes()

      return ImageContent(
         getEncoder().encodeToString(image),
         &quot;image/jpeg&quot;
      )
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Save this as &lt;code&gt;demo.kt&lt;/code&gt; and run it with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;jbang demo.kt --sse&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now use the &lt;code&gt;randomimage&lt;/code&gt; tool in ChatMCP or any other MCP client that supports Streamable HTTP. It&amp;#8217;s that easy—and a great way to start experimenting!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Streamable HTTP is an important step for the MCP ecosystem, and Quarkus MCP Server is putting Java developers in the driver&amp;#8217;s seat. Whether you&amp;#8217;re building tools, bots, or entirely new experiences, now&amp;#8217;s the perfect time to dive in and see what you can create.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can&amp;#8217;t wait to see what you build. Try it out, share your feedback, and help shape the future of MCP — powered by Quarkus!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Fri, 23 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/streamable-http-mcp/
            </guid>
            
            
            
            <author>Max Rydahl Andersen (https://twitter.com/maxandersen)</author>
            
        </item>
        
        <item>
            <title>Use Quarkus MCP client to access secure MCP HTTP servers</title>
            <link>
                https://quarkus.io/blog/secure-mcp-client/
            </link>
            <description>
                &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MCP servers that use the &lt;em&gt;Streamable HTTP&lt;/em&gt; or HTTP/SSE transports may require MCP client authentication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/&quot;&gt;Getting ready for secure MCP with Quarkus MCP Server&lt;/a&gt; blog post, we explained how to enforce MCP client authentication with the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server&quot;&gt;Quarkus MCP Server&lt;/a&gt; and demonstrated how &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/#mcp-server-devui&quot;&gt;MCP Server DevUI&lt;/a&gt; can use Keycloak access tokens to access the MCP server in dev mode and how &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/#mcp-inspector&quot;&gt;MCP Inspector&lt;/a&gt; and &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/#use-curl-to-access-the-mcp-server&quot;&gt;curl&lt;/a&gt; can use GitHub access tokens to access the MCP server in prod mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, we will explain how &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html&quot;&gt;Quarkus MCP Client&lt;/a&gt; can use access tokens to access secure MCP servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will show how to log in to Quarkus LangChain4j AI &lt;code&gt;Poem Service&lt;/code&gt; application with GitHub OAuth2 and have Google AI Gemini use tools with the help from Quarkus MCP Client that can propagate the GitHub access token to the secure Quarkus MCP Server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;demo-architecture&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#demo-architecture&quot;&gt;&lt;/a&gt;Demo architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_client/poem_service_architecture.png&quot; alt=&quot;Poem Service Architecture&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see in the diagram above, the user logs in into the Quarkus REST &lt;code&gt;Poem Service&lt;/code&gt; application endpoint. To support the user request to create a poem, the &lt;code&gt;Poem Service&lt;/code&gt; uses &lt;code&gt;AI Gemini&lt;/code&gt; and requests &lt;code&gt;MCP Client&lt;/code&gt; to complete a tool call to help &lt;code&gt;AI Gemini&lt;/code&gt; to find out the name of the logged-in user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An essential point is that both &lt;code&gt;Poem Service&lt;/code&gt; and &lt;code&gt;MCP Client&lt;/code&gt; are part of the same single Quarkus REST application that only users who logged in with GitHub can access. The users do not login to &lt;code&gt;MCP Client&lt;/code&gt;, they login to the &lt;code&gt;Poem Service&lt;/code&gt; application, using the &lt;code&gt;MCP client&lt;/code&gt; is an implementation detail of how this application completes the user request.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, this demo does not demonstrate an implementation of the &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization&quot;&gt;MCP Authorization&lt;/a&gt; flow which is primarily of interest to public MCP clients implemented as Single-page applications (SPA), such as as Anthropic Claude, that will be able to initiate a user login into an imported MCP server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This demo shows a typical &lt;code&gt;OAuth2&lt;/code&gt; authorization code flow where a user logs-in to a REST endpoint and authorizes it to access another service on the user&amp;#8217;s behalf. It also strengthens the message about the &lt;a href=&quot;https://quarkus.io/blog/gemini-personal-assistant/#integrated-ai-security&quot;&gt;AI security being an integral part of your application security&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, let&amp;#8217;s temporarily update the diagram by removing the &lt;code&gt;AI Gemini&lt;/code&gt;, replacing &lt;code&gt;MCP Client&lt;/code&gt; with &lt;code&gt;REST Client&lt;/code&gt;, &lt;code&gt;MCP Server&lt;/code&gt; with &lt;code&gt;Poem Creator service&lt;/code&gt; and &lt;code&gt;GitHub&lt;/code&gt; with &lt;code&gt;OAuth2&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_client/typical_oauth2_authorization.png&quot; alt=&quot;Typical OAuth2 Authorization&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will very likely find similarities between this diagram and what you do in your projects. It is the OAuth2 authorization code flow in action: the user logs in to the application and authorizes it to access another service offering a poem creation on the user&amp;#8217;s behalf.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The demo shows that Quarkus MCP Client can work effectively in such architectures by being able to use access tokens acquired during the user login, without you having to write any custom code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are now ready to start working on the &lt;code&gt;Secure MCP Client Server&lt;/code&gt; demo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find the complete project source in the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-sse-client-server&quot;&gt;Quarkus LangChain4j Secure MCP Client Server sample&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-mcp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-mcp-server&quot;&gt;&lt;/a&gt;Step 1 - Create and start MCP server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let&amp;#8217;s create a secure Quarkus MCP SSE server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you already created the MCP server &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/#initial-mcp-server&quot;&gt;as described&lt;/a&gt; in the the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/&quot;&gt;Getting ready for secure MCP with Quarkus MCP Server&lt;/a&gt; blog post, then you will find instructions below familiar and should be able to reuse the project you created earlier with minor updates.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MCP server requires authentication to establish Server-Sent Events (SSE) connection and also when invoking the tools. Additionally, the MCP server endpoint that provides access to tools requires that the security identity has a &lt;code&gt;read:name&lt;/code&gt; permission.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-dependencies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-dependencies&quot;&gt;&lt;/a&gt;MCP server maven dependencies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the following dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.mcp&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-mcp-server-sse&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &amp;lt;version&amp;gt;1.1.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-oidc&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-hibernate-orm-panache&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-jdbc-postgresql&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-mcp-server-sse&lt;/code&gt; is required to support MCP SSE transport.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-oidc&lt;/code&gt; is required to secure access to MCP SSE endpoints. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-hibernate-orm-panache&lt;/code&gt; and &lt;code&gt;quarkus-jdbc-postgresql&lt;/code&gt; are required to support the &lt;a href=&quot;#security-identity-augmentation&quot;&gt;Security Identity Augmentation&lt;/a&gt;. Their versions are defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-tool&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-tool&quot;&gt;&lt;/a&gt;MCP server tool&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s create a tool that can return the name of the currently logged-in user. It can be invoked only if the current MCP request is authenticated but also if the security identity has a &lt;code&gt;read:name&lt;/code&gt; permission:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import io.quarkiverse.mcp.server.TextContent;
import io.quarkiverse.mcp.server.Tool;
import io.quarkus.security.PermissionsAllowed;
import io.quarkus.security.identity.SecurityIdentity;
import jakarta.inject.Inject;

public class UserNameProvider {

    @Inject
    SecurityIdentity securityIdentity;

    @Tool(name = &quot;user-name-provider&quot;, description = &quot;Provides a name of the currently logged-in user&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    @PermissionsAllowed(&quot;read:name&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    TextContent provideUserName() {
        return new TextContent(securityIdentity.getPrincipal().getName()); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Provide a tool that can return the name of the current user.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Require authenticated tool access with an additional authorization &lt;code&gt;read:name&lt;/code&gt; permission constraint - yes, the only difference with an unauthenticated MCP server tool is &lt;code&gt;@PermissionsAllowed(&quot;read:name&quot;)&lt;/code&gt;, that&amp;#8217;s it!
See also how the main MCP SSE endpoint is secured in the &lt;a href=&quot;#mcp-server-configuration&quot;&gt;MCP Server Configuration&lt;/a&gt; section below.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use the injected &lt;code&gt;SecurityIdentity&lt;/code&gt; to return the current user&amp;#8217;s name. Alternatively, it can be acquired from the injected &lt;code&gt;quarkus.oidc.UserInfo&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;security-identity-augmentation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#security-identity-augmentation&quot;&gt;&lt;/a&gt;Security Identity Augmentation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To meet the &lt;code&gt;@PermissionsAllowed(&quot;read:name&quot;)&lt;/code&gt; authorization constraint, the security identity created after verifying the GitHub access token must be augmented to have a &lt;code&gt;read:name&lt;/code&gt; permission.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The demo expects that a database has a record with a GitHub account name and the assigned permission. The security identity augmentor uses the identity name to retrieve this record and enhance the identity with the discovered permission.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s see how this rather complex task can be easily achieved in Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, we create a Panache entity that keeps the account name and permission values:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import io.quarkus.hibernate.orm.panache.PanacheEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;

@Entity
public class Identity extends PanacheEntity {
    @Column(unique = true)
    public String name;
    public String permission;

    public static Identity findByName(String name) { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        return find(&quot;name&quot;, name).firstResult();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Utility method to find an identity record with a matching GitHub account name.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Second, we create an &lt;code&gt;import.sql&lt;/code&gt; script to have a demo record added to the database:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;INSERT INTO identity(id, name, permission) VALUES (1, &apos;${user.name}&apos;, &apos;read:name&apos;); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Insert a demo record. You will provide your GitHub account name when starting MCP server.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, we create a security identity augmentor:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import io.quarkus.security.identity.AuthenticationRequestContext;
import io.quarkus.security.identity.SecurityIdentity;
import io.quarkus.security.identity.SecurityIdentityAugmentor;
import io.quarkus.security.runtime.QuarkusSecurityIdentity;
import io.smallrye.mutiny.Uni;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.context.control.ActivateRequestContext;
import jakarta.inject.Inject;

@ApplicationScoped
public class SecurityIdentityPermissionAugmentor implements SecurityIdentityAugmentor { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    @Inject
    HibernateBlockingAugmentor hibernateBlockingAugmentor;

    @Override
    public Uni&amp;lt;SecurityIdentity&amp;gt; augment(SecurityIdentity identity, AuthenticationRequestContext context) {
        return context.runBlocking(() -&amp;gt; hibernateBlockingAugmentor.augment(identity)); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    }

    @ApplicationScoped
    static class HibernateBlockingAugmentor {

        @ActivateRequestContext
        public SecurityIdentity augment(SecurityIdentity securityIdentity) {
            Identity identity = Identity.findByName(securityIdentity.getPrincipal().getName()); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;

            QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder(securityIdentity); &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
            return builder.addPermissionAsString(identity.permission).build(); &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Custom &lt;code&gt;SecurityIdentityAugmentor&lt;/code&gt; can augment the already verified security identity.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Run the augmentation in a blocking mode because it requires access to the database.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Find the recorded &lt;code&gt;Identity&lt;/code&gt; matching the current user&amp;#8217;s name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Initialize a security identity builder from the current identity.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add the permission allocated to this user and create an updated &lt;code&gt;SecurityIdentity&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is all, the augmentation step is done with a few lines of code only.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-configuration&quot;&gt;&lt;/a&gt;MCP Server Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s configure our secure MCP server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.mcp.server.traffic-logging.enabled=true &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
quarkus.mcp.server.traffic-logging.text-limit=1000

quarkus.http.auth.permission.authenticated.paths=/mcp/sse &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
quarkus.http.auth.permission.authenticated.policy=authenticated

quarkus.oidc.provider=github &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
quarkus.oidc.application-type=service &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

quarkus.hibernate-orm.database.generation=drop-and-create &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.sql-load-script=import.sql

quarkus.http.port=8081 &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enable MCP server traffic logging&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enforce an authenticated access to the main MCP SSE endpoint during the initial handshake. See also how the tool is secured with an annotation in the &lt;a href=&quot;#mcp-server-tool&quot;&gt;MCP server tool&lt;/a&gt; section above, though you can also secure access to the tool by listing both main and tools endpoints in the configuration, for example: &lt;code&gt;quarkus.http.auth.permission.authenticated.paths=/mcp/sse,/mcp/messages/*&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Requires that only GitHub access tokens can be used to access MCP server.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;By default, &lt;code&gt;quarkus.oidc.provider=github&lt;/code&gt; supports an authorization code flow only. &lt;code&gt;quarkus.oidc.application-type=service&lt;/code&gt; overrides it and requires the use of bearer tokens.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Database that keeps the identity records is supported by the PostgreSQL DevService.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Start MCP server on port &lt;code&gt;8081&lt;/code&gt; - this is done for the Quarkus LangChain4j &lt;code&gt;Poem Service&lt;/code&gt; application that uses an MCP client to be able to start on the default &lt;code&gt;8080&lt;/code&gt; port.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;start-mcp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#start-mcp-server&quot;&gt;&lt;/a&gt;Start the MCP server in dev mode&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;mvn quarkus:dev -Duser.name=&quot;Your GitHub account name&quot; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use your GitHub account name, for example, &lt;code&gt;mvn quarkus:dev -Duser.name=&quot;John Doe&quot;&lt;/code&gt;. It is required to correctly import the user name and permission data to the database.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MCP server&amp;#8217;s security-related configuration remains exactly the same in prod mode, therefore we are not going to talk about running the MCP server in prod to save some blog post space. Please check the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-sse-client-server&quot;&gt;Quarkus LangChain4j Secure MCP Client Server sample&lt;/a&gt; if you would like to run MCP server in prod mode - you will only need to make sure PostresSQL is available in prod mode too.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-poem-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-poem-service&quot;&gt;&lt;/a&gt;Step 2 - Create and start Poem Service that uses AI Gemini and MCP client&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MCP server is now running and ready to accept tool calls. Let&amp;#8217;s create an AI &lt;code&gt;Poem Service&lt;/code&gt; that will work with AI Gemini and use an MCP client to complete tool calls.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;poem-service-maven-dependencies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#poem-service-maven-dependencies&quot;&gt;&lt;/a&gt;Poem Service Maven dependencies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the following dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-langchain4j-ai-gemini&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-langchain4j-mcp&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-langchain4j-oidc-mcp-auth-provider&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-oidc&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-rest-qute&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-langchain4j-ai-gemini&lt;/code&gt; brings support for AI Gemini.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-langchain4j-mcp&lt;/code&gt; provides core MCP Client support.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-langchain4j-oidc-mcp-auth-provider&lt;/code&gt; provides an implementation of &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html#_authorization&quot;&gt;McpClientAuthProvider&lt;/a&gt; that can supply access tokens acquired during the GitHub OAuth2 authorization code flow.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-oidc&lt;/code&gt; supports GitHub OAuth2 login to secure access to &lt;code&gt;Poem Service&lt;/code&gt;. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-rest-qute&lt;/code&gt; generates an HTML page to welcome the logged-in user. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;register-github-application&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#register-github-application&quot;&gt;&lt;/a&gt;Register GitHub OAuth2 application&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Register a GitHub OAuth2 application that you will authorize when logging in to the &lt;code&gt;Poem Service&lt;/code&gt; application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Follow the &lt;a href=&quot;https://quarkus.io/guides/security-openid-connect-providers#github&quot;&gt;GitHub OAuth2 registration&lt;/a&gt; process, and make sure to register the &lt;code&gt;&lt;a href=&quot;http://localhost:8080/login&quot; class=&quot;bare&quot;&gt;http://localhost:8080/login&lt;/a&gt;&lt;/code&gt; callback URL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use the generated GitHub client id and secret to either set &lt;code&gt;GITHUB_CLIENT_ID&lt;/code&gt; and &lt;code&gt;GITHUB_CLIENT_SECRET&lt;/code&gt; environment properties or update the &lt;code&gt;quarkus.oidc.client-id=${github_client_id}&lt;/code&gt; and &lt;code&gt;quarkus.oidc.credentials.secret=${github_client_secret}&lt;/code&gt; properties in application.properties by replacing &lt;code&gt;${github_client_id}&lt;/code&gt; with the generated client id and &lt;code&gt;${github_client_secret}&lt;/code&gt; with the generated client secret.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, Quarkus GitHub provider submits the client id and secret in the HTTP Authorization header. However, GitHub may require that both client id and secret are submitted as form parameters instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you get HTTP 401 error after logging in to GitHub and being redirected back to Quarkus MCP server, try to replace &lt;code&gt;quarkus.oidc.credentials.secret=${github.client.secret}&lt;/code&gt; property with the following two properties instead:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.oidc.credentials.client-secret.method=post
quarkus.oidc.credentials.client-secret.value=${github.client.secret}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;ai-gemini-key&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ai-gemini-key&quot;&gt;&lt;/a&gt;AI Gemini API key&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Poem Service&lt;/code&gt; relies on AI Gemini to create a poem for the logged-in user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Get &lt;a href=&quot;https://aistudio.google.com/app/apikey&quot;&gt;AI Gemini API key&lt;/a&gt; and either set an &lt;code&gt;AI_GEMINI_API_KEY&lt;/code&gt; environment property or update the &lt;code&gt;quarkus.langchain4j.ai.gemini.api-key=${ai_gemini_api_key}&lt;/code&gt; property in &lt;code&gt;application.properties&lt;/code&gt; by replacing &lt;code&gt;${ai_gemini_api_key}&lt;/code&gt; with the API key value.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;github-login-endpoint&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#github-login-endpoint&quot;&gt;&lt;/a&gt;GitHub Login Endpoint&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Poem Service&lt;/code&gt; needs to have an endpoint that manages a GitHub OAuth2 login. Typically, such an endpoint welcomes the logged-in user and offers links for the user to navigate to the rest of the secured application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s implement this login endpoint:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import io.quarkus.qute.Template;
import io.quarkus.qute.TemplateInstance;
import io.quarkus.oidc.UserInfo;
import io.quarkus.security.Authenticated;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;

/**
 * Login resource which returns a poem welcome page to the authenticated user
 */
@Path(&quot;/login&quot;)
@Authenticated &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
public class LoginResource {

    @Inject
    UserInfo userInfo; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

    @Inject
    Template poem;

    @GET
    @Produces(&quot;text/html&quot;)
    public TemplateInstance poem() {
        return poem.data(&quot;name&quot;, userInfo.getName()); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Require an authenticated access. It forces an authorization code flow for users who did not login with GitHub yet and a session verification for the already authenticated users.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;GitHub access tokens are binary and Quarkus OIDC indirectly verifies them by using them to request GitHub specific &lt;code&gt;UserInfo&lt;/code&gt; representation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;After the user logs in to GitHub and is redirected to this endpoint, an HTML page with a user name and a link to the &lt;a href=&quot;#jaxrs-poem-resource&quot;&gt;Poem Resource endpoint&lt;/a&gt; is generated with a simple &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j/blob/main/samples/secure-mcp-sse-client-server/secure-mcp-client/src/main/resources/templates/poem.html&quot;&gt;Qute template&lt;/a&gt; and returned to the user.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jaxrs-poem-resource&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jaxrs-poem-resource&quot;&gt;&lt;/a&gt;Create Poem Resource endpoint&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Poem Resource&lt;/code&gt; endpoint accepts poem requests from authenticated users and delegates these requests to AI &lt;code&gt;Poem Service&lt;/code&gt; that uses &lt;code&gt;AI Gemini&lt;/code&gt;. &lt;code&gt;AI Gemini&lt;/code&gt; relies on the MCP client to get the name of the logged-in user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import dev.langchain4j.agent.tool.Tool;
import dev.langchain4j.service.UserMessage;
import io.quarkiverse.langchain4j.RegisterAiService;
import io.quarkiverse.langchain4j.mcp.runtime.McpToolBox;
import io.quarkus.security.Authenticated;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path(&quot;/poem&quot;)
@Authenticated &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
public class PoemResource {

    static final String USER_MESSAGE = &quot;&quot;&quot;
            Write a short 1 paragraph poem about a Java programming language.
            Please start by greeting the currently logged in user by name and asking to enjoy reading the poem.&quot;&quot;&quot;;

    @RegisterAiService
    public interface PoemService { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        @UserMessage(USER_MESSAGE)
        @McpToolBox(&quot;user-name&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        String writePoem();
    }

    @Inject
    PoemService poemService;

    @GET
    public String getPoem() {
        return poemService.writePoem(); &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Require authenticated poem requests.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;AI Poem Service interface.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Refer to the MCP client &lt;code&gt;user-name&lt;/code&gt; configuration, see the &lt;a href=&quot;#poem-service-configuration&quot;&gt;Poem Service Configuration&lt;/a&gt; section below.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;poem-service-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#poem-service-configuration&quot;&gt;&lt;/a&gt;Poem Service Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s see how the &lt;code&gt;Poem Service&lt;/code&gt; configuration looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.langchain4j.mcp.user-name.transport-type=http &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
quarkus.langchain4j.mcp.user-name.url=http://localhost:8081/mcp/sse/ &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

quarkus.oidc.provider=github &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
quarkus.oidc.client-id=${github_client_id} &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
quarkus.oidc.credentials.secret=${github_client_secret} &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

quarkus.langchain4j.ai.gemini.api-key=${ai_gemini_api_key} &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
quarkus.langchain4j.ai.gemini.log-requests=true &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
quarkus.langchain4j.ai.gemini.log-responses=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enable MCP client HTTP transport. In this demo we use SSE, with &lt;code&gt;Streamable HTTP&lt;/code&gt; to be supported in the future.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Point to the Quarkus MCP server endpoint that you started in the &lt;a href=&quot;#start-mcp-server&quot;&gt;Start the MCP server in dev mode&lt;/a&gt; step.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Require GitHub OAuth2 login.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;GitHub client id and secret that were generated during the &lt;a href=&quot;#register-github-application&quot;&gt;Register GitHub OAuth2 application&lt;/a&gt; step.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;AI Gemini key that you acquired during the &lt;a href=&quot;#ai-gemini-key&quot;&gt;AI Gemini API key&lt;/a&gt; step.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enable AI Gemini request and response logging&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please pay attention to the fact that the MCP client configuration has a &lt;code&gt;user-name&lt;/code&gt; name. You referred to this configuration with the &lt;code&gt;@McpToolBox(&quot;user-name&quot;)&lt;/code&gt; annotation in the &lt;a href=&quot;#jaxrs-poem-resource&quot;&gt;Create Poem Resource endpoint&lt;/a&gt; step.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;start-poem-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#start-poem-service&quot;&gt;&lt;/a&gt;Start Poem Service in dev mode&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;mvn quarkus:dev&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All the Poem Service configuration remains exactly the same in prod mode, therefore we are not going to talk about running it in prod to save some blog post space. Please check the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-sse-client-server&quot;&gt;Quarkus LangChain4j Secure MCP Client Server sample&lt;/a&gt; if you would like to run it in prod mode.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are ready to test our AI &lt;code&gt;Poem Service&lt;/code&gt; application.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step-3-test-poem-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-3-test-poem-service&quot;&gt;&lt;/a&gt;Step 3 - Test Poem Service&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Access &lt;a href=&quot;http://localhost:8080&quot; class=&quot;bare&quot;&gt;http://localhost:8080&lt;/a&gt; and login to &lt;code&gt;Poem Service&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_client/login_to_poem_service.png&quot; alt=&quot;Login to Poem Service&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should get a response with your name and a link to the &lt;code&gt;Poem Service&lt;/code&gt; endpoint:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_client/poem_service_welcome_page.png&quot; alt=&quot;Poem Service Welcome Page&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, Quarkus MCP Client was not involved in getting your name produced, it was done by the &lt;a href=&quot;#github-login-endpoint&quot;&gt;GitHub Login Endpoint&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on the link to get a poem created and have AI Gemini producing a poem about Java for you:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_client/poem_service_response.png&quot; alt=&quot;Poem Service Response&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time, Quarkus MCP Client helped AI Gemini to get your name from the secure Quarkus MCP server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;access-token-delegation-considerations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#access-token-delegation-considerations&quot;&gt;&lt;/a&gt;Access token delegation considerations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In general, access tokens issued by social providers such as GitHub are not designed to be used in your distributed application architecture, with a service such as &lt;code&gt;Poem Service&lt;/code&gt; accessing GitHub API indirectly through another service such as &lt;code&gt;Quarkus MCP server&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus REST service that has users logged in with GitHub can access GitHub API directly. For example, &lt;code&gt;Poem Service&lt;/code&gt; can use a great Quarkus LangChain4j capability to mark REST Clients as tools to access GitHub API. See how &lt;a href=&quot;https://quarkus.io/blog/gemini-personal-assistant/#implementation&quot;&gt;it was done with the Google Calendar service&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this demo, we show the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html&quot;&gt;Quarkus MCP Client&lt;/a&gt;&apos;s capability to interoperate with MCP servers and use access tokens to access secure MCP servers. We use GitHub OAuth2 because it is easily accessible to most developers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Providers such as &lt;code&gt;Keycloak&lt;/code&gt; and &lt;code&gt;Auth0&lt;/code&gt; can create access tokens that are meant to be propagated from one service to another one. You will quite likely have your Quarkus MCP server implementations dealing with such tokens in the enterprise. Alternatively, when possible, the AI service application which accepts an authenticated user can request the token issuer to exchange its access token for another token that will be used to access the downstream MCP Server instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus AI Service applications may have to and can support a delegation flow such as &lt;code&gt;GitHub access token &amp;#8594; Poem Service &amp;#8594; MCP Client &amp;#8594; MCP Server tool &amp;#8594; GitHub API&lt;/code&gt; with additional security measures that the Quarkus team wil discuss in the future blog posts and the identity augmentation like the one shown in this demo.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, we demonstrated how &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html&quot;&gt;Quarkus MCP Client&lt;/a&gt; can access secure MCP servers by propagating access tokens available to the Quarkus LangChain4j AI Service application after the OAuth2 authorization code flow is complete.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stay tuned for more upcoming blog posts about using MCP securely with Quarkus MCP client and MCP Server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/secure-mcp-client/
            </guid>
            
            
            
            <author>Sergey Beryozkin (https://twitter.com/sberyozkin)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.20.1 released - LTS maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-20-1-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.20.1, our first maintenance release for the 3.20 LTS stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.20.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.20, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update --stream=3.20&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.20.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.20.1&quot;&gt;the full changelog of 3.20.1 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 20 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-20-1-released/
            </guid>
            
            
            
            <author>Jan Martiška (https://twitter.com/janmartiska)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.15.5 released - LTS maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-15-5-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.15.5, our next maintenance release for the 3.15 LTS stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.15.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.15, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update --stream=3.15&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.15.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.15.5&quot;&gt;the full changelog of 3.15.5 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 20 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-15-5-released/
            </guid>
            
            
            
            <author>Jan Martiška (https://twitter.com/janmartiska)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.22.3 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-22-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.22.3, the second (we skipped 3.22.0) maintenance release for our 3.22 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.22, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.22.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.22&quot;&gt;Quarkus 3.22 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.22.3&quot;&gt;3.22.3&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 15 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-22-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #56 - May</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-56/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Read &quot;AI-Powered Form Wizards: Chat, Click, Done&quot; By Loïc Magnette to discover how Conversational AI Forms transform static forms into dynamic, guided experiences that boost data quality and ease of use. Learn how MCP clients can access Quarkus MCP SSE servers with access tokens in &quot;Getting ready for secure MCP with Quarkus MCP Server&quot; by Sergey Beryozkin. Markus Eisele&amp;#8217;s &quot;Deploy Java Like a Pro: Your First Quarkus App on OpenShift in Minutes&quot; is a fun, hands-on guide for Java developers to build a REST API with Quarkus, PostgreSQL, and deploy it to OpenShift Developer Sandbox with no Kubernetes expertise required. Check out &quot;Quarkus 3 application on AWS Lambda- Part 1&quot; by Vadym Kazulkin for an introduction to the sample application and first Lambda performance measurements. Take a look back to see the way forward in &quot;Why Standards Matter More Today: From Fear of Lock-In to Foundations for Choice&quot; by Markus Eisele.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/56/&quot;&gt;Newsletter #56: May&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 13 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-56/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
    </channel>
</rss>
