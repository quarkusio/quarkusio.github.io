<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

    <channel>
        <title>Quarkus</title>
        <link>https://quarkus.io</link>
        <description>Quarkus: Supersonic Subatomic Java</description>
        <lastBuildDate>Wed, 19 Feb 2025 16:16:25 +0000</lastBuildDate>
        
        
        <item>
            <title>Using LangChain4j to analyze PDF documents</title>
            <link>
                https://quarkus.io/blog/using-langchain4j-to-analyze-pdf-documents/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my consulting work, clients frequently present us with challenging problems that require innovative solutions.
Recently, we were tasked with extracting structured metadata from PDF documents through automated analysis. Below, I&amp;#8217;ll share a simplified version of this real-world challenge and how we approached it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-case&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#use-case&quot;&gt;&lt;/a&gt;Use Case&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our client receives compressed archives (.zip files) containing up to hundreds of portable document format (PDF) lease documents that need review. Each document contains property lease details that must be validated for accuracy. The review process involves checking various business rules - for example, identifying leases with terms shorter than 2 years. Currently, this document validation is done manually, which is time-consuming. The client wants to automate and streamline this review workflow to improve efficiency.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some complications with these lease documents are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The documents are not in a standard format so each lease may be written in a different way by a different property manager.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The documents may be scanned, so the text is sometimes human writing and not typewritten.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The documents may contain multiple pages, which are not always in the same order.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The lease terms may not be an actual date but written as &quot;Expires five years from the start date&quot; or &quot;Expires on the anniversary of the start date&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Metadata such as acreage and tax parcel information is needed by our client to validate the lease details.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can understand why this is time consuming for a human to review and validate the documents.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;our-solution&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#our-solution&quot;&gt;&lt;/a&gt;Our Solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After consulting with &lt;a href=&quot;https://github.com/dliubarskyi&quot;&gt;Dmytro Liubarskyi&lt;/a&gt; and collaborating with the Quarkus team, we implemented a solution using LangChain4j for document metadata extraction. We chose &lt;a href=&quot;https://ai.google.dev/docs/gemini_api_overview&quot;&gt;Google Gemini&lt;/a&gt; as our Large Language Model (LLM) since it excels at PDF analysis through its built-in Optical Character Recognition (OCR) capabilities, enabling accurate text extraction from both digital and scanned documents.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;technical-details&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#technical-details&quot;&gt;&lt;/a&gt;Technical Details&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The application is built using:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Quarkus - A Kubernetes-native Java framework&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LangChain4j - Java bindings for LangChain to interact with LLMs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google Gemini AI - For PDF document analysis and information extraction&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quarkus REST - For handling multipart file uploads&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTML/JavaScript frontend - Simple UI for file upload and results display&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The backend processes the PDF through these steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Accepts PDF upload via multipart form data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Converts PDF content to base64 encoding&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sends to Gemini AI with a structured JSON schema for response formatting&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Returns parsed lease information in a standardized format&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Displays results in a tabular format on the web interface&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main components are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LeaseAnalyzerResource&lt;/code&gt; - REST endpoint for PDF analysis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LeaseReport&lt;/code&gt; - Data structure for lease information&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Web interface for file upload and results display&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-it-works&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-it-works&quot;&gt;&lt;/a&gt;How it works&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First we need a Google Gemini API key. You can get one for free, see more details here: &lt;a href=&quot;https://ai.google.dev/gemini-api/docs/api-key&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gemini API Key Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;export GOOGLE_AI_GEMINI_API_KEY=&amp;lt;your-google-ai-gemini-api-key&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next we need to install the LangChain4j dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-langchain4j-core&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.24.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;dev.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;langchain4j-google-ai-gemini&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.0-beta1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;configure-gemini-llm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configure-gemini-llm&quot;&gt;&lt;/a&gt;Configure Gemini LLM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next we need to wire up the Gemini LLM to the application (using your Google AI Gemini API key).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@ApplicationScoped
public class GoogleGeminiConfig {

    @Produces
    @ApplicationScoped
    ChatLanguageModel model() {
        return GoogleAiGeminiChatModel.builder()
                .apiKey(System.getenv(&quot;GOOGLE_AI_GEMINI_API_KEY&quot;))
                .modelName(&quot;gemini-2.0-flash&quot;)
                .build();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus LangChain4j will provide autoconfiguration for Gemini in a future release. Currently, manual configuration is required since the Gemini integration is still evolving, with upstream LangChain4j offering three different modules for Google&amp;#8217;s AI APIs.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;define-your-data-structure&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#define-your-data-structure&quot;&gt;&lt;/a&gt;Define your data structure&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we need to model the data structure for the lease information that we want the LLM to extract from any lease document.  You can customize these fields based on the information you need from the PDF documents but in our use case below we are extracting the following information:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public record LeaseReport(
    LocalDate agreementDate,
    LocalDate termStartDate,
    LocalDate termEndDate,
    LocalDate developmentTermEndDate,
    String landlordName,
    String tenantName,
    String taxParcelId,
    BigDecimal acres,
    Boolean exclusiveRights) {
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;create-the-rest-endpoint&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-the-rest-endpoint&quot;&gt;&lt;/a&gt;Create the REST endpoint&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lastly, we need to create a &lt;code&gt;LeaseAnalyzerResource&lt;/code&gt; class that will use the LLM to extract the lease information from the PDF document.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@Inject
ChatLanguageModel model;

@PUT
@Consumes(MediaType.MULTIPART_FORM_DATA)
@Produces(MediaType.TEXT_PLAIN)
public String upload(@RestForm(&quot;file&quot;) FileUpload fileUploadRequest) {
    final String fileName = fileUploadRequest.fileName();
    log.infof(&quot;Uploading file: %s&quot;, fileName);

    try {
        // Convert input stream to byte array for processing
        byte[] fileBytes = Files.readAllBytes(fileUploadRequest.filePath());

        // Encode PDF content to base64 for transmission
        String documentEncoded = Base64.getEncoder().encodeToString(fileBytes);

        // Create user message with PDF content for analysis
        UserMessage userMessage = UserMessage.from(
                TextContent.from(&quot;Analyze the given document&quot;),
                PdfFileContent.from(documentEncoded, &quot;application/pdf&quot;));

        // Build chat request with JSON response format
        ChatRequest chatRequest = ChatRequest.builder()
                .messages(userMessage)
                .parameters(ChatRequestParameters.builder()
                        .responseFormat(responseFormatFrom(LeaseReport.class))
                        .build())
                .build();

        log.info(&quot;Google Gemini analyzing....&quot;);
        long startTime = System.nanoTime();
        ChatResponse chatResponse = model.chat(chatRequest);
        long endTime = System.nanoTime();
        String response = chatResponse.aiMessage().text();
        log.infof(&quot;Google Gemini analyzed in %.2f seconds: %s&quot;, (endTime - startTime) / 1_000_000_000.0, response);

        return response;
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a simple HTML/JavaScript frontend that allows you to upload a PDF document and view the results.  In the example below 3 different lease documents were uploaded and analyzed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-user-stories/melloware/lease-analyzer.png&quot; alt=&quot;Lease Analyzer Results&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Lease Analyzer Results&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find the complete example code on &lt;a href=&quot;https://github.com/melloware/quarkus-lease-analyzer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article demonstrated how LangChain4j and AI can be leveraged to automatically extract structured metadata from PDF documents. By implementing this solution, our client will significantly reduce manual document processing time, potentially saving thousands of work hours annually. The combination of LangChain4j and Google Gemini AI proves to be a powerful approach for automating document analysis workflows.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/using-langchain4j-to-analyze-pdf-documents/
            </guid>
            
            
            
            <author>Emil Lefkof</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.18.3 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-18-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.18.3, the second (we skipped 3.18.0) maintenance release for our 3.18 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also released Quarkus 3.19.0.CR1 today.
We encourage you to test it and report back as we will branch 3.20 LTS from 3.19.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.18, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.18.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.18&quot;&gt;Quarkus 3.18 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.18.3&quot;&gt;3.18.3&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 12 Feb 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-18-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #53 - February</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-53/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Be sure to read Max Rydahl Andersen&amp;#8217;s blog post that introduces the Model Context Protocol servers project which provides a set of MCP servers implemented using Quarkus and Java. Starting with JDBC, filesystem and JavaFX. Don&amp;#8217;t miss transcript of Holly&amp;#8217;s QCon talk &quot;Zero Waste, Radical Magic, and Italian Graft – Quarkus Efficiency Secrets&quot;, where she discusses some of the technical underpinnings of Quarkus’s efficiency, providing advice for those using or considering Quarkus. Clement Escoffier also has a great blog post that discusses the new predictable cadence for LTS micro-releases. &quot;Quarkus Redis: Monitoring Pool Size for Backpressure&quot; by 0x2e Tech provides a comprehensive approach for a robust solution for monitoring and managing your Redis connection pool in a Quarkus application. Delve into understanding how to debug Quarkus apps and effectively troubleshoot issues in your Quarkus applications with &quot;Debug Quarkus Apps Example&quot; by Yatin Batra. Learn how the Couchbase Quarkus SDK 1.0 is now in General Availability and production-ready with seamless integration, GraalVM native image support, and enhanced developer productivity in the article by Emilien Bevierre and Vishal Dhiman.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/53/&quot;&gt;Newsletter #53: February&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-53/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.18.2 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-18-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.18.2, the first (we skipped 3.18.0) maintenance release for our 3.18 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have bugs lurking around, please report them as we aim at stabilizing everything before the next LTS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.18, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.18.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.18&quot;&gt;Quarkus 3.18 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.18.2&quot;&gt;3.18.2&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-18-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.18 - Micrometer for WebSockets Next, Security WebAuthn based on WebAuthn4J, Kubernetes Client 7...</title>
            <link>
                https://quarkus.io/blog/quarkus-3-18-1-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.18, with two months worth of new features and enhancements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It comes with a lot of enhancements and the following new features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44379&quot;&gt;#44379&lt;/a&gt; - Integrate Micrometer with WebSockets Next&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44105&quot;&gt;#44105&lt;/a&gt; - Reimplement security-webauthn on top of webauthn4j&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45131&quot;&gt;#45131&lt;/a&gt; - OIDC and OIDC Client: Support JWT bearer client authentication using client assertion loaded from filesystem&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45121&quot;&gt;#45121&lt;/a&gt; - Support for OIDC mTLS binding&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44993&quot;&gt;#44993&lt;/a&gt; - Support OidcProviderClient injection and token revocation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44546&quot;&gt;#44546&lt;/a&gt; - Add OIDC Redis Token State Manager extension&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45294&quot;&gt;#45294&lt;/a&gt; - Allow to create static OIDC tenants programmatically&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/35324&quot;&gt;#35324&lt;/a&gt; - OIDC Dev Services and UI changes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45117&quot;&gt;#45117&lt;/a&gt; - TLS - Enable policy configuration for expired or not yet valid certificates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44549&quot;&gt;#44549&lt;/a&gt; - Add support for encrypted PKCS#8&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/43885&quot;&gt;#43885&lt;/a&gt; - Exclude uri from OpenTelemetry Tracing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45259&quot;&gt;#45259&lt;/a&gt; - Bump kubernetes-client-bom from 6.13.4 to 7.0.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/32447&quot;&gt;#32447&lt;/a&gt; - Introduce &lt;code&gt;Report an Issue&lt;/code&gt;  menu in DevUI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/43618&quot;&gt;#43618&lt;/a&gt; - Add a Dev UI screen for Agroal datasources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44305&quot;&gt;#44305&lt;/a&gt; - Ability to configure extension dev mode JVM options&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44424&quot;&gt;#44424&lt;/a&gt; - Support for dev-mode-only conditional dependencies&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are already hard at work preparing 3.19 and the upcoming 3.20 LTS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.18, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.18.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.18&quot;&gt;Quarkus 3.18 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;websockets-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#websockets-next&quot;&gt;&lt;/a&gt;WebSockets.Next&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our next-generation WebSockets extension continues to improve with each version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 3.18, it comes with Micrometer integration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;security&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#security&quot;&gt;&lt;/a&gt;Security&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You are used to it, each version comes with a lot of enhancements to our security layer, offering even more flexibility.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time, it comes with the complete rewrite of our Security Webauthn extension to leverage the WebAuthn4J library (if you are using this extension, please have a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.18#webauthn&quot;&gt;dedicated section in the migration guide&lt;/a&gt; as a lot of things have changed), a lot of new features for OIDC, and improvements to our TLS registry:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44105&quot;&gt;#44105&lt;/a&gt; - Reimplement security-webauthn on top of webauthn4j&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45131&quot;&gt;#45131&lt;/a&gt; - OIDC and OIDC Client: Support JWT bearer client authentication using client assertion loaded from filesystem&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45121&quot;&gt;#45121&lt;/a&gt; - Support for OIDC mTLS binding&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44993&quot;&gt;#44993&lt;/a&gt; - Support OidcProviderClient injection and token revocation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44546&quot;&gt;#44546&lt;/a&gt; - Add OIDC Redis Token State Manager extension&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45294&quot;&gt;#45294&lt;/a&gt; - Allow to create static OIDC tenants programmatically&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/35324&quot;&gt;#35324&lt;/a&gt; - OIDC Dev Services and UI changes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45117&quot;&gt;#45117&lt;/a&gt; - TLS - Enable policy configuration for expired or not yet valid certificates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44549&quot;&gt;#44549&lt;/a&gt; - Add support for encrypted PKCS#8&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;opentelemetry-tracing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#opentelemetry-tracing&quot;&gt;&lt;/a&gt;OpenTelemetry Tracing&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When using OpenTelemetry Tracing, it happens quite often that you don&amp;#8217;t want to collect any trace for a given URI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;3.18 comes with the &lt;code&gt;quarkus.otel.traces.suppress-application-uris&lt;/code&gt; that allows to define URIs that are going to be ignored.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find more information about this new feature in the &lt;a href=&quot;https://quarkus.io/guides/opentelemetry-tracing#disabling-traces-for-app-endpoints&quot;&gt;OpenTelemetry Tracing guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;kubernetes-client&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kubernetes-client&quot;&gt;&lt;/a&gt;Kubernetes Client&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Kubernetes Client was upgraded to a major new version: Kubernetes Client 7.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find more information about this upgrade in our &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.18#kubernetes-client-fabric8&quot;&gt;migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dev-ui&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dev-ui&quot;&gt;&lt;/a&gt;Dev UI&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We polished our Dev UI with two new features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A screen to browse the tables exposes by your datasources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A quick link to report an issue to the Quarkus project on GitHub&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;preparing-our-next-lts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#preparing-our-next-lts&quot;&gt;&lt;/a&gt;Preparing our next LTS&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are also preparing our next LTS with various initiatives:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A lot of extensions were migrated to the new &lt;code&gt;@ConfigMapping&lt;/code&gt;-based configuration infrastructure (and this effort will continue in the next versions).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We are making enhancements related to startup time and initial memory (RSS) usage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We are removing code that was deprecated for a long time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Expect us to focus on polishing features and fixing issues for the upcoming 3.19 and 3.20.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-cxf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-cxf&quot;&gt;&lt;/a&gt;Quarkus CXF&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus CXF 3.18 was released and is now available in &lt;a href=&quot;https://code.quarkus.io/?extension-search=origin:platform%20quarkus-cxf&quot;&gt;Quarkus Platform 3.18&lt;/a&gt;.
Check the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.18.0.html&quot;&gt;Quarkus CXF 3.18.0&lt;/a&gt; release notes for more information about what is new in this release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been upgraded to 3.18.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.18.0.CR1&quot;&gt;3.18.0.CR1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.18.0&quot;&gt;3.18.0&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.18.1&quot;&gt;3.18.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1048 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.18 release, thanks to Akulov S V, Ales Justin, Alex Martel, Alexander Pankin, Alexey Loubyansky, André Pantaleão, Andy Damevin, Ankush Saini, Antonio Musarra, Auri Munoz, Bassel Rachid, Blaz Mrak, Bruno Baptista, Bruno Marvin, Chris Laprun, Christian Ivanov, Christian Pieczewski, Clement Escoffier, Cristian Burlacu, Damien Clément d&amp;#8217;Huart, Daniel Bobbert, Daniel Strobusch, Danilo Piazzalunga, David M. Lloyd, Davide D&amp;#8217;Alto, Eduard Wagner, Emmanuel Ferdman, Eric Deandrea, Erik Mattheis, Fary Hurtado, Foivos Zakkak, Francesco Nigro, George Gastaldi, Georgios Andrianakis, Gianmarco Frangipane, Guillaume Smet, Gurubase.io, Harald Albers, HerrDerb, Holly Cummins, Inaki Villar, Ioannis Canellos, ivan.baricic, Jakub Jedlicka, Jan Martiska, Jeremie Bresson, Jochen Schalanda, Johnathan Gilday, Jorge Pinto, Jose, Julien Ponge, Katia Aresti, Ladislav Thon, Lars Andringa, Loïc Mathieu, luneo7, Maciej Lisowski, Marc Nuri, Marco Belladelli, Marco Bungart, Marco Collovati, Marek Skacelik, mariofusco, Martin Bartoš, Martin Kouba, Martin Panzer, Matej Novotny, Matheus Cruz, Max Rydahl Andersen, Michael Edgar, Michal Maléř, Michal Vavřík, Neon, Nuno Neto, ogomezdi, Ozan Gunalp, Ozzy Osborne, Peter Skopek, Phillip Krüger, rghara, Roberto Balarezo, Roberto Cortez, Rolfe Dlugy-Hegwer, Romain QUINIO, Rostislav Svoboda, row, Scott M Stark, Sergey Beryozkin, sergioruydev, Sola-ris, Stephan Strate, Stuart Douglas, Stéphane Épardaud, Thibault Meyer, Thomas Canava, tom, Trấn Nguyễn, vkn, xstefank, Yoann Rodière, Yoshikazu Nojima, zanmagerl, and Zheng Feng.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 29 Jan 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-18-1-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Introducing Model Context Protocol servers project</title>
            <link>
                https://quarkus.io/blog/introducing-mcp-servers/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, I&amp;#8217;m excited to introduce the Model Context Protocol (MCP) servers project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Model Context Protocol is the recent approach to enable AI models to interact with your applications and services in a nice decoupled way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-servers&quot;&gt;mcp-servers&lt;/a&gt; project is as far as I know the first one to provide a set of MCP servers implemented using Java and at least uniquely Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Intended to show-case the capabilities of the Model Context Protocol, and inspiration for what you can do with it - especially in Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-servers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-servers&quot;&gt;&lt;/a&gt;The Servers&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At time of writing there are three servers implemented:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;JDBC&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Let your AI app introspect and interact to any JDBC-compatible database, let it be PostgreSQL, MySQL, MariaDB, SQLite, Oracle, etc. &lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://github.com/quarkiverse/quarkus-mcp-servers/raw/main/jdbc/images/jdbc-trends-demo.png&quot; alt=&quot;JDBC server&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Filesystem&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Access the file system of your machine, let it be your home directory, your code directory, your project directory, etc. &lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://github.com/quarkiverse/quarkus-mcp-servers/raw/main/filesystem/images/filesystem-demo.png&quot; alt=&quot;Filesystem server&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;JavaFX&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Draw on a JavaFX canvas, get your AI to draw some art for you! Based on idea from &lt;a href=&quot;https://gist.github.com/konczdev/5e6774d2d8640bf83baab88cb068bcc2&quot;&gt;@konczdev&lt;/a&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://github.com/quarkiverse/quarkus-mcp-servers/raw/main/jfx/images/jfx-demo.png&quot; alt=&quot;JavaFX server&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each server is implemented using Quarkus and Java, and each server is available to easily run using JBang. No need for user to install Java, Quarkus or any other Java tool.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-to-use-the-servers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-to-use-the-servers&quot;&gt;&lt;/a&gt;How to use the servers&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The general setup is to install &lt;a href=&quot;https://jbang.dev/download/&quot;&gt;JBang&lt;/a&gt;, preferably using a package manager as then desktop apps are more likely to find &lt;code&gt;jbang&lt;/code&gt; in the PATH.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then in your MCP client configure it with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;jbang [server-name]@quarkiverse/quarkus-mcp-servers [arguments]&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example to run the JDBC server to connect to a MariaDB database you would do:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;jbang mcp-jdbc-server@quarkiverse/quarkus-mcp-servers jdbc:mariadb://localhost:3306/test --user root --password mysecretpassword&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or use a downlodable SQLite database of Netflix movies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;jbang mcp-jdbc-server@quarkiverse/quarkus-mcp-servers jdbc:sqlite:%{https://github.com/lerocha/netflixdb/releases/download/v1.0.0/netflixdb.sqlite}&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Tthe &lt;code&gt;%{}&lt;/code&gt; syntax is a JBang feature to download a file from a URL in the command line and use it as a local file.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similar there is &lt;code&gt;jbang jfx@quarkiverse/quarkus-mcp-servers&lt;/code&gt; to draw on a JavaFX canvas, and &lt;code&gt;jbang filesystem@quarkiverse/quarkus-mcp-servers [path]&lt;/code&gt; to access the file system.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tested-mcp-clients&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tested-mcp-clients&quot;&gt;&lt;/a&gt;Tested MCP Clients&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During development we tested the servers with the following clients:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://claude.ai/download&quot;&gt;Claude Desktop&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chrishayuk/mcp-cli&quot;&gt;mcp-cli&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://block.github.io/goose/docs/quickstart/&quot;&gt;Goose&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are more MCP clients out there, and we&amp;#8217;re sure that the servers will work with many more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Goose is noteworthy given it is opensource and available both as a desktop app (on MacOS) and as a cli tool. It was &lt;a href=&quot;https://block.github.io/goose/docs/quickstart/&quot;&gt;recently announced&lt;/a&gt; with full support for the Model Context Protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here I configured Goose to use the SQLLite database from the Northwind sample database with this setup stored in &lt;code&gt;~/.config/goose/config.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-yaml hljs&quot; data-lang=&quot;yaml&quot;&gt;extensions:
  netflixdb:
  args:
    - jdbc@quarkiverse/quarkus-mcp-servers
    - jdbc:sqlite:%{https://github.com/lerocha/netflixdb/releases/download/v1.0.0/netflixdb.sqlite}
    cmd: jbang
    enabled: true
    envs: {}
    name: netflixdb
    type: stdio&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note: we do recommend to use &lt;code&gt;goose config&lt;/code&gt; to generate/edit the config file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the above config Goose will be able to use the JDBC server to connect to the SQLLite database:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/mcpservers/mcp-jdbc-goose.png&quot; alt=&quot;Goose using the JDBC server to connect to the SQLLite database&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;unique-features-for-quarkus-mcp-servers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#unique-features-for-quarkus-mcp-servers&quot;&gt;&lt;/a&gt;Unique features for Quarkus MCP Servers&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All that is great, but why use Quarkus for implementing the MCP servers?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First is that the programming model provided by Quarkus is very powerful, allowing you to easily focus on the business logic of your application. See &lt;a href=&quot;https://quarkus.io/blog/mcp-server/&quot;&gt;previous blog&lt;/a&gt; for details on how to implement a server or look at the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-servers/blob/main/jdbc/src/main/java/io/quarkus/mcp/servers/jdbc/MCPServerJDBC.java&quot;&gt;code of the JDBC servers&lt;/a&gt;. Notice how compact it is!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Second, is the wast Java ecosystem provides things like JDBC drivers which enables us to make a single server that works with any JDBC-compatible database. We use &lt;code&gt;jbang&lt;/code&gt; to dynamically download &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-servers/blob/main/jdbc/.scripts/mcpjdbc.java&quot;&gt;the right JDBC driver&lt;/a&gt; and then launch the quarkus mcp server. Similar is done for &lt;code&gt;jfx&lt;/code&gt; to &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-servers/blob/main/jbang-catalog.json#L34&quot;&gt;fetch&lt;/a&gt; the right OS specific JavaFX dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thirdly, ability to run the servers as a native executable. In the MCP servers project the &lt;code&gt;filesystem&lt;/code&gt; server is &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-servers/releases&quot;&gt;published as a native executable&lt;/a&gt; you can download and gain a much faster startup time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is also a lot of interesting things to come around how to use quarkus dev mode with MCP servers and testing - but that will be for another blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jbang-required-or-not&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jbang-required-or-not&quot;&gt;&lt;/a&gt;JBang required or not ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JBang is in general not required to run an MCP server, but it makes it much easier and makes it possible for anyone, especially non-Java developers to use these servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can of course run a simple MCP servers as a normal Java application, but then you need to install right version of Java, download the server and their dependencies and run it like &lt;code&gt;java -jar [path to server jar]&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the MCP servers project we have chosen to use JBang as we go beyond and utiize JBang to dynamically fetch drivers and OS specific deps. Without JBang that would be much harder, if not impossible to make consumable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sky-is-the-limit&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sky-is-the-limit&quot;&gt;&lt;/a&gt;Sky is the limit!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Model Context Protocol opens up exciting possibilities for building intelligent applications using your application data with your favourite programming language and framework. With Quarkus MCP Servers, you have a powerful foundation to create your own Java based servers that can bridge AI with any data source or system you can imagine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whether you want to connect to your favorite database, integrate with your company&amp;#8217;s internal systems, or build something completely new - the sky truly is the limit! The simplicity of implementing MCP servers with Quarkus means you can focus on the creative aspects rather than the plumbing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;d love to see what you build! Leave a comment or consider contributing your MCP servers back to the community through the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-servers&quot;&gt;Quarkiverse MCP Servers project&lt;/a&gt;. Your implementation could help others solve similar problems or inspire them to create something even more amazing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So what are you waiting for? Grab the code, fire up your IDE, and start building your own MCP server today. The future of AI-powered applications is here, and you can be part of shaping it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Have Fun!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;p.s. Next week on Thursday February 6th we&amp;#8217;re hosting a &lt;a href=&quot;https://quarkus.io/insights/&quot;&gt;MCP server Insights&lt;/a&gt; where we will discuss the MCP server and client SDK&amp;#8217;s in Quarkus project and how you can use it to build your own MCP servers and extend your AI infused applications.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 29 Jan 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/introducing-mcp-servers/
            </guid>
            
            
            
            <author>Max Rydahl Andersen (https://twitter.com/maxandersen)</author>
            
        </item>
        
        <item>
            <title>Quarkus LTS - New Release Cadence Explained</title>
            <link>
                https://quarkus.io/blog/lts-cadence/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus releases an &lt;a href=&quot;https://quarkus.io/blog/lts-releases/&quot;&gt;LTS&lt;/a&gt; (Long-Term Support) version every six months.
LTS is designed for users who prioritize stability over new features.
These versions are maintained for one year and receive critical bug and CVE fixes.
An overlap period allows a smooth upgrade to the next LTS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Until now, LTS micro-releases (e.g., 3.8.1, and 3.8.2) have occurred regularly but without a predictable schedule.
&lt;strong&gt;We’re changing this.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt;
LTS releases will follow a predictable cadence, with micro-releases every two months.
The &lt;a href=&quot;#new-cadence&quot;&gt;A New Cadence for LTS Micro-Releases&lt;/a&gt; section provides more details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;releases-releases-and-more-releases&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#releases-releases-and-more-releases&quot;&gt;&lt;/a&gt;Releases, Releases, and More Releases&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since its inception, Quarkus has followed a fast-paced release cycle:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Minor releases:&lt;/em&gt; Once per month (e.g., 3.16, 3.17).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Micro-releases:&lt;/em&gt; Weekly (e.g., 3.17.1, 3.17.2).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The development process revolves around the main branch, which serves as the cutting edge of Quarkus development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s how the regular release process works:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Minor releases (3.y)&lt;/em&gt;: A new branch is created from &lt;em&gt;main&lt;/em&gt;, capturing all the changes from development up to that point.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Micro-releases (3.y.z)&lt;/em&gt;: These only include bug fixes and CVE remediations, backported from &lt;em&gt;main&lt;/em&gt; to the minor release branch.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/lts-cadence/regular-release-cadence.png&quot; alt=&quot;regular release cadence&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-lts-releases-differ&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-lts-releases-differ&quot;&gt;&lt;/a&gt;How LTS Releases Differ&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;LTS releases prioritize stability over the latest features, and the process reflects this.
Let’s look at the example of 3.19 (a minor release) and 3.20 (the next LTS):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;A new branch for 3.19 is created from main, containing the latest development at that time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bug fixes and CVE remediations are backported to the 3.19 branch for its micro-releases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When preparing the LTS release (3.20), the branch is not created from main.
Instead, it is created from the 3.19 branch, ensuring no new features from main are included.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This approach improves the reliability of LTS releases by excluding potentially unstable or unproven changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/lts-cadence/lts-release-principle.png&quot; alt=&quot;lts release principle&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we had this initial release, we did not have clear rules about the new micro releases of the LTS (3.20.1, 3.20.2…).
So, while we have a predictable release calendar for the regular micro and minor releases, LTS micro releases were irregular.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-cadence&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-cadence&quot;&gt;&lt;/a&gt;A New Cadence for LTS Micro-Releases&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting with 3.15 LTS, we’re introducing a predictable cadence for LTS micro-releases:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A new LTS version will be released every six months.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For each LTS, micro-releases will occur every two months (e.g., 3.20.1, 3.20.2).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/lts-cadence/new-lts-cadence.png&quot; alt=&quot;new lts cadence&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-included-in-an-lts-micro-release&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-included-in-an-lts-micro-release&quot;&gt;&lt;/a&gt;What’s Included in an LTS Micro-Release?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;LTS micro-releases are strictly limited to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Bug fixes considered low-risk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CVE fixes (moderate and critical).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dependency updates for CVE remediation or critical bug fixes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Nothing else.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;emergency-exceptions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#emergency-exceptions&quot;&gt;&lt;/a&gt;Emergency Exceptions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the event of a critical CVE (because we know it will happen), we’ll release an emergency micro-release outside the two-month cadence.
These releases may follow a separate versioning scheme (e.g., 3.20.0.1) to indicate their exceptional nature (still under discussion).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-if&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-if&quot;&gt;&lt;/a&gt;What if?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;What if I want a feature in the next LTS?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To be included, the feature must be merged into main at least one month before the LTS branch is created.
Don’t play with the clock - having a feature merged can take time, and the CI tends to be busy just before releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;What if I want a feature to be added to an existing LTS?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;No.&lt;/strong&gt; New features are only included in future LTS versions.
For immediate access, consider using regular (non-LTS) releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;What if a bug fix is needed in the next LTS micro-release?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re happy to consider backporting bug fixes, provided they are low-risk.
Risky fixes will require further discussion and may not be included.
We will particularly consider bugs impacting features from previous LTS releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;What if I want to know what’s included in the next LTS micro-release?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re establishing an LTS working group to improve transparency and track backports.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;What if a moderate CVE is reported against an LTS?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next LTS micro will include moderate CVE fixes every two months.
Exceptional releases are only for important (where there is no mitigation) and critical CVEs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;How will the Quarkus Platform align with this cadence?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus Platform will follow the same release schedule.
If you are a platform member,  we recommend subscribing to this coordination group if you have not already done so.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;two-line-summary&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#two-line-summary&quot;&gt;&lt;/a&gt;Two-Line Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For regular users: Monthly minor and weekly micro-releases continue as before.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For LTS users: Expect LTS versions every 6 months, with micro releases every 2 months.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next LTS will be &lt;a href=&quot;https://quarkus.io/blog/next-lts-3-20/&quot;&gt;3.20&lt;/a&gt;.
The dates and schedule are communicated on the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Release-Planning&quot;&gt;Release Planning Wiki Page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/lts-cadence/
            </guid>
            
            
            
            <author>Clement Escoffier (https://twitter.com/clementplop)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.17.8 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-17-8-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.17.8, the last maintenance release for our 3.17 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;3.18 will be released next week.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.17, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.17.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.17&quot;&gt;Quarkus 3.17 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.17.8&quot;&gt;3.17.8&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-17-8-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.15.3 released - LTS maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-15-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.15.3, our second (we skipped 3.15.0) maintenance release for the 3.15 LTS stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.15.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.15, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update --stream=3.15&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.15.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.15.3&quot;&gt;the full changelog of 3.15.3 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 21 Jan 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-15-3-released/
            </guid>
            
            
            
            <author>Jan Martiška (https://twitter.com/janmartiska)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.17.7 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-17-7-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.17.7, a new maintenance release for our 3.17 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.17, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.17.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.17&quot;&gt;Quarkus 3.17 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.17.7&quot;&gt;3.17.7&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-17-7-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #52 - January</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-52/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Explore how to combine Quarkus, a modern Java framework optimized for cloud-native applications, with Ollama, a platform for running AI models locally with Jonathan Vila&amp;#8217;s article &quot;Building local LLM AI-Powered Applications with Quarkus, Ollama and Testcontainers&quot;. Long Term Support (LTS) releases are designed for users who want to keep a given version for a longer period of time instead of following our monthly release pace. Quarkus 3.20 will be our next LTS version planned for release in late March. Read more about it in the blog post &quot;Our next LTS will be Quarkus 3.20&quot; from Guillaume Smet. Customizing your test resource manager and using a unified configuration, you can eliminate conflicts between the containers used by Liquibase and your application. Learn how in &quot;Resolving Issues with Quarkus Tests, Test Containers, and Liquibase Integration&quot; by tempmailgenerator on Reddit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/52/&quot;&gt;Newsletter #52: January&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 14 Jan 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-52/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title> Implementing a MCP server in Quarkus</title>
            <link>
                https://quarkus.io/blog/mcp-server/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Model Context Protocol (MCP) is an emerging standard that enables AI models to safely interact with external tools and resources. In this tutorial, I&amp;#8217;ll show you how to implement an MCP server using Quarkus, allowing you to extend AI applications with custom tools powered by the Java ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-well-be-building&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-well-be-building&quot;&gt;&lt;/a&gt;What we&amp;#8217;ll be building&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll implement a simple MCP server that provides tools to get weather forecasts and alerts for US-based locations. We&amp;#8217;ve chosen this example because it aligns with the official MCP quickstart guide at &lt;a href=&quot;https://modelcontextprotocol.io/quickstart/server&quot;&gt;modelcontextprotocol.io/quickstart/server&lt;/a&gt;, making it easier to compare implementations across different languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our server will expose two tools: &lt;code&gt;getAlerts&lt;/code&gt; and &lt;code&gt;getForecast&lt;/code&gt;. Once built, we&amp;#8217;ll connect it to an MCP host that runs the server as a subprocess. Here&amp;#8217;s how it looks when integrated with Claude:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/mcp/claude-example.png&quot; alt=&quot;Claude MCP Integration Example&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;core-mcp-concepts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#core-mcp-concepts&quot;&gt;&lt;/a&gt;Core MCP Concepts&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MCP servers can provide three main types of capabilities:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Resources&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;File-like data that can be read by clients (like API responses or file contents)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Tools&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Functions that can be called by the LLM (with user approval)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Prompts&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Pre-written templates that help users accomplish specific tasks&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tutorial focuses on implementing tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;prerequisites&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#prerequisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To follow this tutorial you need:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Familiarity with Quarkus and Java&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Understanding of LLMs (OpenAI, Granite, Anthropic, Google, etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;system-requirements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#system-requirements&quot;&gt;&lt;/a&gt;System requirements&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Quarkus CLI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JBang (optional)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;set-up-your-project&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#set-up-your-project&quot;&gt;&lt;/a&gt;Set up your project&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, create a new Quarkus project with rest-client, qute and mcp server extension without default boilerplate code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus create app --no-code -x rest-client-jackson,qute,mcp-server-stdio weather&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re using the &lt;code&gt;stdio&lt;/code&gt; variant as it&amp;#8217;s required for MCP hosts that run the server as a subprocess. While an &lt;code&gt;sse&lt;/code&gt; variant exists for Server-Sent Events streaming, we&amp;#8217;ll focus on the standard input/output approach.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;building-the-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#building-the-server&quot;&gt;&lt;/a&gt;Building the server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create a new file &lt;code&gt;src/main/java/org/acme/Weather.java&lt;/code&gt;. The complete code for this example is available &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server/tree/main/samples/weather&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;weather-api-integration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#weather-api-integration&quot;&gt;&lt;/a&gt;Weather API Integration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let&amp;#8217;s set up the REST client for the weather API:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@RegisterRestClient(baseUri = &quot;https://api.weather.gov&quot;)
public interface WeatherClient {
    // Get active alerts for a specific state
    @GET
    @Path(&quot;/alerts/active/area/{state}&quot;)
    Alerts getAlerts(@RestPath String state);

    // Get point metadata for coordinates
    @GET
    @Path(&quot;/points/{latitude},{longitude}&quot;)
    JsonObject getPoints(@RestPath double latitude, @RestPath double longitude);

    // Get detailed forecast using dynamically provided URL
    @GET
    @Path(&quot;/&quot;)
    Forecast getForecast(@Url String url);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To handle the API responses, we&amp;#8217;ll define some data classes. Note that we&amp;#8217;re only including the fields we need, as the complete API response contains much more data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;static record Period(
    String name,
    int temperature,
    String temperatureUnit,
    String windSpeed,
    String windDirection,
    String detailedForecast) {
}

static record ForecastProperties(
        List&amp;lt;Period&amp;gt; periods) {
}

static record Forecast(
        ForecastProperties properties) {
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since the Weather API uses redirects, add this to your &lt;code&gt;application.properties&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.rest-client.follow-redirects=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;formatting-helpers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#formatting-helpers&quot;&gt;&lt;/a&gt;Formatting Helpers&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll use Qute templates to format the weather data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;String formatForecast(Forecast forecast) {
    return forecast.properties().periods().stream().map(period -&amp;gt; {
            // Template for each forecast period
            return Qute.fmt(
                &quot;&quot;&quot;
                        Temperature: {p.temperature}°{p.temperatureUnit}
                        Wind: {p.windSpeed} {p.windDirection}
                        Forecast: {p.detailedForecast}
                        &quot;&quot;&quot;,
                Map.of(&quot;p&quot;, period)).toString();
        }).collect(Collectors.joining(&quot;\n---\n&quot;));
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;implementing-mcp-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#implementing-mcp-tools&quot;&gt;&lt;/a&gt;Implementing MCP Tools&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now let&amp;#8217;s implement the actual MCP tools. The &lt;code&gt;@Tool&lt;/code&gt; annotation from &lt;code&gt;io.quarkiverse.mcp.server&lt;/code&gt; marks methods as available tools, while &lt;code&gt;@ToolArg&lt;/code&gt; describes the parameters:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@Tool(description = &quot;Get weather alerts for a US state.&quot;)
String getAlerts(@ToolArg(description = &quot;Two-letter US state code (e.g. CA, NY)&quot;) String state) {
    return formatAlerts(weatherClient.getAlerts(state));
}

@Tool(description = &quot;Get weather forecast for a location.&quot;)
String getForecast(
    @ToolArg(description = &quot;Latitude of the location&quot;) double latitude,
    @ToolArg(description = &quot;Longitude of the location&quot;) double longitude) {

    // First get the point metadata which contains the forecast URL
    var points = weatherClient.getPoints(latitude, longitude);
    // Extract the forecast URL using Qute template
    var url = Qute.fmt(&quot;{p.properties.forecast}&quot;, Map.of(&quot;p&quot;, points));
    // Get and format the forecast
    return formatForecast(weatherClient.getForecast(url));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The forecast API requires a two-step process where we first get point metadata and then use a URL from that response to fetch the actual forecast.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;running-the-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#running-the-server&quot;&gt;&lt;/a&gt;Running the Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To simplify deployment and development, we&amp;#8217;ll package the server as an uber-jar. This makes it possible to &lt;code&gt;mvn install&lt;/code&gt; and publish as a jar to a Maven repository which makes it easiier to share and run for us and others.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.package.uber-jar=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, we can optionally enable file logging as without it we would not be able to see any logs from the server as standard input/output is reserved for the MCP protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.log.file.enable=true
quarkus.log.file.path=weather-quarkus.log&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After running &lt;code&gt;mvn install&lt;/code&gt;, you can use JBang to run the server using its Maven coordinates: &lt;code&gt;org.acme:weather:1.0.0-SNAPSHOT:runner&lt;/code&gt;
or manually using &lt;code&gt;java -jar target/weather-1.0.0-SNAPSHOT-runner.jar&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;integration-with-claude-desktop&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#integration-with-claude-desktop&quot;&gt;&lt;/a&gt;Integration with Claude Desktop&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add this to your &lt;code&gt;claude_desktop_config.json&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-json hljs&quot; data-lang=&quot;json&quot;&gt;{
    &quot;mcpServers&quot;: {
        &quot;weather&quot;: {
            &quot;command&quot;: &quot;jbang&quot;,
            &quot;args&quot;: [&quot;--quiet&quot;,
                    &quot;org.acme:weather:1.0.0-SNAPSHOT:runner&quot;]
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;--quiet&lt;/code&gt; flag prevents JBang&amp;#8217;s output from interfering with the MCP protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/mcp/claude-tools.png&quot; alt=&quot;Claude Tools Integration&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also run the server directly without using java - then it would be something like &lt;code&gt;java -jar &amp;lt;FULL PATH&amp;gt;/weather-1.0.0-SNAPSHOT-runner.jar&lt;/code&gt;. We use JBang here because simpler if you want to share with someone who does not want to build the MCP server locally.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;development-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#development-tools&quot;&gt;&lt;/a&gt;Development Tools&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-inspector&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-inspector&quot;&gt;&lt;/a&gt;MCP Inspector&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For development and testing, you can use the MCP Inspector tool:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;npx @modelcontextprotocol/inspector&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This starts a local web server where you can test your MCP server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/mcp/mcp-inspector.png&quot; alt=&quot;MCP Inspector Interface&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;integration-with-langchain4j&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#integration-with-langchain4j&quot;&gt;&lt;/a&gt;Integration with LangChain4j&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since version 0.23.0, Quarkus LangChain4j supports MCP, meaning it acts as an MCP client. For detailed information, see &lt;a href=&quot;https://quarkus.io/blog/quarkus-langchain4j-mcp/&quot;&gt;Using the Model Context Protocol with Quarkus+LangChain4j&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use our weather server with LangChain4j, add this configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.langchain4j.mcp.weather.transport-type=stdio
quarkus.langchain4j.mcp.weather.command=jbang,--quiet,org.acme:weather:1.0.0-SNAPSHOT:runner&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;other-clientsmcp-hosts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#other-clientsmcp-hosts&quot;&gt;&lt;/a&gt;Other Clients/MCP Hosts&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Model Context Protocol has a page listing &lt;a href=&quot;https://modelcontextprotocol.io/clients&quot;&gt;known clients&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While I have not tested all the various clients and MCP hosts, the similar approach of using &lt;code&gt;jbang --quiet &amp;lt;GAV&amp;gt;&lt;/code&gt; should work for most if not all of them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;testing-the-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#testing-the-server&quot;&gt;&lt;/a&gt;Testing the Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can test the server through Claude or other MCP hosts with queries like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&quot;What is the weather forecast for Solvang?&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&quot;What are the weather alerts for New York?&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s what happens behind the scenes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Your question goes to the LLM along with available tools information&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The LLM analyzes the question and determines which tools to use&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The client executes the selected tools via the MCP server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Results return to the LLM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The LLM formulates an answer using the tool results&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You see the final response!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve seen how Quarkus makes implementing an MCP server straightforward, requiring minimal boilerplate code compared to other implementations. The combination of Quarkus&amp;#8217;s extension system and JBang makes development and deployment quite a joy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;further-reading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#further-reading&quot;&gt;&lt;/a&gt;Further Reading&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://modelcontextprotocol.io&quot;&gt;Model Context Protocol Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.quarkiverse.io/quarkus-mcp-server/dev/&quot;&gt;Quarkus MCP Extension Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://weather.gov/api&quot;&gt;Weather API Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-langchain4j-mcp/&quot;&gt;Using MCP with Quarkus+LangChain4j&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/mcp-server/
            </guid>
            
            
            
            <author>Max Rydahl Andersen (https://twitter.com/maxandersen)</author>
            
        </item>
        
        <item>
            <title>Using the Model Context Protocol with Quarkus+LangChain4j</title>
            <link>
                https://quarkus.io/blog/quarkus-langchain4j-mcp/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are thrilled to announce that starting with version 0.23.0, the Quarkus
LangChain4j project integrates calling tools using the
&lt;a href=&quot;https://modelcontextprotocol.io&quot;&gt;Model Context Protocol (MCP)&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-is-the-model-context-protocol&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-is-the-model-context-protocol&quot;&gt;&lt;/a&gt;What is the Model Context Protocol?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MCP is an open protocol that standardizes how applications provide context
to LLMs. An MCP server is an application that can provide tools, resources
(be it a set of static documents or dynamically accessed data, for example
from a database), or pre-defined prompts that your AI-infused application
can use when talking to LLMs. When you package such functionality into an
MCP server, it can be plugged into and used by any LLM client toolkit that
supports MCP, including Quarkus and LangChain4j. There is also already a
growing ecosystem of reusable MCP servers that you can use out of the box,
and Quarkus also offers the
&lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server&quot;&gt;quarkus-mcp-server extension&lt;/a&gt; that allows you
to create MCP servers, but in this article, we will focus on the client
side. More on creating MCP servers later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In version 0.23.x,
&lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j&quot;&gt;Quarkus LangChain4j&lt;/a&gt;
implements the client side of the MCP protocol to allow tool execution.
Support for resources and prompts is planned for future releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, we will show you how to use Quarkus and LangChain4j to
easily create an application that connects to an MCP server providing
filesystem-related tools and exposes a chatbot that a user can use to
interact with the local filesystem, that means read and write files as
instructed by the user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is no need to set up an MCP server separately, we will configure
Quarkus to run one as a subprocess. As you will see, setting up MCP with
Quarkus is extremely easy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
To download the final project, visit the
&lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j/tree/0.23.0/samples/mcp-tools&quot;&gt;
quarkus-langchain4j samples&lt;/a&gt;. That sample contains the final functionality
developed in this article, plus some stuff on top, like a JavaScript-based
UI. In this article, for simplicity, we will skip the creation of that UI,
and we will only use the Dev UI chat page that comes bundled in Quarkus out
of the box.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#prerequisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Apache Maven 3.9+&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;npm&lt;/code&gt; package manager installed on your machine&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;creating-a-filesystem-assistant-project&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#creating-a-filesystem-assistant-project&quot;&gt;&lt;/a&gt;Creating a Filesystem assistant project&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will assume that you are using OpenAI as the LLM provider. If you are
using a different provider, you will need to swap out the
&lt;code&gt;quarkus-langchain4j-openai&lt;/code&gt; extension and use something else.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Start by generating a Quarkus project. If you are using the Quarkus CLI, you can do it like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;quarkus create app org.acme:filesystem-assistant:1.0-SNAPSHOT \
  --extensions=&quot;langchain4j-openai,langchain4j-mcp,vertx-http&quot; -S 3.17&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you prefer to use the web-based project generator, go to
&lt;a href=&quot;https://code.quarkus.io/&quot;&gt;code.quarkus.io&lt;/a&gt; and select the same extensions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whenever you run the application, make sure the
&lt;code&gt;QUARKUS_LANGCHAIN4J_OPENAI_API_KEY&lt;/code&gt; environment variable is set to your
OpenAI API key.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;create-the-directory-to-be-used-by-the-agent&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-the-directory-to-be-used-by-the-agent&quot;&gt;&lt;/a&gt;Create the directory to be used by the agent&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Under the root directory of the Maven project, create a directory named &lt;code&gt;playground&lt;/code&gt;.
This will be the only directory that the agent will be allowed to interact with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Inside that directory, create any files that you want for testing. For
example, create a file named &lt;code&gt;playground/hello.txt&lt;/code&gt; with the following
contents:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Hello, world!&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;create-the-ai-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-the-ai-service&quot;&gt;&lt;/a&gt;Create the AI service&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, we need to define an AI service that will define how the bot should
behave. The interface will look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@RegisterAiService
@SessionScoped
public interface Bot {

    @SystemMessage(&quot;&quot;&quot;
            You have tools to interact with the local filesystem and the users
            will ask you to perform operations like reading and writing files.

            The only directory allowed to interact with is the &apos;playground&apos; directory relative
            to the current working directory. If a user specifies a relative path to a file and
            it does not start with &apos;playground&apos;, prepend the &apos;playground&apos;
            directory to the path.

            If the user asks, tell them you have access to a tool server
            via the Model Context Protocol (MCP) and that they can find more
            information about it on https://modelcontextprotocol.io/.
            &quot;&quot;&quot;
    )
    String chat(@UserMessage String question);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feel free to adjust the system message to your liking, but this one should
be suitable to get the application working as expected.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;configure-the-mcp-server-and-the-connection-to-it&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configure-the-mcp-server-and-the-connection-to-it&quot;&gt;&lt;/a&gt;Configure the MCP server and the connection to it&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will use
&lt;a href=&quot;https://www.npmjs.com/package/@modelcontextprotocol/server-filesystem&quot;&gt;server-filesystem&lt;/a&gt;
MCP server that comes as an NPM package, this is why you need to have &lt;code&gt;npm&lt;/code&gt;
installed on your machine. It is assumed that you have the &lt;code&gt;npm&lt;/code&gt; binary
available on your &lt;code&gt;PATH&lt;/code&gt; (the &lt;code&gt;PATH&lt;/code&gt; variable that the Quarkus process
sees).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting the server and configuring the connection to it is extremely easy.
We will simply tell Quarkus to start up a &lt;code&gt;server-filesystem&lt;/code&gt; MCP server as
a subprocess and then communicate with it over the &lt;code&gt;stdio&lt;/code&gt; transport. All
you need to do is to add two lines into your &lt;code&gt;application.properties&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.langchain4j.mcp.filesystem.transport-type=stdio
quarkus.langchain4j.mcp.filesystem.command=npm,exec,@modelcontextprotocol/server-filesystem@0.6.2,playground&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this configuration, Quarkus will know that it should create a MCP
client that will be backed by a server that will be started by executing
&lt;code&gt;npm exec @modelcontextprotocol/server-filesystem@0.6.2 playground&lt;/code&gt; as a
subprocess. The &lt;code&gt;playground&lt;/code&gt; argument denotes the path to the directory that
the agent will be allowed to interact with. The &lt;code&gt;stdio&lt;/code&gt; transport means that
the client will communicate with the server over standard input and output.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you configure one or more MCP connections this way, Quarkus also
automatically generates a &lt;code&gt;ToolProvider&lt;/code&gt;. Any AI service that does not
explicitly specify a tool provider will be automatically wired up to this
generated one, so you don&amp;#8217;t need to do anything else to make the MCP
functionality available to the AI service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Optionally, if you want to see the actual traffic between the application
and the MCP server, add these three additional lines to your
&lt;code&gt;application.properties&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.langchain4j.mcp.filesystem.log-requests=true
quarkus.langchain4j.mcp.filesystem.log-responses=true
quarkus.log.category.\&quot;dev.langchain4j\&quot;.level=DEBUG&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And that&amp;#8217;s all! Now, let&amp;#8217;s test it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;try-it-out&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#try-it-out&quot;&gt;&lt;/a&gt;Try it out&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since we didn&amp;#8217;t create any UI for our application that a user could use,
let&amp;#8217;s use the Dev UI that comes with Quarkus out of the box. With the
application running in development mode, access
&lt;a href=&quot;http://localhost:8080/q/dev-ui&quot; class=&quot;bare&quot;&gt;http://localhost:8080/q/dev-ui&lt;/a&gt; in your browser and click the &lt;code&gt;Chat&lt;/code&gt; link in
the &lt;code&gt;LangChain4j&lt;/code&gt; card (either that, or go to
&lt;a href=&quot;http://localhost:8080/q/dev-ui/io.quarkiverse.langchain4j.quarkus-langchain4j-core/chat&quot; class=&quot;bare&quot;&gt;http://localhost:8080/q/dev-ui/io.quarkiverse.langchain4j.quarkus-langchain4j-core/chat&lt;/a&gt;
directly).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Try a prompt to ask the agent to read a file that you created previously, such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Read the contents of the file hello.txt.&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If all is set up correctly, the agent will respond with the contents of the
file, like in this screenshot:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/mcp/devui.png&quot; alt=&quot;Dev UI chat page after asking about a file&quot; width=&quot;400&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The bot can also write files, so try a prompt such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Write a Python script that prints &quot;Hello, world!&quot; and save it as hello.py.&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then have a look into your &lt;code&gt;playground&lt;/code&gt; directory, and you should see the new Python file there!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Model Context Protocol allows you to easily integrate reusable sets of
tools and resources to AI-infused applications in a portable way. With the
Quarkus LangChain4j extension, you can instruct Quarkus to run a server
locally as a subprocess, and configuring application to use it is just a
matter of adding a few configuration properties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And that&amp;#8217;s not all. Stay tuned, because Quarkus also has an extension that
allows you to create MCP servers! More about that soon. &lt;strong&gt;UPDATE:&lt;/strong&gt; The post
about the server side is now available:
&lt;a href=&quot;https://quarkus.io/blog/mcp-server/&quot;&gt;Implementing a MCP server in Quarkus&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-langchain4j-mcp/
            </guid>
            
            
            
            <author>Jan Martiška (https://twitter.com/janmartiska)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.17.6 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-17-6-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.17.6, a maintenance release for our 3.17 release train, and the first release for 2025.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.17, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.17.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.17&quot;&gt;Quarkus 3.17 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.17.6&quot;&gt;3.17.6&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-17-6-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.17.5 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-17-5-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.17.5, a maintenance release for our 3.17 release train, and the last release for 2024.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.17, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.17.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.17&quot;&gt;Quarkus 3.17 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.17.5&quot;&gt;3.17.5&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Fri, 20 Dec 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-17-5-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus Infinispan Embedded extension</title>
            <link>
                https://quarkus.io/blog/quarkus-infinispan-embedded/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are excited to announce the first release of the Quarkus Infinispan Embedded Extension!
This extension is now available in the Quarkiverse Hub. It is a big step forward for developers
who want to use Infinispan in embedded mode with Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-is-infinispan-embedded-mode&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-is-infinispan-embedded-mode&quot;&gt;&lt;/a&gt;What is Infinispan Embedded Mode?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infinispan is a powerful, distributed in-memory data store and cache.
In embedded mode, Infinispan runs within your application, in library mode, without needing a separate server.
This means your app can handle data caching and storage directly in its own process, making it faster and simpler.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-use-the-quarkus-infinispan-embedded-extension&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-use-the-quarkus-infinispan-embedded-extension&quot;&gt;&lt;/a&gt;Why Use the Quarkus Infinispan Embedded Extension?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new extension makes it easy to use Infinispan with Quarkus requiring minimal setup and
delivering fast in-memory performance to your Quarkus apps.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-cases-for-infinispan-embedded-in-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#use-cases-for-infinispan-embedded-in-quarkus&quot;&gt;&lt;/a&gt;Use cases for Infinispan Embedded in Quarkus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are some scenarios where using Infinispan in embedded mode with Quarkus might be a great fit:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;In-Memory Caching:&lt;/strong&gt; Use Infinispan as a local cache to speed up data retrieval and
reduce database load in your application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Temporary Data Processing:&lt;/strong&gt; Manage and process temporary or short-lived data directly within
the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Local Data Storage for Microservices:&lt;/strong&gt; Use Infinispan as a lightweight,
in-memory store for individual microservices that don’t require centralized data persistence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Offline Applications:&lt;/strong&gt; When working with offline or edge applications where an external server is not available,
Infinispan embedded mode ensures data is stored locally and efficiently.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Data Replication in Small Clusters:&lt;/strong&gt; Use Infinispan to handle data replication across a few nodes
without the overhead of a separate Infinispan server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;trade-offs-of-using-infinispan-in-embedded-mode&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#trade-offs-of-using-infinispan-in-embedded-mode&quot;&gt;&lt;/a&gt;Trade-offs of Using Infinispan in Embedded Mode&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While running Infinispan in embedded mode offers simplicity and speed, there are some trade-offs to consider.
Since Infinispan runs within your application&amp;#8217;s process, it shares the same memory and CPU resources.
This can increase your application&amp;#8217;s resource usage, especially as the data size grows.
Additionally, embedded mode is best suited for single-node or small-scale deployments; for larger, distributed systems,
using Infinispan in remote mode with a dedicated server may offer better scalability and separation of concerns.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;infinispan-embedded-and-kubernetes-deployments&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#infinispan-embedded-and-kubernetes-deployments&quot;&gt;&lt;/a&gt;Infinispan Embedded and Kubernetes deployments&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When running applications on Kubernetes, using Infinispan in embedded mode can introduce additional challenges.
For instance, scaling an embedded Infinispan setup requires scaling the entire application pod, which may not be
as efficient as scaling an external Infinispan cluster independently.
Kubernetes&apos; ability to handle distributed workloads aligns better with remote Infinispan setups, where storage
and application layers can scale separately for improved resource management.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information, check the &lt;a href=&quot;https://infinispan.org/docs/stable/titles/tuning/tuning.html&quot;&gt;performance and tuning guides&lt;/a&gt;
in the official Infinispan documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-to-get-started&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-to-get-started&quot;&gt;&lt;/a&gt;How to get started&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Getting started is very easy. Just add the dependency to your Quarkus application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.infinispan&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-infinispan-embedded&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then you can Inject the &lt;code&gt;EmbeddedCacheManager&lt;/code&gt; and interact with Infinispan.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@Inject
private EmbeddedCacheManager cacheManager;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To enable Protobuf serialization, you define a schema like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@Proto
public record Greeting(String name, String message) {
    @ProtoSchema(includeClasses = { Greeting.class }, schemaPackageName = &quot;io.quarkiverse.infinispan&quot;)
    public interface GreetingSchema extends GeneratedSchema {
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using the &lt;code&gt;EmbeddedCacheManager&lt;/code&gt; you will be able to create caches on the fly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;Configuration config = new ConfigurationBuilder()
                .encoding().mediaType(MediaType.APPLICATION_PROTOSTREAM)
                .clustering().cacheMode(CacheMode.DIST_ASYNC).build();

// Create a cache
Cache&amp;lt;String, Greeting&amp;gt; cache = cacheManager.administration()
.withFlags(CacheContainerAdmin.AdminFlag.VOLATILE)
.getOrCreateCache(&quot;mycache&quot;, config);

// Put a value in the cache
cache.put(id, greeting);

// Read a value from the cache
cache.get(id);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;native-support-and-future-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#native-support-and-future-features&quot;&gt;&lt;/a&gt;Native Support and Future Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus Infinispan Embedded Extension supports native mode, but some advanced
features may be limited. We encourage developers to test it, share feedback, and help us enhance its
capabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;where-to-learn-more&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#where-to-learn-more&quot;&gt;&lt;/a&gt;Where to Learn More&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For detailed documentation and examples, check out the project in the Quarkiverse Hub:
&lt;a href=&quot;https://github.com/quarkiverse/quarkus-infinispan-embedded&quot;&gt;Quarkiverse Infinispan Embedded Extension&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We welcome your feedback and contributions to improve the extension. Feel free to open issues, suggest features,
or contribute code on the project’s GitHub repository.
Thank you for being part of the Quarkus community. We hope you enjoy the new Infinispan Embedded Extension!
If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkiverse/quarkus-infinispan-embedded/issues&quot;&gt;GitHub issues&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkiverse/quarkus-infinispan-embedded/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://github.com/quarkiverse/quarkus-infinispan-embedded/discussions&quot;&gt;GitHub discussions&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://infinispan.zulipchat.com/&quot;&gt;Infinispan Zulip&lt;/a&gt;, &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Quarkus Zulip&lt;/a&gt; or on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 18 Dec 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-infinispan-embedded/
            </guid>
            
            
            
            <author>Katia Aresti (https://twitter.com/karesti)</author>
            
        </item>
        
        <item>
            <title>Our next LTS will be Quarkus 3.20</title>
            <link>
                https://quarkus.io/blog/next-lts-3-20/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You are probably now familiar with our biannual (as in twice a year) LTS releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Every 6 months, we pick a Quarkus release that will be supported for a full year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;LTS releases are designed for users who want to keep a given version for a longer period of time
instead of following our monthly release pace.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We already released a few LTS (namely 3.2, 3.8, and 3.15 released at the end of September)
and we know that some of our users are now planning their work according to our LTS schedule.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now is time to announce the schedule for our next LTS: Quarkus 3.20.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.20 will be our next LTS release.
It will be the direct continuation of the &lt;code&gt;3.19&lt;/code&gt; branch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you contribute to Quarkus or the Quarkus Platform and need a feature in the next Quarkus LTS,
make sure it has been merged in the &lt;a href=&quot;https://github.com/quarkusio/quarkus&quot;&gt;Quarkus repository&lt;/a&gt; before February 11th included
(the day before the &lt;code&gt;3.19.0.CR1&lt;/code&gt; release).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;February 11th is the date of the feature freeze for Quarkus 3.19 and 3.20 LTS.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;quarkus-3-18&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-3-18&quot;&gt;&lt;/a&gt;Quarkus 3.18&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.18 will be a regular minor version of Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It will be released on January 29th 2025.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See our &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Release-Planning&quot;&gt;release schedule&lt;/a&gt; for all the details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;quarkus-3-19&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-3-19&quot;&gt;&lt;/a&gt;Quarkus 3.19&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.19 will be released on February 26th.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will branch Quarkus 3.19 from &lt;code&gt;main&lt;/code&gt; when we release 3.19.0.CR1 on February 12th, as usual.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After branching, &lt;code&gt;main&lt;/code&gt; will host the development for Quarkus &lt;strong&gt;3.21&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;quarkus-3-20&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-3-20&quot;&gt;&lt;/a&gt;Quarkus 3.20&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.20 will be our next LTS version.
It will be released on March 26th.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release will be the direct continuation of the 3.19 cycle and will actually get branched from the &lt;code&gt;3.19&lt;/code&gt; branch.
The focus for the 3.20 cycle will be on hardening 3.19 and fixing issues.
It won&amp;#8217;t contain any new features.
It might contain some additional component upgrades to fix CVEs or important bugs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Consequently, and this is important:
if you contribute to Quarkus or the Quarkus Platform and need a feature in the next Quarkus LTS,
make sure it has been merged in the &lt;a href=&quot;https://github.com/quarkusio/quarkus&quot;&gt;Quarkus repository&lt;/a&gt; before February 11th included
(the day before the &lt;code&gt;3.19.0.CR1&lt;/code&gt; release).&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;February 11th is the date of the feature freeze for Quarkus 3.19 and 3.20 LTS.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As this release will be maintained for 12 months, we will be recommending that extension maintainers and contributors consider bug fixes and enhancements for LTS releases.
This will ensure that LTS releases are as stable and robust as possible, while still offering the full breadth of the Quarkus ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This means that extension maintainers and contributors will need to consider having branches and versioning in place to support 3.20 during the whole LTS cycle.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;quarkus-3-21&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-3-21&quot;&gt;&lt;/a&gt;Quarkus 3.21&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plan is to release Quarkus 3.21 the same day as Quarkus 3.20 LTS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It will contain the new features developed in the &lt;code&gt;main&lt;/code&gt; branch during the 3.19 &amp;#8594; 3.20 cycle as Quarkus 3.20 LTS will be branched from the &lt;code&gt;3.19&lt;/code&gt; branch.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;questions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#questions&quot;&gt;&lt;/a&gt;Questions?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any questions about this plan, feel free to ask in the comments of this blog post or on &lt;a href=&quot;https://github.com/quarkusio/quarkus/discussions/categories/community&quot;&gt;GitHub Discussions&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 18 Dec 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/next-lts-3-20/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #51 - December</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-51/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Quarkus has surpassed the 1,000 contributor milestone&quot; by Dimitrios Andreadis will explore the evolution and future of Quarkus, Red Hat’s next-generation Java framework designed to optimize applications for cloud-native environments. &quot;Java Quarkus LangChain4j – Building a Chatbot&quot; by Bhagvan Kommadi will guide you through leveraging two powerful tools — Quarkus and LangChain4j — to create chatbots that are not only efficient and scalable but also capable of understanding and generating human-like responses. &quot;Testing Apache Camel Routes with Testcontainers&quot; by Andras Fejes describes how Apache Camel and Testcontainers combine EIPs for integration and Testcontainers for robust, automated testing. Hamid Khanjani&amp;#8217;s &quot;Hibernate Reactive with Panache: The Quarkus-Powered ORM Revolution for Reactive Java Applications and Kubernetes&quot; describes how when Hibernate is combined with Panache, an intuitive and declarative ORM layer from Quarkus, it becomes a game-changer for Java developers. Explore different choices available for developing a new Quarkus application in &quot;Getting Started with Quarkus: A Guide to Application Creation&quot; by Jagnya Datta Panigrahi.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/51/&quot;&gt;Newsletter #51: December&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 12 Dec 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-51/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.17.4 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-17-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.17.4, a maintenance release for our 3.17 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.17, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.17.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.17&quot;&gt;Quarkus 3.17 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.17.4&quot;&gt;3.17.4&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been updated to 3.17.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;quarkus-cxf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-cxf&quot;&gt;&lt;/a&gt;Quarkus CXF&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We updated to Quarkus CXF 3.17.3 in the Quarkus Platform.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 11 Dec 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-17-4-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus and Raspberry Pi - this time on bare metal</title>
            <link>
                https://quarkus.io/blog/quarkus-rpi-bare-metal/
            </link>
            <description>
                &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;quarkus-and-raspberry-pi-this-time-on-bare-metal&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-and-raspberry-pi-this-time-on-bare-metal&quot;&gt;&lt;/a&gt;Quarkus and Raspberry Pi - this time on bare metal&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Four years ago, Andrea Battaglia wrote an excellent &lt;a href=&quot;https://quarkus.io/blog/quarkus-native-on-a-raspberry-pi/&quot;&gt;blog post&lt;/a&gt; about running a Quarkus application (that is compiled to a native executable) in a container on a Raspberry Pi.
This is an interesting use case but it’s not the only one.
Since Raspberry Pi is often used for home and science projects I was particularly interested in the developer experience when you want to develop your application locally on your laptop but run it on a bare metal Raspberry Pi server, i.e. no containers involved.
Raspberry Pi is not infrequently extended with various sensors and pheripherals.
And it&amp;#8217;s very practical to be able to communicate with these devices direcly, during development.
That&amp;#8217;s why we focused in this direction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
There is a &lt;a href=&quot;https://github.com/mkouba/rpi-sample&quot;&gt;sample application&lt;/a&gt; that is referenced in the text below. The app periodically executes a command that reads the CPU temperature and writes the value in the log. Obviously, this is not something RPi-specific but it can be replaced with a command that reads a value from any other device file or even GPIO.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-1-prepare-your-development-environment&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-1-prepare-your-development-environment&quot;&gt;&lt;/a&gt;Step 1 - Prepare your development environment&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;install-raspberry-pi-os&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#install-raspberry-pi-os&quot;&gt;&lt;/a&gt;Install Raspberry Pi OS&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nothing special is needed.
You can use the convenient &lt;a href=&quot;https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up/2&quot;&gt;Raspberry Pi Imager&lt;/a&gt; to prepare the SD card.
If you don&amp;#8217;t need the GUI (and in most cases you don&amp;#8217;t) there&amp;#8217;s the Raspberry Pi OS Lite image available.
This version will save some resources.
Furthermore, you&amp;#8217;ll need to enable SSH and configure the wireless LAN.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;install-jdk&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#install-jdk&quot;&gt;&lt;/a&gt;Install JDK&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For development, you&amp;#8217;ll need to install the JDK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install default-jdk&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-2-build-and-deploy&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-2-build-and-deploy&quot;&gt;&lt;/a&gt;Step 2 - Build and deploy&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First of all, we need to build the sample app locally but run it on the target Raspberry Pi.
It&amp;#8217;s quite straightforward with a little bit of bash-fu.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Build and deploy script&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;# Build the app
mvn clean package

# Copy the app to the target rpi; you can use rsync or sftp as well
scp -r target/quarkus-app $RPI_HOST:$RPI_PROJECT_PATH &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

# Start the app on the target host; CTRL+C stops the app
ssh -t $RPI_HOST &quot;cd $RPI_PROJECT_PATH; java -jar quarkus-app/quarkus-run.jar&quot; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The content of the &lt;code&gt;target/quarkus-app&lt;/code&gt; directory contains all the Quarkus application bits.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;RPI_HOST&lt;/code&gt; and &lt;code&gt;RPI_PROJECT_PATH&lt;/code&gt; are environment variables. The first defines the host/address of the target Raspberry Pi. The latter defines the path where to deploy the app; e.g. something like &lt;code&gt;/home/username/rpi-sample&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-t&lt;/code&gt; is crucial and it&amp;#8217;s used to force the allocation of a pseudo-terminal. We need an interactive shell for the remote command.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
See also the &lt;a href=&quot;https://github.com/mkouba/rpi-sample/blob/main/build-deploy.sh&quot;&gt;build-deploy.sh&lt;/a&gt; file in the sample app.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This way you can build your application locally and run it on the Raspberry Pi easily.
However, whenever you change the app you need to re-build, copy and restart the app which is a bit tedious.
Especially if you&amp;#8217;re used to the quick turnaround with Quarkus development mode.
So are there any other options?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-3-remote-development-mode&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-3-remote-development-mode&quot;&gt;&lt;/a&gt;Step 3 - Remote development mode&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you may know Quarkus has a &lt;a href=&quot;https://quarkus.io/guides/maven-tooling#remote-development-mode&quot;&gt;remote development mode&lt;/a&gt; .
It is usually used to run a Quarkus app in a container environment (such as OpenShift) and have the changes made to your local files immediately visible in the remote app.
But there&amp;#8217;s no reason not to try it for our use case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, we&amp;#8217;ll need to build a mutable application, using the &lt;code&gt;mutable-jar&lt;/code&gt; format.
Let&amp;#8217;s adapt our build&amp;amp;deploy script.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Build and deploy script - mutable app&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;# Build the app
# quarkus.live-reload.password=foo must be set in application.properties or passed as system property when the remote side starts
# See https://github.com/quarkusio/quarkus/issues/44933
mvn clean package -Dquarkus.package.jar.type=mutable-jar &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

# Copy the app to the target rpi; you can use rsync or sftp as well
scp -r target/quarkus-app $RPI_HOST:$RPI_PROJECT_PATH

# Start the app on the target host; CTRL+C stops the app
ssh -t $RPI_HOST &quot;export QUARKUS_LAUNCH_DEVMODE=true; cd $RPI_PROJECT_PATH; java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -Dquarkus.live-reload.password=foo -jar quarkus-app/quarkus-run.jar&quot; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Mutable applications can be started in the dev mode.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We set the &lt;code&gt;QUARKUS_LAUNCH_DEVMODE&lt;/code&gt; environment variable to &lt;code&gt;true&lt;/code&gt; in order to start the app in the dev mode.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005&lt;/code&gt; part enables the debug mode so that you can also debug your application in the same way as if it was running locally. The only difference is that you need to use the host/address of your Raspberry Pi when attaching the debugger.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
See also the &lt;a href=&quot;https://github.com/mkouba/rpi-sample/blob/main/build-deploy-mutable.sh&quot;&gt;build-deploy-mutable.sh&lt;/a&gt; file in the sample app.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Keep in mind that your Quarkus app must include the &lt;code&gt;quarkus-vertx-http&lt;/code&gt; extension in order to support remote dev mode. If you don&amp;#8217;t need this extension in production, you can add a Maven profile with this dependency that is only activated during development. See also the &lt;a href=&quot;https://github.com/mkouba/rpi-sample/blob/main/pom.xml#L105-L119&quot;&gt;pom.xml&lt;/a&gt; file in the sample app.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we run the script the remote side is up and listening.
It takes a little bit more time than before because we start the app in the development mode.
Also mutable applications include the deployment parts of Quarkus, so they take up a bit more disk space.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s run the local part and connect to the remote host:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;mvn quarkus:remote-dev -Dquarkus.package.jar.type=mutable-jar -Dquarkus.live-reload.password=foo -Dquarkus.live-reload.url=http://$RPI_HOST:8080 &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;RPI_HOST&lt;/code&gt; is an environment variable and it defines the host/address of the target Raspberry Pi.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
See also the &lt;a href=&quot;https://github.com/mkouba/rpi-sample/blob/main/run-remote-dev-mode.sh&quot;&gt;run-remote-dev-mode.sh&lt;/a&gt; file in the sample app.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s it.
Now every time you send an HTTP request to your app you should see any changes you have made locally in the remote app.
If your app does not expose an HTTP endpoint you can just hit &lt;code&gt;s&lt;/code&gt; in the terminal where the deploy script was executed.
This will refresh the remote app as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Currently, the Dev UI is not available in the remote dev mode for security reasons. However, there&amp;#8217;s an &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/44570&quot;&gt;open issue&lt;/a&gt; to reintroduce the Dev UI, probably guarded by a configuration knob.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-4-run-in-production&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-4-run-in-production&quot;&gt;&lt;/a&gt;Step 4 - Run in production&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, you can run your Quarkus app in a JVM on the target Raspberry Pi.
However, Raspberry Pi is not endowed with a large amount of memory.
So what about native image?
That might be a perfect fit.
There&amp;#8217;s one problem though - Raspberry Pi is an ARM-based single-board computer (&lt;code&gt;aarch64&lt;/code&gt; architecture for Raspberry Pi 4 Model B).
But your machine might be Intel-based (&lt;code&gt;x86_64&lt;/code&gt; architecture).
In other words, usually you cannot build the native image of your machine and run it on Raspberry Pi.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;option-a-build-the-native-image-on-pi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#option-a-build-the-native-image-on-pi&quot;&gt;&lt;/a&gt;Option A - build the native image on Pi&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In theory, you can build the native image directly on your Raspberry Pi.
I didn&amp;#8217;t succeed though and got the infamous &lt;em&gt;&quot;The Native Image build process ran out of memory. Please make sure your build system has more memory available.&quot;&lt;/em&gt; error message on my Raspberry Pi 4 Model B with 2GB RAM.
But if you have a model with more RAM, plenty of time, and a good active cooler, it should be possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feeling brave?
Ok, you&amp;#8217;ve been warned.
But first, you&amp;#8217;ll need to turn your Raspberry Pi in a full-fledged development machine.
Simply said, JDK is not enough.
You&amp;#8217;ll need a build tool, such as Maven.
You&amp;#8217;ll also need the GraalVM native-image, or &lt;a href=&quot;https://github.com/graalvm/mandrel/releases&quot;&gt;Mandrel&lt;/a&gt; native-image, or Docker/Podman to build the native image in the container.
And probably also Git to checkout your project.
Once you&amp;#8217;re ready it&amp;#8217;s simple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;mvn clean build -Dnative&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So the downside of this approach is obvious.
Are there any other options?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;option-b-use-qemu&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#option-b-use-qemu&quot;&gt;&lt;/a&gt;Option B - use QEMU&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also try to build the native image in a container using an ARM-based container image.
Quarkus provides multi-platform builder images that can be used for this task.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The following steps work on a Linux machine (Ubuntu 22.04) with Docker installed for target environment Raspberry Pi 4 Model B with OS Lite 12 (Bookworm).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install binfmt-support qemu-user-static &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

mvn clean package -Dnative -DskipTests -Dquarkus.native.container-build=true -Dquarkus.native.container-runtime-options=--platform=linux/arm64 -Dquarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel-builder-image:23.1.5.0-Final-java21-arm64 &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We need to install &lt;a href=&quot;https://www.qemu.org/&quot;&gt;qemu&lt;/a&gt; first.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-Dquarkus.native.container-build=true&lt;/code&gt; instructs Quarkus to build the native image using a container.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-Dquarkus.native.container-runtime-options=--platform=linux/arm64&lt;/code&gt; instructs Docker to use QEMU to emulate the ARM environment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-Dquarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel-builder-image:23.1.5.0-Final-java21-arm6&lt;/code&gt; specifies an ARM-based container image that should be used to build the native image.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
See also the &lt;a href=&quot;https://github.com/mkouba/rpi-sample/blob/main/build-native-image.sh&quot;&gt;build-native-image.sh&lt;/a&gt; file in the sample app.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The downside of this approach is that it&amp;#8217;s very slooooow.
It took approximately 20 mins to build a native image from the sample app with common hardware.
On the other hand, you typically only need to build the native image for production.
So it seems to be acceptable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A Quarkus application is a good fit for Raspberry Pi.
If you&amp;#8217;re a Java developer there&amp;#8217;s no need to be afraid that Raspberry Pi will not be able to run your Quarkus app flawlessly.
Especially when you use a native image in production.
Furthermore, the remote development mode provides a very nice UX.
To infinity and beyond!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 09 Dec 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-rpi-bare-metal/
            </guid>
            
            
            
            <author>Martin Kouba (https://twitter.com/martunek)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.17.3 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-17-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.17.3, a maintenance release for our 3.17 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.17, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.17.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.17&quot;&gt;Quarkus 3.17 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.17.3&quot;&gt;3.17.3&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;quarkus-cxf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-cxf&quot;&gt;&lt;/a&gt;Quarkus CXF&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We updated to Quarkus CXF 3.17.1 in the Quarkus Platform.
Check the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.17.1.html&quot;&gt;Quarkus CXF 3.17.1&lt;/a&gt; release notes for more information about what is new in this release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-17-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Creating pure Java LLM infused application with Quarkus, Langchain4j and Jlama</title>
            <link>
                https://quarkus.io/blog/quarkus-jlama/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently the vast majority of LLM-based applications rely on external services provided by specialized companies. These services typically offer the access to huge, general purpose models, implying energy consumption and then costs that are proportional to the size of these models.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even worse, this usage pattern also comes with both privacy and security concerns, since it is virtually impossible to be sure how those service providers will eventually re-use the prompts of their customers, which in some cases could also contain sensitive information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For these reasons many companies are exploring the option of training or fine-tuning smaller models that do not claim to be usable in a general context, but that are tailored towards specific business needs and subsequently running (serving in LLM terms) these models on premise or on private clouds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The features provided by these specialized models need to be integrated into the existing software infrastructure, that in the enterprise world are very often written in Java. This could be accomplished following a traditional client-server architecture, for instance serving the model through an external server like &lt;a href=&quot;https://ollama.com/&quot;&gt;Ollama&lt;/a&gt; and querying it through REST calls. While this should not present any particular problem for Java developers, they could work more efficiently, if they could consume the model directly in Java and without any need to install additional tools. Finally the possibility of embedding the LLM interaction directly in the same Java process running the application will make it easier to move from local dev to deployment, relieving IT from the burden of managing an external server, thus bypassing the need for a more mature platform engineering strategy. This is where Jlama comes into play.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-and-why-executing-llm-inference-in-pure-java-with-jlama&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-and-why-executing-llm-inference-in-pure-java-with-jlama&quot;&gt;&lt;/a&gt;How and why executing LLM inference in pure Java with Jlama&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tjake/Jlama&quot;&gt;Jlama&lt;/a&gt; is a library allowing to execute LLM inference in pure Java. It supports many LLM model families like Llama, Mistral, Qwen2 and Granite. It also implements out-of-the-box many useful LLM related features like functions calling, models quantization, mixture of experts and even distributed inference.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jlama is well integrated with Quarkus through the &lt;a href=&quot;https://quarkus.io/extensions/io.quarkiverse.langchain4j/quarkus-langchain4j-jlama/&quot;&gt;dedicated lanchain4j based extension&lt;/a&gt;. Note that for performance reasons Jlama uses the &lt;a href=&quot;https://openjdk.org/jeps/469&quot;&gt;Vector API&lt;/a&gt; which is still in preview in Java 23, and very likely will be released as a supported feature in Java 25.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In essence Jlama makes it possible to serve an LLM in Java, directly embedded in the same JVM running your Java application, but why could this be useful? Actually this is desirable in many use cases and presents a number of relevant advantages like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Similar lifecycle between model and app&lt;/strong&gt;: There can be use cases where the model and the application using it have the same lifecycle, so that the development of a new feature in the application also requires a change in the model. Similarly, since prompts are very dependent on the model, when the model gets updated even through fine-tuning, your prompt may need to be replaced. In these situations having the model embedded in the application will contribute to simplify the versioning and traceability of the development cycle.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fast development/prototyping&lt;/strong&gt;: Not having to install, configure and interact with an external server can make the development of a LLM-based Java application much easier.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Easy models testing&lt;/strong&gt;: Running the LLM inference embedded in the JVM also makes it easier to test different models and their integration during the development phase.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;: Performing the model inference in the same JVM instance that is run the application using it, eliminates the need of interacting with the LLM only through REST calls, thus preventing the leak of private data and allowing to enforce user authorization at a much finer grain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Monolithic applications support&lt;/strong&gt;: The former point will be also beneficial for users still running monolithic applications, who in this way will be also able to include LLM-based capabilities in those applications without changing their architecture or platform.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Monitoring and Observability&lt;/strong&gt;: Running the LLM inference in pure Java will also allow simplify monitoring and observability, gathering statistics on the reliability and speed of the LLM response.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Developer Experience&lt;/strong&gt;: Debuggability will be simplified in the same way, allowing the Java developer to also navigate and debug the Jlama code if necessary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Distribution&lt;/strong&gt;: Having the possibility to run LLM inference embedded in the same Java process will also make it possible to include the model itself into the same application package of the application using it (even though this could probably be advisable only in very specific circumstances).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Edge friendliness&lt;/strong&gt;: The possibility of implementing and deploying a self-contained LLM-capable Java application will also make it a better fit than a client/server architecture for edge environments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Embedding of auxiliary LLMs&lt;/strong&gt;: Many applications, especially the ones relying on agentic AI patterns, uses many different LLMs at once. For instance a smaller LLM could be used to validate and approve the responses of the main bigger one. In this case an hybrid approach could be convenient, embedding the smaller auxiliary LLMs while keeping serving the main one through a dedicated server.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-site-summarizer-a-pure-java-llm-based-application&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-site-summarizer-a-pure-java-llm-based-application&quot;&gt;&lt;/a&gt;The site summarizer: a pure Java LLM-based application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To demonstrate how Quarkus, Langchain4j and Jlama make straightforward to create a pure Java LLM infused application, where the LLM inference is directly embedded in the same JVM running the application I created a &lt;a href=&quot;https://github.com/mariofusco/site-summarizer&quot;&gt;simple project&lt;/a&gt; that uses a LLM to automatically generate the summarization of a Wikipedia page or more in general of a blog post taken from any website.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This video demonstrates how the application works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/z7l1oGhWI40?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Out-of-the-box this project uses a &lt;a href=&quot;https://huggingface.co/tjake/Llama-3.2-1B-Instruct-JQ4&quot;&gt;small Llama-3.2 model with 4-bit quantization&lt;/a&gt;. When the application is compiled for the first time the model is automatically downloaded locally by Jlama from the Huggingface repository. However it is possible to replace this model and experiment with any other one by simply editing the &lt;a href=&quot;https://github.com/mariofusco/site-summarizer/blob/main/src/main/resources/application.properties#L4&quot;&gt;quarkus.langchain4j.jlama.chat-model.model-name property&lt;/a&gt; in the application.properties file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After having compiled and packaged the project with &lt;code&gt;mvn clean package&lt;/code&gt;, the simplest way to use it is launching the jar passing as argument the URL of the web page containing the article that you want to summarize, something like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shellscript hljs&quot; data-lang=&quot;shellscript&quot;&gt;java -jar --enable-preview --enable-native-access=ALL-UNNAMED --add-modules jdk.incubator.vector target/quarkus-app/quarkus-run.jar https://www.infoq.com/articles/native-java-quarkus/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;that will generate an output like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shellscript hljs&quot; data-lang=&quot;shellscript&quot;&gt;$ java -jar --enable-preview --enable-native-access=ALL-UNNAMED --add-modules jdk.incubator.vector target/quarkus-app/quarkus-run.jar https://www.infoq.com/articles/native-java-quarkus/
WARNING: Using incubator modules: jdk.incubator.vector
__  ____  __  _____   ___  __ ____  ______
 --/ __ \/ / / / _ | / _ \/ //_/ / / / __/
 -/ /_/ / /_/ / __ |/ , _/ ,&amp;lt; / /_/ /\ \
--\___\_\____/_/ |_/_/|_/_/|_|\____/___/
2024-11-28 11:01:09,295 INFO  [io.quarkus] (main) site-summarizer 1.0.0-SNAPSHOT on JVM (powered by Quarkus 3.16.4) started in 0.402s. Listening on: http://0.0.0.0:8080
2024-11-28 11:01:09,299 INFO  [io.quarkus] (main) Profile prod activated.
2024-11-28 11:01:09,300 INFO  [io.quarkus] (main) Installed features: [cdi, langchain4j, langchain4j-jlama, qute, rest, smallrye-context-propagation, smallrye-openapi, vertx]
2024-11-28 11:01:11,006 INFO  [org.mfu.sit.SiteSummarizer] (main) Site crawl took 1701 ms
2024-11-28 11:01:11,010 INFO  [org.mfu.sit.SiteSummarizer] (main) Text extraction took 3 ms
2024-11-28 11:01:11,010 INFO  [org.mfu.sit.SiteSummarizer] (main) Summarizing content 17749 characters long
2024-11-28 11:01:11,640 INFO  [com.git.tja.jla.ten.ope.TensorOperationsProvider] (main) Using Native SIMD Operations (OffHeap)
2024-11-28 11:01:11,647 INFO  [com.git.tja.jla.mod.AbstractModel] (main) Model type = Q4, Working memory type = F32, Quantized memory type = I8
The text you provided is a summary of the Kubernetes Native Java series, which is part of the &quot;Native Compilations Boosts Java&quot; article series. The series aims to provide answers to questions about native compilation, such as how to use native Java, when to switch to native Java, and what framework to use.

The text also mentions the following key points:

* Native compilation with GraalVM makes Java in the cloud cheaper.
* Native compilation raises many questions for all Java users, such as how to use native Java, when to switch to native Java, and what framework to use.
* The series will provide answers to these questions.

Overall, the text provides an overview of the Kubernetes Native Java series and its goals, highlighting the importance of native compilation in the cloud and the need for answers to specific questions about native Java.

Here is a summary of the key points:

* Native compilation with GraalVM makes Java in the cloud cheaper.
* Native compilation raises many questions for all Java users, such as how to use native Java, when to switch to native Java, and what framework to use.
* The series will provide answers to these questions.

I hope this summary is helpful. Let me know if you have any further questions or if there&apos;s anything else I can help with.
---
Site summarization done in 53851 ms
2024-11-28 11:02:03,164 INFO  [io.quarkus] (main) site-summarizer stopped in 0.012s&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that it is necessary to launch the JVM with a few additional arguments that enable the access to the Vector API which is still a Java preview feature, but it is internally used by Jlama to speed up the computation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As better clarified by the readme of the project, there&amp;#8217;s a dedicated operating mode to process Wikipedia pages and also the possibility to expose this service through a REST endpoint.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The internal implementation of this project is relatively straightforward: after having programmatically extracted the text to be summarized from the HTML page containing it, that text is sent to Jlama to be processed via a usual Langchain4j AiService.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;import dev.langchain4j.service.SystemMessage;
import dev.langchain4j.service.UserMessage;
import io.quarkiverse.langchain4j.RegisterAiService;
import io.smallrye.mutiny.Multi;
import jakarta.inject.Singleton;

@RegisterAiService
@Singleton
public interface SummarizerAiService {

    @SystemMessage(&quot;&quot;&quot;
            You are an assistant that receives the content of a web page and sums up
            the text on that page. Add key takeaways to the end of the sum-up.
    &quot;&quot;&quot;)
    @UserMessage(&quot;Here&apos;s the text: &apos;{text}&apos;&quot;)
    Multi&amp;lt;String&amp;gt; summarize(String text);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As anticipated, despite this implementation looks identical to any other LLM inference engine integrations, in this case there isn&amp;#8217;t any remote call to an external service, but the LLM inference is performed directly inside the same JVM running the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The combination of the 2 trends of the increasing spread of small and tailored models and the adoption of these models in the enterprise software development world will very likely promote the use of similar solutions in the near future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Fri, 29 Nov 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-jlama/
            </guid>
            
            
            
            <author>Mario Fusco (https://twitter.com/mariofusco)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.17.2 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-17-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.17.2 (we had to skip 3.17.1 due to a regression detected too late in the release process), a maintenance release for our 3.17 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.17, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.17.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.17&quot;&gt;Quarkus 3.17 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.17.2&quot;&gt;3.17.2&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Fri, 29 Nov 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-17-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.17 - Observability improvements, programmatic permission checkers, MicroProfile REST Client 4.0</title>
            <link>
                https://quarkus.io/blog/quarkus-3-17-0-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.17 is a smaller release than 3.16 but we polished and improved a lot of areas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notable changes are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/41956&quot;&gt;#41956&lt;/a&gt; - Integrate OpenTelemetry to the WebSockets Next extension&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/43983&quot;&gt;#43983&lt;/a&gt; - OpenTelemetry - Add SimpleSpanProcessor support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/43959&quot;&gt;#43959&lt;/a&gt; - Update MicroProfile REST Client to 4.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/43846&quot;&gt;#43846&lt;/a&gt; - Add annotation to allow using custom CDI bean methods as permission checkers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/41929&quot;&gt;#41929&lt;/a&gt; - Use ArC features in datasource extensions for eager startup and active/inactive&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/43448&quot;&gt;#43448&lt;/a&gt; - Adapt locales support for GraalVM &amp;gt;= 24.2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There won&amp;#8217;t be any new minor releases in December but we will release new micros of 3.17.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next minor 3.18 will be released at the end of January.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.17, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.17.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.17&quot;&gt;Quarkus 3.17 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;observability&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#observability&quot;&gt;&lt;/a&gt;Observability&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In relation to observability, we would like to highlight new features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Support for &lt;a href=&quot;https://opentelemetry.io&quot;&gt;OpenTelemetry&lt;/a&gt; in the &lt;a href=&quot;https://quarkus.io/guides/websockets-next-tutorial&quot;&gt;WebSockets Next&lt;/a&gt; extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenTelemetry Simple Processors for traces and logs on Quarkus. This is important for lambda functions and other short-lived processes because it allows sending telemetry faster, not batching it, therefore minoring the risk of losing data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MicroProfile Telemetry 2.0 support by adding automatic JVM and HTTP request metrics to the OpenTelemetry extension.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;microprofile-rest-client-4-0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#microprofile-rest-client-4-0&quot;&gt;&lt;/a&gt;MicroProfile REST Client 4.0&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus REST Clients have been updated to MicroProfile REST Client 4.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;security&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#security&quot;&gt;&lt;/a&gt;Security&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We added more flexibility to how you define your permissions by allowing to point to CDI bean methods for permission checking.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This solution is the Quarkus equivalent to the Expression Language support you can find in some other frameworks.
Expression Language expressions are brittle and hard to debug and robust permission checking is critical,
thus why we prefer you write your permission checking in plain Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find more detailed information about this new feature in the &lt;a href=&quot;https://quarkus.io/guides/security-authorize-web-endpoints-reference#permission-checker&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;inactive-datasources&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#inactive-datasources&quot;&gt;&lt;/a&gt;Inactive datasources&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A lot of work went into ArC, our CDI implementation, and our datasource support to make sure we would avoid a lot of corner cases when a datasource is inactive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We make sure inactive datasources don&amp;#8217;t contribute to health checks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We fail fast if some code tries to inject an inactive datasource.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find more information about this work in the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.17#datasources&quot;&gt;Quarkus 3.17 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;locale-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#locale-support&quot;&gt;&lt;/a&gt;Locale support&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our Mandrel team is working tirelessly to make sure Quarkus stays compatible with the future versions of GraalVM/Mandrel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We adapted our locale support to be compatible with GraalVM &amp;gt;= 24.2 and you can find all the gory details in the corresponding &lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/43448&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-cxf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-cxf&quot;&gt;&lt;/a&gt;Quarkus CXF&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus CXF 3.17 was released and is now available in &lt;a href=&quot;https://code.quarkus.io/?extension-search=origin:platform%20quarkus-cxf&quot;&gt;Quarkus Platform 3.17&lt;/a&gt;.
Check the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.17.0.html&quot;&gt;Quarkus CXF 3.17.0&lt;/a&gt; release notes for more information about what is new in this release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.17.0.CR1&quot;&gt;3.17.0.CR1&lt;/a&gt; and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.17.0&quot;&gt;3.17.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1035 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.17 release, thanks to Ales Justin, Alexei Bratuhin, Alexey Loubyansky, Amit Prasad, Andy Damevin, Antoine de Troostembergh, Benjamin Raimondi, Bruno Baptista, Bruno Marvin, chengehe, Christian Ivanov, Clement Escoffier, Cristian Burlacu, Daniel Bobbert, Daniel Cunha, Daniel Ezihe, Dannier Leonides Galicia Chinchilla, David M. Lloyd, Douglas Monteiro, Emmanuel Ferdman, Foivos Zakkak, Fouad Almalki, Francesco Nigro, Frantisek Havel, George Gastaldi, Georgios Andrianakis, Guillaume Smet, Gunnar Morling, Holly Cummins, Inaki Villar, Ioannis Canellos, Jakub Gardo, Jakub Jedlicka, Jan Martiska, jcarvaja, Jono, Jorge Solórzano, Jose, Julien Ponge, Jérémie Bresson, Katia Aresti, koplas, Ladislav Thon, Loïc Hermann, Loïc Mathieu, luneo7, Marco Belladelli, Marco Sappé Griot, Marek Skacelik, mariofusco, Martin Bartoš, Martin Kouba, Matej Novotny, Matheus Cruz, Max Rydahl Andersen, Melloware, Michael Edgar, Michal Karm Babacek, Michal Maléř, Michal Vavřík, Murray Hopkins, Ozan Gunalp, Peter Palaga, Phillip Krüger, Ralf Ueberfuhr, Raphael Tholl, rghara, Robert Stupp, Robert Toyonaga, Roberto Cortez, Robin De Mol, RobinDM, Rod Cheater, Rolfe Dlugy-Hegwer, Rostislav Svoboda, Ruwen Reddig, Sergey Beryozkin, sNiXx, Stef, Stéphane Épardaud, Thomas Canava, Trấn Nguyễn, Vincent Sourin, vsevel, and Yoann Rodière.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 27 Nov 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-17-0-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.16.4 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-16-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.16.4, a maintenance release for our 3.16 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This version contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.16, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.16.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.16&quot;&gt;Quarkus 3.16 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.16.4&quot;&gt;3.16.4&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 20 Nov 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-16-4-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.15.2 released - LTS maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-15-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.15.2, our first (we skipped 3.15.0) maintenance release for the 3.15 LTS release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.15.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.15, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update --stream=3.15&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.15.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.15.2&quot;&gt;the full changelog of 3.15.2 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 18 Nov 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-15-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.16.3 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-16-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.16.3, a maintenance release for our 3.16 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This version contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.16, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.16.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.16&quot;&gt;Quarkus 3.16 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.16.3&quot;&gt;3.16.3&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 13 Nov 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-16-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #50 - November</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-50/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Explore building a Quarkus application using Tekton, which is the upstream project on which OpenShift Pipelines is based on in &quot;Building a Quarkus Application using OpenShift Pipelines&quot; by Stephen Nimmo. Clement Escoffier&amp;#8217;s blog post &quot;Strengthening the Release Process for Quarkiverse and SmallRye&quot; outlines a corrected vulnerability in the SmallRye release process and a more secure release pipeline for SmallRye and Quarkiverse repositories. Learn about organizing a microservices codebase with Beans, EJB concepts, and the Repository pattern and touch upon automated testing using REST Assured and Quarkus JUnit5 in &quot;Organizing Microservices with EJB, Beans, and Testing in Quarkus&quot; by @Harsh. Read &quot;Build containerized applications for Amazon DocumentDB that run on Amazon ECS on AWS Fargate&quot; by Sourav Biswas and Varma Gottumukkala, to explore the fundamentals of building containerized applications for Amazon DocumentDB using Quarkus with the Panache ORM library. Clojure can be integrated into a Quarkus app to create dynamic routes easily. By connecting the two ecosystems, a basic routing system is set up. Explore more possibilities with Clojure and Quarkus on this foundation in &quot;Calling Clojure from Java using a real example (Clojure + Quarkus)&quot; by Gustavo Camargo. SmallRye OpenAPI in Quarkus is like having an intelligent intern managing API documentation as you code. Check out &quot;The Power of SmallRye OpenAPI in Quarkus: A Developer&amp;#8217;s Guide to Effortless API Documentation&quot; by suddo to learn how to implement this feature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/50/&quot;&gt;Newsletter #50: November&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 12 Nov 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-50/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.16.2 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-16-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.16.2, a maintenance release for our 3.16 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this version, we upgraded the PostgreSQL Dev Services to PostgreSQL 17,
as older versions had issues on Mac Mx architecture.
If it is a problem for your applications, you can go back to a previous image by setting the &lt;code&gt;quarkus.datasource.devservices.image-name=&amp;#8230;&amp;#8203;&lt;/code&gt; configuration property (or &lt;code&gt;quarkus.datasource.&quot;datasource-name&quot;.devservices.image-name=&amp;#8230;&amp;#8203;&lt;/code&gt; for a named datasource).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.16, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.16.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.16&quot;&gt;Quarkus 3.16 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.16.2&quot;&gt;3.16.2&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 06 Nov 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-16-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.16 - OpenTelemetry Logging, LGTM Quarkus dashboard and too many things to list here</title>
            <link>
                https://quarkus.io/blog/quarkus-3-16-1-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the 3.15 LTS release comes Quarkus 3.16 and a lot of new features and enhancements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.16 is the result of the 2 month worth of work so it&amp;#8217;s more packed than your usual Quarkus minor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
We went directly to 3.16.1 due to the inclusion of a last minute fix.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notable changes are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/43005&quot;&gt;#43005&lt;/a&gt; - Drop the compatibility layer for the Big Reactive Rename&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/38239&quot;&gt;#38239&lt;/a&gt; - OpenTelemetry Logging support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/41264&quot;&gt;#41264&lt;/a&gt; - LGTM Quarkus dashboard&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/42954&quot;&gt;#42954&lt;/a&gt; - Generate reflection-free Jackson deserializers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/42642&quot;&gt;#42642&lt;/a&gt; - Quarkus REST - Support record parameter containers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/43331&quot;&gt;#43331&lt;/a&gt; - Introduce per invocation override of REST Client&amp;#8217;s base URL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/41866&quot;&gt;#41866&lt;/a&gt; - Add quarkus-oidc-client-registration extension&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/42749&quot;&gt;#42749&lt;/a&gt; - Add new AuthorizationPolicy annotation to bind named HttpSecurityPolicy to a Jakarta REST endpoints&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/42879&quot;&gt;#42879&lt;/a&gt; - Add OIDC Client SPI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/43241&quot;&gt;#43241&lt;/a&gt; - Support @PermissionsAllowed defined on meta-annotation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/43283&quot;&gt;#43283&lt;/a&gt; - Introduce OidcResponseFilter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/42935&quot;&gt;#42935&lt;/a&gt; - Support for two or more authentications for a single request&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/43609&quot;&gt;#43609&lt;/a&gt; - Support Keycloak Dev Service when OIDC client is used without OIDC extension&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/42534&quot;&gt;#42534&lt;/a&gt; - Integrate GraphQL clients with the TLS registry extension&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/43303&quot;&gt;#43303&lt;/a&gt; - Integrate Keycloak Admin Client with TLS registry&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/43402&quot;&gt;#43402&lt;/a&gt; - Auto log for Dev Services in containers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/43441&quot;&gt;#43441&lt;/a&gt; - Add HTTP Access Log to Dev UI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/42907&quot;&gt;#42907&lt;/a&gt; - Allow multiple format and themes in the Config Doc generator&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that we haven&amp;#8217;t forgotten 3.15 LTS, a 3.15.2 LTS is in the works and will be released in November.
We are carefully selecting the fixes we will backport to it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.16, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.16.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.16&quot;&gt;Quarkus 3.16 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;big-reactive-rename-compatibility-layer-dropped&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#big-reactive-rename-compatibility-layer-dropped&quot;&gt;&lt;/a&gt;Big Reactive Rename compatibility layer dropped&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Remember the Big Reactive Rename?
It happened in 3.9 with the ultimate goal of avoiding the confusion between extensions that have a reactive core and are supporting equally well reactive and non-reactive workloads and extensions that are purely designed as reactive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A lot of extensions were renamed and we put in place relocations both for the artifacts and for the configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Compatibility layers have a cost and we decided to drop this one in 3.16, after the 3.15 LTS release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you encounter issues with this change, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.9&quot;&gt;Quarkus 3.9 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are using &lt;code&gt;quarkus update&lt;/code&gt; to update to each new version, the changes were handled for you already.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;opentelemetry-logging&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#opentelemetry-logging&quot;&gt;&lt;/a&gt;OpenTelemetry Logging&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.16 supports distributed logging via OpenTelemetry Logging.
This is the natural continuation of the OpenTelemetry work in Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This support is part of the already existing OpenTelemetry extension and can be easily enabled via configuration properties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To learn more about it, have a look at the &lt;a href=&quot;https://quarkus.io/guides/opentelemetry-logging&quot;&gt;dedicated guide&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;lgtm-dashboard&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#lgtm-dashboard&quot;&gt;&lt;/a&gt;LGTM dashboard&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When using the LGTM Dev Services, an out of the box Quarkus dashboard will now be provided.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;quarkus-rest&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-rest&quot;&gt;&lt;/a&gt;Quarkus REST&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Quarkus REST, you can use custom classes as parameters of your REST methods but records were not supported.
It is now the case in Quarkus 3.16.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When using the REST Client, providing a URL is mandatory and you usually configure it globally.
However, from time to time, you might want to configure it per-invocation.
The &lt;code&gt;@Url&lt;/code&gt; annotation was introduced for that: annotate a parameter of your REST Client method with it and you can dynamically provide a URL.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jackson&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jackson&quot;&gt;&lt;/a&gt;Jackson&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You might remember that in Quarkus 3.14, we introduced &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-14-1-released/#faster-reflection-free-jackson-serializers&quot;&gt;faster reflection-free serializers&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And you might have wondered &quot;where are my faster reflection-free &lt;strong&gt;de&lt;/strong&gt;serializers&quot;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;They just landed in 3.16!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;security&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#security&quot;&gt;&lt;/a&gt;Security&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, this version comes with several new features and enhancements related to our security layer:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/41866&quot;&gt;#41866&lt;/a&gt; - Add quarkus-oidc-client-registration extension - see &lt;a href=&quot;https://quarkus.io/guides/security-openid-connect-client-registration&quot;&gt;documentation&lt;/a&gt; here&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/42749&quot;&gt;#42749&lt;/a&gt; - Add new AuthorizationPolicy annotation to bind named HttpSecurityPolicy to a Jakarta REST endpoints - see &lt;a href=&quot;https://quarkus.io/guides/security-authorize-web-endpoints-reference#authorization-policy-example&quot;&gt;documentation&lt;/a&gt; here&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/42879&quot;&gt;#42879&lt;/a&gt; - Add OIDC Client SPI - see &lt;a href=&quot;https://quarkus.io/guides/security-openid-connect-client-reference#oidc-client-spi&quot;&gt;documentation&lt;/a&gt; here&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/43241&quot;&gt;#43241&lt;/a&gt; - Support &lt;code&gt;@PermissionsAllowed&lt;/code&gt; defined on meta-annotation - see &lt;a href=&quot;https://quarkus.io/guides/security-authorize-web-endpoints-reference#permission-meta-annotation&quot;&gt;documentation&lt;/a&gt; here&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/43283&quot;&gt;#43283&lt;/a&gt; - Introduce &lt;code&gt;OidcResponseFilter&lt;/code&gt; - see &lt;a href=&quot;https://quarkus.io/guides/security-oidc-code-flow-authentication#code-flow-oidc-response-filters&quot;&gt;documentation&lt;/a&gt; here&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/42935&quot;&gt;#42935&lt;/a&gt; - Support for two or more authentications for a single request - described &lt;a href=&quot;https://quarkus.io/guides/security-authentication-mechanisms&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/43609&quot;&gt;#43609&lt;/a&gt; - Support Keycloak Dev Service when OIDC client is used without OIDC extension&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tls-registry-everywhere&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tls-registry-everywhere&quot;&gt;&lt;/a&gt;TLS registry everywhere&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The TLS registry was introduced in Quarkus a while ago and we are iterating in each version to migrate more extensions to it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Quarkus 3.16, two new extensions have been adapted to rely on the centralized TLS registry:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SmallRye GraphQL Client&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keycloak Admin Client&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dev-ui&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dev-ui&quot;&gt;&lt;/a&gt;Dev UI&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Dev UI is continuously enhanced but we wanted to highlight a very nice addition:
logs from your Dev Services containers and HTTP access logs are now available in the Dev UI.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;configuration-documentation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configuration-documentation&quot;&gt;&lt;/a&gt;Configuration documentation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When developing extensions, it can be handy to publish your configuration documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Until now, it was only possible to publish it in Asciidoc.
With 3.16, you can also generate Markdown by passing &lt;code&gt;&amp;lt;format&amp;gt;markdown&amp;lt;/format&amp;gt;&lt;/code&gt; to the configuration of the Config Doc Maven Plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been updated to 3.16.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-cxf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-cxf&quot;&gt;&lt;/a&gt;Quarkus CXF&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus CXF 3.16 was released and is now available in &lt;a href=&quot;https://code.quarkus.io/?extension-search=origin:platform%20quarkus-cxf&quot;&gt;Quarkus Platform 3.16&lt;/a&gt;.
Check the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.16.0.html&quot;&gt;Quarkus CXF 3.16.0&lt;/a&gt; release notes for more information about what is new in this release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.16.0.CR1&quot;&gt;3.16.0.CR1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.16.0&quot;&gt;3.16.0&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.16.1&quot;&gt;3.16.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1020 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.16 release, thanks to AB, Adriano Moreira, Akulov S V, Ales Justin, Alex Martel, Alexandros Antonakakis, Alexey Loubyansky, Andreas Stangl, Andy Damevin, Auri Munoz, AxiomaticFixedChimpanzee, Bassel Rachid, Bruno Baptista, Chris Cranford, Chris Laprun, Christian Navolskyi, Claudio Miranda, Clement Escoffier, Dale Peakall, Daniel Bobbert, Daniel Cunha, Daniel Ezihe, Dannier Leonides Galicia Chinchilla, David M. Lloyd, Davide D&amp;#8217;Alto, Dimitris Polissiou, Domenico Briganti, Falko Modler, Foivos Zakkak, Francesco Nigro, Galder Zamarreño, George Gastaldi, Georgios Andrianakis, Guillaume Smet, Gunnar Morling, Gunther C. Wenda, Holly Cummins, Inaki Villar, Ioannis Canellos, Jakub Gardo, Jakub Jedlicka, Jan Martiska, jcarranzan, Jeremy Whiting, Jerome Prinet, Jonathan Kolberg, Jorge Solórzano, Julien Ponge, Jérémie Bresson, Jérémie Panzer, Katia Aresti, KERN Christian, Konrad Durnoga, KS, Ladislav Thon, Lars, Laurent Perez, Loic Hermann, Lorenzo De Francesco, Loïc Hermann, Loïc Mathieu, luneo7, Marc Nuri, Marcel Stör, Marcelo Ataxexe Guimarães, Marek Skacelik, mariofusco, marko-bekhta, Martin Bartoš, Martin Kouba, Matej Novotny, Matheus Cruz, Matthias Schorsch, mauroantonio.depalma, Max Rydahl Andersen, Maximilian Rehberger, Melloware, Michael Edgar, Michal Maléř, Michal Vavřík, Nathan Erwin, Nicholas Kolatsis, Ozan Gunalp, Ozzy Osborne, Paul6552, Paulo Casaes, Peer Bech Hansen, Peter Palaga, peubouzon, PhilKes, Phillip Krüger, polarctos, Ralf Ueberfuhr, rghara, Robert Stupp, Roberto Cortez, RobinDM, Rod Cheater, Rolfe Dlugy-Hegwer, Roman Lovakov, Rostislav Svoboda, Sanne Grinovero, Sebastian Schuster, Sergey Beryozkin, Seto, sku20, Stéphane Épardaud, Thomas Canava, Thomas Segismont, Tiago Bento, tmulle, Vincent Sevel, xstefank, yamada-y0, Yasser Greyeb, Yoann Rodière, Yurii Dubinka, and Žan Ožbot.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 30 Oct 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-16-1-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #49 - October</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-49/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Explore how the combination of Quarkus and LangChain4J boosts productivity and efficiency in developing Java-based AI systems as well as understanding the key concepts underlying the development of such applications in &quot;Leveraging Quarkus and LangChain4j&quot; by Thiago dos Santos Hora. Read &quot;Enhancing the Quarkus developer experience: New updates for IntelliJ and VS Code tools&quot; by Mohit Suman &amp;amp; Angelo Zerr for information on the latest releases of Quarkus Tools for IntelliJ 2.0.2 and Quarkus Tools for Visual Studio Code 1.18.1 that deliver significant enhancements to support Quarkus and Qute, making development smoother. Check out Yatin Batra&amp;#8217;s article &quot;Quarkus Citrus Test Tutorial&quot; to Learn how to implement and run integration tests using Quarkus with Citrus framework for effective testing. &quot;Effective Project Structuring for Microservices with Quarkus&quot; by Ivelin Yanev is a great way to learn the key to leveraging Quarkus effectively by understanding how to structure your project correctly. Kostiantyn Ivanov wrote a great tutorial, &quot;Connecting to Elasticsearch Using Quarkus&quot; the helps you explore how to integrate Quarkus with Elasticsearch, a well-known full-text search engine and NoSQL datastore.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/49/&quot;&gt;Newsletter #49: October&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 17 Oct 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-49/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Strengthening the Release Process for Quarkiverse and SmallRye</title>
            <link>
                https://quarkus.io/blog/quarkiverse-and-smallrye-new-release-process/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In May, we were alerted about a potential leak in the &lt;a href=&quot;https://smallrye.io/&quot;&gt;SmallRye&lt;/a&gt; release process.
We acted swiftly to mitigate the issue; fortunately, no damage was done.
Even if Quarkiverse has no reported leak, during our investigation, we uncovered a deeper flaw that affected not only SmallRye but also Quarkiverse.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, we’ll explain the vulnerability we discovered and introduce a more secure release pipeline for both Quarkiverse and SmallRye repositories.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; We’ve uncovered a security flaw in the release process for Quarkiverse and SmallRye that could have allowed malicious actors to impersonate projects and publish compromised artifacts.
We’ve implemented a new, more secure release pipeline to address this.
If you’re a maintainer, you’ve received a pull request to migrate to the new process.
Quarkus itself is not affected by this issue, only SmallRye and Quarkiverse.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please act immediately, as the old release process will be retired by October 16th, 2024.
So make sure to merge the pull request before then to avoid any disruptions in your releases.
If you have any questions or concerns, please contact us on &lt;a href=&quot;https://quarkusio.zulipchat.com/#narrow/stream/187038-dev&quot;&gt;Zulip&lt;/a&gt; or &lt;a href=&quot;https://github.com/quarkusio/quarkus/discussions&quot;&gt;GitHub Discussions&lt;/a&gt;.
Details on this change are &lt;a href=&quot;#call-for-action-migrating-to-the-new-release-process&quot;&gt;below&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more details on the issue, the solution, and how to adapt, read on!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-flaw-a-closer-look-at-the-release-process&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-flaw-a-closer-look-at-the-release-process&quot;&gt;&lt;/a&gt;The Flaw: A Closer Look at the Release Process&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To understand the flaw, it’s important to outline the release process Quarkiverse and SmallRye used first.
Quarkiverse and SmallRye offer development facilities to ease the development of Quarkus extensions and SmallRye projects used in Quarkus, respectively.
There is no central supervision of all these repositories; they evolve at their own pace, individually.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both organizations use GitHub repositories and GitHub Actions as CI and automation framework.
Here’s how the release project worked:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;A developer opens a pull request in the repository, updating the version number in the project’s &lt;code&gt;project.yaml&lt;/code&gt; file (See &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j/pull/904&quot;&gt;this PR&lt;/a&gt; as an example).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The regular build workflow runs to ensure it builds successfully.
A specific pre-release flow also runs to verify that the YAML file is correctly formatted.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once the pull request is merged, a release workflow is triggered.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The release workflow starts by &lt;em&gt;preparing&lt;/em&gt; the release.
It sets the project&amp;#8217;s version to the configured version and creates a tag with the new updated code.
It also updates the main branch (or the source branch of the pull request) to the next development version and commits this change to the branch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once the preparation step is complete, the tag is checked out, and the release artifacts are created.
This phase is called &lt;em&gt;release perform&lt;/em&gt;.
During that phase, binary artifacts are created from the tagged sources.
The artifacts are signed and pushed to Maven Central.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/release_process/original-release-process.png&quot; alt=&quot;The release process used by Quarkiverse and SmallRye&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last step, the &lt;em&gt;release perform&lt;/em&gt;, is where the flaw exists. Here’s why:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To sign the artifacts, the workflow uses an organization-wide GPG key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To publish the artifacts, the workflow uses organization-wide credentials&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/release_process/flaw.png&quot; alt=&quot;The flaw in the release process&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The GPG passphrase and the Maven Central credential are stored as secrets in the project’s GitHub repository but shared across the entire organization.
They are not freely accessible.
You cannot print them in the log (without a bit of magic), and cannot be accessed from forks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, everything seems fine.
Both SmallRye and Quarkiverse provide maintainers with great freedom to customize GitHub Action workflows to fit their needs.
This flexibility, while empowering, also introduces risks.
And &amp;#8230;&amp;#8203; here we go&amp;#8230;&amp;#8203;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-problem-a-risk-of-credential-exposure-and-impersonification&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-problem-a-risk-of-credential-exposure-and-impersonification&quot;&gt;&lt;/a&gt;The Problem: A Risk of Credential Exposure (and Impersonification)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We said that secrets are not freely accessible.
That’s true, except for one case.
GitHub Actions (see Github Action Security overview) running in the project itself can access them.
Even tests can access them.
Anything running during the workflow (actions, scripts&amp;#8230;&amp;#8203;) can access these secrets&amp;#8230;&amp;#8203; and leak them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a developer includes an external or third-party GitHub Action, Maven / Gradle plugin, or Junit Extension&amp;#8230;&amp;#8203;  in their workflow, that code gains access to the organization-wide credentials.
Any code running during the workflow on the repository — not a fork — can potentially expose these secrets.
The ramifications are severe:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An attacker could release compromised yet legitimate-looking project versions signed with the organization’s GPG key to Maven Central.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Worse still, they could push malicious artifacts to Maven Central under the Quarkiverse or SmallRye banner, impersonating the entire organization.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In short, with access to these credentials, an attacker could impersonate Quarkiverse or SmallRye, bypassing typical protections like signed commits or branch protection.
The vulnerability arises from the fact that these credentials are shared and available to any code running during the workflow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Despite quickly mitigating the initial SmallRye leak, discovering this larger flaw prompted us to reevaluate our release process.
It became clear that we needed a more secure and resilient approach to prevent such risks in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-solution-a-new-release-process&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-solution-a-new-release-process&quot;&gt;&lt;/a&gt;The Solution: A new release process&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After careful consideration, we concluded that relying on organization-wide secrets for releases was no longer viable.
We needed a more secure approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At first, we explored the idea of using repository-specific credentials.
While this would limit the blast radius in case of a leak, it would be difficult to manage at scale and slow down the onboarding process.
Additionally, an individual repository could still be compromised and impersonated even with this approach.
Therefore, we decided against this solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead, we devised a more robust and secure solution involving two repositories: one for the code being released and a separate one for executing the release perform phase itself.
Crucially, the repository with the source code no longer has access to organization-wide credentials—only the second repository does.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/release_process/new-release-process.png&quot; alt=&quot;The new release process&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the second workflow (red) is complete, it unblocks the first one (blue).
Thus, you know when the second workflow is completed and if it was successful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;how-it-works-a-step-by-step-breakdown&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-it-works-a-step-by-step-breakdown&quot;&gt;&lt;/a&gt;How It Works: A Step-by-Step Breakdown&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this new approach, the initial stages of the release process remain unchanged.
Here’s what happens now:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;A developer opens a pull request, updating the version number in the &lt;code&gt;project.yaml&lt;/code&gt; file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The pre-release workflow is triggered within the repository, ensuring the build is correct and the version is appropriately updated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once the pull request is merged, the release process diverges from the previous approach:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The first repository executes the preparation steps, such as version updates, tag creation, and setting the next development version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The release artifacts are generated but not signed or pushed to Maven Central.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, a second workflow is triggered in a separate repository.
This is where the critical actions happen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The second repository, which contains the necessary credentials (Maven Central credentials and GPG passphrase), downloads the release artifacts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It verifies the integrity of the artifacts using attestations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The artifacts are then signed and pushed to Maven Central.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This second repository is crucial for security.
It’s locked down and non-modifiable, meaning no developer can customize the workflow or inadvertently introduce a vulnerability.
By isolating the sensitive release steps in this secured environment, we’ve significantly reduced the risk of leaks or unauthorized access.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This new process provides a much-needed layer of separation, ensuring that the credentials remain protected and that the possibility of a leak is greatly diminished.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;balancing-security-with-developer-freedom&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#balancing-security-with-developer-freedom&quot;&gt;&lt;/a&gt;Balancing Security with Developer Freedom&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As highlighted earlier, both Quarkiverse and SmallRye strongly emphasize empowering developers by minimizing the overhead of maintaining open-source components.
Our new release process maintains this philosophy, ensuring developers still have the flexibility to adjust workflows in their component repositories as needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Developers and maintainers can continue to modify workflows, introduce custom CI steps, and tailor their processes to meet specific project needs.
The only significant change is that part of the release process—the critical signing and publishing steps—now occurs in a separate, secured repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Importantly, maintainers retain the ability to trigger a release at any time, from any branch, just as they could before.
The handoff to the second repository happens seamlessly, so the developer experience remains largely the same.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This flexibility remains intact for projects that have heavily customized their release pipelines (for example, incorporating pre-release validations or automating tasks like website updates, release note generation, or breaking change detection).
These projects can still trigger:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Validation workflows when the &lt;code&gt;project.yaml&lt;/code&gt; file is updated via a pull request.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post-release workflows, triggered when a new tag is created, allow tasks such as documentation updates or notifications to continue unhindered.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By preserving this level of freedom, we ensure that developers can adapt their workflows to the needs of their projects while benefiting from a more secure release pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;resilience-preparing-for-the-unexpected&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#resilience-preparing-for-the-unexpected&quot;&gt;&lt;/a&gt;Resilience: Preparing for the Unexpected&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The release process, by its nature, is a complex and multi-step operation where things can occasionally go wrong.
While the new release pipeline adds another layer of complexity due to its split-repository design, we have built resilience into the system to mitigate potential issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To address this, we’ve ensured that the new process is idempotent, meaning it can be safely retried without causing inconsistencies or errors.
If a failure occurs at any point during the release — whether due to network issues, build failures, or artifact verification problems — the process can be restarted from the failed workflow.
This allows the release to proceed without needing to repeat previous steps unnecessarily.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, we have built in various checks and verifications at key stages of the release process, such as verifying artifact integrity (using attestation) are completed before moving on to the next stage.
These safeguards help reduce the risk of an incomplete or erroneous release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Should any unexpected issues arise, both the component repository and the secured release repository provide detailed logs, allowing developers to diagnose and resolve problems quickly.
This transparency ensures that maintainers remain in control, even when things don’t go as planned.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These measures aim to provide a more resilient, fault-tolerant release process that doesn’t compromise on security or developer experience.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;call-for-action-migrating-to-the-new-release-process&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#call-for-action-migrating-to-the-new-release-process&quot;&gt;&lt;/a&gt;Call for action: Migrating to the new release process&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkiverse or SmallRye project maintainer, you’ve received a pull request that updates your project to the new, more secure release process.
For most maintainers, this update will be seamless and require no other changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, as mentioned earlier, if your project uses a customized or more sophisticated release pipeline, you may need to make a few adjustments to ensure compatibility with the new system.
This could involve updating custom workflows that handle pre-validation steps, website publishing, or release note generation.
Please take the time to review and test the changes in your repository to ensure everything works as expected.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;important-timeline-deprecation-of-the-old-release-process&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#important-timeline-deprecation-of-the-old-release-process&quot;&gt;&lt;/a&gt;Important Timeline: Deprecation of the Old Release Process&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The previous release process has now been deprecated and will be fully blocked by October 16th, 2024.
After this date, releasing your project using the old pipeline will no longer be possible.
Thus, you must adopt the new release process pull request before this deadline to avoid disrupting your project’s release cycle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For maintainers with more complex setups, we encourage you to start the migration as soon as possible to ensure a smooth transition.
Roberto Cortez, George Gastaldi, and the rest of the Quarkus and SmallRye teams are here to help if you need assistance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Next Steps:&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Review the Pull Request: Check the automated pull request in your repository and verify that it updates your release process to the new system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Merge the Changes: Merge the changes before the deprecation date to avoid release interruptions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test Your Workflow: If you’ve customized your release process, run tests to ensure everything still functions as expected under the new pipeline.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reach Out for Support: If you have any questions or need help with the migration, please contact us on &lt;a href=&quot;https://quarkusio.zulipchat.com/#narrow/stream/187038-dev&quot;&gt;Zulip&lt;/a&gt; or &lt;a href=&quot;https://github.com/quarkusio/quarkus/discussions&quot;&gt;GitHub Discussions&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This new release process is a vital step in improving the security of Quarkiverse and SmallRye, and your swift action in migrating will help us ensure the integrity of these projects moving forward.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary-nothing-changes-for-you-its-just-more-secure&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#summary-nothing-changes-for-you-its-just-more-secure&quot;&gt;&lt;/a&gt;Summary: Nothing Changes for You — It’s Just More Secure&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From a Smallrye and Quarkiverse developer’s perspective, the release process for Quarkiverse and SmallRye remains essentially the same.
You still have the freedom to modify workflows, customize release steps, and trigger releases as needed.
The flexibility and control you’ve come to rely on haven’t changed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main difference is behind the scenes: a separate, secured repository now handles the critical steps of signing and publishing your release.
This means the process is more robust, with sensitive credentials locked down, and the risk of leaks or impersonation significantly reduced.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In short, while we’ve enhanced the security of the release pipeline, we’ve done so in a way that minimizes disruption.
You’ll still enjoy the same developer experience — only now, with the added peace of mind that your releases are more secure than ever.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;a-special-thank-you&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-special-thank-you&quot;&gt;&lt;/a&gt;A Special Thank You&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Redefining a more secure and reliable release process was no small feat, and it certainly wasn’t something we could accomplish without some dedicated and enthusiastic developers.
I’d like to extend our heartfelt thanks to George Gastaldi and Roberto Cortez for carrying out much of the heavy lifting throughout this process.
Your dedication and expertise were invaluable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’d also like to give a special shoutout to Andres Almiray, whose support with JReleaser was absolutely instrumental.
The new release process simply wouldn’t have been possible without his reactivity and guidance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 17 Oct 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkiverse-and-smallrye-new-release-process/
            </guid>
            
            
            
            <author>Clement Escoffier (https://twitter.com/clementplop)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.15 - new LTS version</title>
            <link>
                https://quarkus.io/blog/quarkus-3-15-1-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is our pleasure to announce the release of Quarkus 3.15, which is our new LTS (Long Term Support) version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This version is built on the top of Quarkus 3.14 with some additional bugfixes.
New features will come with Quarkus 3.16 that we will release at the end of October.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to know more about our LTS policy, the &lt;a href=&quot;https://quarkus.io/blog/lts-releases/&quot;&gt;LTS announcement&lt;/a&gt; is a must read.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;LTS releases are supported for 12 months.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are coming from the previous LTS, Quarkus 3.8, there are a lot of exciting new features and we recommend reading the following announcements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-3-9-1-released/&quot;&gt;Quarkus 3.9 - Big Reactive Rename&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-3-10-0-released/&quot;&gt;Quarkus 3.10 - Hibernate Search standalone POJO mapper, Flyway 10, security enhancements&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-3-11-0-released/&quot;&gt;Quarkus 3.11 - Dev Services for Observability, progress on WebSockets.next, Infinispan Cache extension and more&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-3-12-0-released/&quot;&gt;Quarkus 3.12 - TLS Registry, load shedding, native image agent, Kotlin 2.0 and more&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-3-13-0-released/&quot;&gt;Quarkus 3.13 - OpenTelemetry Metrics, OpenTelemetry 1.39, TLS registry improvements and more&amp;#8230;&amp;#8203;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-3-14-1-released/&quot;&gt;Quarkus 3.14 - Hibernate ORM 6.6, Let&amp;#8217;s encrypt, faster reflection-free Jackson serializers&amp;#8230;&amp;#8203;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.15, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.15 LTS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are upgrading from 3.14, there&amp;#8217;s nothing to do as 3.15 is the direct continuation of 3.14.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are upgrading from the previous LTS, Quarkus 3.8, please refer to the following migration guides:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.9&quot;&gt;Migration guide for 3.9&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.10&quot;&gt;Migration guide for 3.10&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.11&quot;&gt;Migration guide for 3.11&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.12&quot;&gt;Migration guide for 3.12&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.13&quot;&gt;Migration guide for 3.13&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.14&quot;&gt;Migration guide for 3.14&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.15&quot;&gt;Migration guide for 3.15&lt;/a&gt; - this one is empty as 3.15 is the continuation of 3.14&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; should handle most of the heavy lifting for you,
but there are still cases that should be handled manually and we recommend reading these migration guides carefully.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Keep in mind that we try to reduce the upgrade complexity by making the transition smoother.
For instance, when renaming artifacts, we provide relocations and these relocations are kept until the next LTS is released.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;quarkus-resteasy-reactive&lt;/code&gt; was renamed to &lt;code&gt;quarkus-rest&lt;/code&gt; in Quarkus 3.9,
the relocation is still in place in Quarkus 3.15 and has been dropped only for the upcoming Quarkus 3.16, allowing you a smoother transition to 3.15.
It is recommended to move to the new artifacts but it is not mandated for 3.15 (again, &lt;code&gt;quarkus update&lt;/code&gt; will take care of it if you&amp;#8217;re using it).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been updated to 3.15.0.
You can find everything you need to know about it in the &lt;a href=&quot;https://camel.apache.org/blog/2024/09/camel-quarkus-release-3.15.0/&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-cxf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-cxf&quot;&gt;&lt;/a&gt;Quarkus CXF&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus CXF 3.15 was released and is now available in &lt;a href=&quot;https://code.quarkus.io/?extension-search=origin:platform%20quarkus-cxf&quot;&gt;Quarkus Platform 3.15&lt;/a&gt;.
Check the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.15.0.html&quot;&gt;Quarkus CXF 3.15.0&lt;/a&gt; and &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.15.1.html&quot;&gt;Quarkus CXF 3.15.1&lt;/a&gt; release notes for more information about what is new in this release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.15.0&quot;&gt;3.15.0&lt;/a&gt; and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.15.1&quot;&gt;3.15.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1003 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.15 release, thanks to AB, Ales Justin, Alexey Loubyansky, Auri Munoz, AxiomaticFixedChimpanzee, brunobat, Claudio Miranda, Clement Escoffier, David M. Lloyd, Foivos Zakkak, Francesco Nigro, George Gastaldi, Georgios Andrianakis, Guillaume Smet, Gunther C. Wenda, Holly Cummins, Inaki Villar, Ioannis Canellos, Jakub Jedlicka, Jan Martiska, Jérémie Bresson, Katia Aresti, KERN Christian, Lars, Loic Hermann, luneo7, mariofusco, marko-bekhta, Martin Bartoš, Martin Kouba, Matej Novotny, Matheus Cruz, Matthias Schorsch, Max Rydahl Andersen, Maximilian Rehberger, Michal Maléř, Michal Vavřík, Nicholas Kolatsis, Ozan Gunalp, Peer Bech Hansen, peubouzon, Phillip Krüger, Roberto Cortez, Rolfe Dlugy-Hegwer, Roman Lovakov, Rostislav Svoboda, Sergey Beryozkin, Thomas Canava, xstefank, Yasser Greyeb, Yoann Rodière, and Yurii Dubinka.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The list is a bit smaller than usual as 3.15 only contains bugfixes on top of 3.14.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 26 Sep 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-15-1-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.14.4 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-14-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.14.4, a maintenance release for our 3.14 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It contains several important bugfixes so we recommend the upgrade for anyone already using 3.14.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is especially important if you are using the combination of Gradle and Kotlin
as we reverted an enhancement that caused an important regression.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.14, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.14.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.14&quot;&gt;Quarkus 3.14 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.14.4&quot;&gt;3.14.4&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Sat, 14 Sep 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-14-4-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #48 - September</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-48/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Harnessing Automatic Setup and Integration with Quarkus Dev Services for Efficient Development&quot; by Ivelin Yanev to see the simplicity and power of Quarkus to encourage experimentation, quicker iterations, and ultimately a faster development cycle. Learn how to to make the Quarkus build goal cacheable with minimal modifications to the Maven build configuration, reusing outputs from previous builds to save time in Jérôme Prinet&amp;#8217;s article &quot;Accelerate your Quarkus Maven builds with Develocity Build Cache&quot;. Read &quot;Implementing a Quarkus REST API using PostgreSQL as Database&quot; by Ivan Franchin as a step-by-step guide on how to implement the Movie API, a Quarkus application that uses PostgreSQL as database Explore how to create a dummy REST API in Quarkus and demonstrate various methods to consume it using different clients by reading &quot;How to Consume REST API in Quarkus&quot; by Alexandru Borza. Learn how to get the most out of your serialization performance in &quot;Leveraging Quarkus build-time metaprogramming capabilities to improve Jackson&amp;#8217;s serialization performance&quot; by Mario Fusco. Learn about the creation of the Quarkus JDiameter extension in Eddie Carpenter&amp;#8217;s blog post, &quot;Revolutionizing Telecom Microservice - Modernizing JDiameter with Quarkus&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/48/&quot;&gt;Newsletter #48: September&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-48/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.14.3 - Maintenance release, SBOM generation</title>
            <link>
                https://quarkus.io/blog/quarkus-3-14-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.14.3, a maintenance release for our 3.14 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/3.14.3/quarkus-3.14.3.png&quot; alt=&quot;quarkus 3.14.3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It contains several important bugfixes so we recommend the upgrade for anyone already using 3.14.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While our maintenance releases usually don&amp;#8217;t include new features, we made an exception here as the SBOM generation was frequently requested
and people wanted it in 3.15 LTS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given part of the Quarkus dependencies are build time dependencies not present in the runtime classpath,
some work was needed for SBOM generation to provide the complete picture of the Quarkus application dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find more information about SBOM generation in the &lt;a href=&quot;https://quarkus.io/guides/cyclonedx&quot;&gt;dedicated guide&lt;/a&gt;.
If you experiment with it, feedback is highly welcome!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Quarkus 3.14.3, also comes Quarkus 3.15.0.CR1 which is based on the same code.
Quarkus 3.15.0 core artifacts will be released next week for everyone to prepare the Platform and extensions.
Quarkus 3.15.0 LTS release is planned for September 25th.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.14, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.14.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.14&quot;&gt;Quarkus 3.14 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.14.3&quot;&gt;3.14.3&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-14-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.14.2 - Maintenance release and Micrometer 1.13</title>
            <link>
                https://quarkus.io/blog/quarkus-3-14-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.14.2, a maintenance release for our 3.14 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It contains several important bugfixes so we recommend the upgrade for anyone already using 3.14.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While our maintenance releases usually don&amp;#8217;t include important changes, we had to make an exception for the upgrade to Micrometer 1.13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our main issue was that Micrometer 1.12 would reach EOL in a few months, which wasn&amp;#8217;t in line with the upcoming 3.15 LTS release.
As previously explained, 3.15 will be based the continuation of the 3.14 branch,
thus why we included this update in 3.14.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.14#micrometer&quot;&gt;3.14 migration guide&lt;/a&gt; has been updated to reflect that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.14, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.14.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.14&quot;&gt;Quarkus 3.14 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.14.2&quot;&gt;3.14.2&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-14-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.8.6 released - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-8-6-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.8.6, a new maintenance release for our 3.8 LTS release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.8.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.8, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update --stream=3.8&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.8.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using 3.x, please refer to the &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-0-final-released/&quot;&gt;3.0 announcement&lt;/a&gt; for all the details.
You can also refer to &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-upgrade/&quot;&gt;this blog post&lt;/a&gt; for additional details.
Once you upgraded to 3.0, also have a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.1&quot;&gt;3.1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;3.2&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.3&quot;&gt;3.3&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.4&quot;&gt;3.4&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.5&quot;&gt;3.5&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.6&quot;&gt;3.6&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.7&quot;&gt;3.7&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.8&quot;&gt;3.8&lt;/a&gt; migration guides.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.8.6&quot;&gt;the full changelog of 3.8.6 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 29 Aug 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-8-6-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.14 - Hibernate ORM 6.6, Let&apos;s encrypt, faster reflection-free Jackson serializers...</title>
            <link>
                https://quarkus.io/blog/quarkus-3-14-1-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is our pleasure to announce the release of Quarkus 3.14.1
(we skipped the release of 3.14.0 so 3.14.1 is actually the first 3.14 release).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have been busy improving Quarkus in August and this version brings a lot of interesting new features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/41359&quot;&gt;#41359&lt;/a&gt; - Upgrade to Hibernate ORM 6.6 / Search 7.2 / Reactive 2.4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/40329&quot;&gt;#40329&lt;/a&gt; - Speedup Hibernate ORM&amp;#8217;s enhancement of large models&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/42105&quot;&gt;#42105&lt;/a&gt; - Let&amp;#8217;s Encrypt Support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/41063&quot;&gt;#41063&lt;/a&gt; - Generate faster reflection-free Jackson serializers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/41249&quot;&gt;#41249&lt;/a&gt; - Initial gRPC CLI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/42097&quot;&gt;#42097&lt;/a&gt; - Update UBI images to 1.20/8.10&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/37034&quot;&gt;#37034&lt;/a&gt; - Decorate stacktraces in dev mode error page&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/42409&quot;&gt;#42409&lt;/a&gt; - Vert.x HTTP: execute custom logic when HTTP server is started&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/42519&quot;&gt;#42519&lt;/a&gt; - Accept signed OIDC UserInfo&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/42445&quot;&gt;#42445&lt;/a&gt; - Upgrade MongoDB client to 5.1.3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/42141&quot;&gt;#42141&lt;/a&gt; - Reimplement the extension annotation processor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/41648&quot;&gt;#41648&lt;/a&gt; - Make mvnd 1.x work and require Maven 3.9.6 to build Quarkus&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, if you already updated to Quarkus 3.13 and moved to &lt;code&gt;@WithTestResource&lt;/code&gt;, please have a look at &lt;a href=&quot;#withtestresourcequarkustestresource&quot;&gt;this section&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.14, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.14.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.14&quot;&gt;Quarkus 3.14 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;toward-quarkus-3-15-lts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#toward-quarkus-3-15-lts&quot;&gt;&lt;/a&gt;Toward Quarkus 3.15 LTS&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We announced it already, the next LTS version of Quarkus will be Quarkus 3.15.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It will be branched directly from the 3.14 branch and will be the direct continuation of our 3.14 work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So don&amp;#8217;t expect new features in 3.15, we will focus on bugfixes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hibernate-orm-6-6-search-7-2-reactive-2-4&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hibernate-orm-6-6-search-7-2-reactive-2-4&quot;&gt;&lt;/a&gt;Hibernate ORM 6.6 / Search 7.2 / Reactive 2.4&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We upgraded the Hibernate stack to the latest and greatest:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://in.relation.to/2024/08/08/orm-660/&quot;&gt;Hibernate ORM 6.6&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://in.relation.to/2024/08/09/hibernate-search-7-2-0-Final/&quot;&gt;Hibernate Search 7.2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://in.relation.to/2024/08/09/hibernate-reactive-2_4_0_Final/&quot;&gt;Hibernate Reactive 2.4&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given it&amp;#8217;s new minor versions coming with new features and some behavioral changes, we highly recommend to have a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.14&quot;&gt;Quarkus 3.14 migration guide&lt;/a&gt; if you are using the Hibernate stack in your Quarkus applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks to a contributor who provided a large entity model under an Open Source license, we were also able to optimize the Hibernate ORM bootstrap for large models and you should see significant improvements in the Hibernate ORM boot time if you have a large entity model.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;lets-encrypt&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#lets-encrypt&quot;&gt;&lt;/a&gt;Let&amp;#8217;s encrypt&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The TLS registry we introduced recently has gained easy management of Let&amp;#8217;s encrypt certificates,
in part thanks to a nice Quarkus CLI plugin allowing to generate Let&amp;#8217;s encrypt certificates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Learn more about it in our &lt;a href=&quot;https://quarkus.io/guides/tls-registry-reference#lets-encrypt&quot;&gt;TLS registry reference&lt;/a&gt; guide.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;faster-reflection-free-jackson-serializers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#faster-reflection-free-jackson-serializers&quot;&gt;&lt;/a&gt;Faster reflection-free Jackson serializers&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We all love our code running fast.
And Jackson default serialization, while very efficient, is using reflection which introduces some overhead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Quarkus 3.14, you have the ability to generate faster reflection-free serializers for the the types that will be serialized by Quarkus REST.
Jackson has a ton of features and not all of them are supported but this new feature is smart enough that it default to standard Jackson serialization if your classes are using Jackson features we don&amp;#8217;t support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This option is still experimental and disabled by default but we would love for you to test it and report back (does it work for you? do we need to add one more feature for you to be able to use it?).
You can find more information about it in the &lt;a href=&quot;https://quarkus.io/guides/rest#reflection-free-jackson-serialization&quot;&gt;REST reference&lt;/a&gt; guide.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;grpc-cli&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#grpc-cli&quot;&gt;&lt;/a&gt;gRPC CLI&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You know we are very concerned about the Dev Experience with Quarkus.
A part of this amazing DevEx is the Quarkus CLI, that brings more and more features with each version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 3.14, we introduced a gRPC CLI plugin, which may make your life a lot better if you are using the Quarkus gRPC extensions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see some examples of how to use it &lt;a href=&quot;https://quarkus.io/guides/grpc-cli&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;ubi-images&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ubi-images&quot;&gt;&lt;/a&gt;UBI images&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We updated the default UBI images to 1.20/8.10.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;decorated-stacktrace-in-dev-mode&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#decorated-stacktrace-in-dev-mode&quot;&gt;&lt;/a&gt;Decorated stacktrace in dev mode&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you are using dev mode, we try hard to make the stacktraces as meaningful and helpful as possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Quarkus 3.14, they are now decorated with more context, allowing to jump more quickly to the source of the problem.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;vert-x-http-execute-custom-logic-when-http-server-is-started&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vert-x-http-execute-custom-logic-when-http-server-is-started&quot;&gt;&lt;/a&gt;Vert.x HTTP: execute custom logic when HTTP server is started&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This was a popular request and we now provide an easy way to execute some code after the HTTP server is started.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find out all about it in the &lt;a href=&quot;https://quarkus.io/guides/http-reference#how-to-execute-logic-when-http-server-started&quot;&gt;HTTP reference&lt;/a&gt; guide.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;accept-signed-oidc-userinfo&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#accept-signed-oidc-userinfo&quot;&gt;&lt;/a&gt;Accept signed OIDC UserInfo&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some OIDC providers returns the &lt;code&gt;UserInfo&lt;/code&gt; as a signed JWT token.
This is now supported transparently by Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mongodb-client&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mongodb-client&quot;&gt;&lt;/a&gt;MongoDB client&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We updated the MongoDB client from 4.11.x to 5.1.x.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;extension-annotation-processor&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#extension-annotation-processor&quot;&gt;&lt;/a&gt;Extension annotation processor&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is only of interest for extension developers but the extension annotation processor has been rewritten to have a cleaner architecture,
especially for everything that concerns the generation of the configuration properties documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This new architecture generates a model of the configuration and we can then output this model in various formats (the Asciidoc output you know but also files for IDEs to consume&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You might have to adjust your extension build file - but the changes are very minor and are documented in the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.14#for-extension-developers&quot;&gt;migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you encounter any issue with this new extension annotation processor, please open an issue in &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/new?assignees=&amp;amp;labels=kind%2Fbug&amp;amp;projects=&amp;amp;template=bug_report.yml&quot;&gt;our tracker&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;building-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#building-quarkus&quot;&gt;&lt;/a&gt;Building Quarkus&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Building Quarkus itself (not your Quarkus apps) now requires Maven 3.9.6.
Maven 3.9.9 is highly recommended as it contains some memory usage improvements targeting our specific use case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mvnd 1.0.2 is also supported.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As for your Quarkus apps, you can still build them with Maven 3.8.6+.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;withtestresourcequarkustestresource&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#withtestresourcequarkustestresource&quot;&gt;&lt;/a&gt;WithTestResource/QuarkusTestResource&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Quarkus 3.13, we introduced &lt;code&gt;WithTestResource&lt;/code&gt; to replace &lt;code&gt;QuarkusTestResource&lt;/code&gt;,
which we deprecated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The only difference between the two was that the test resources registered with &lt;code&gt;WithTestResource&lt;/code&gt; were restricted to the annotated class by default (whereas you had to set it explicitly for &lt;code&gt;@QuarkusTestResource&lt;/code&gt;).
This new default behavior actually caused &lt;a href=&quot;https://groups.google.com/g/quarkus-dev/c/rS8-WN6b7XQ&quot;&gt;several important issues&lt;/a&gt; and we decided we needed some time to make it work better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While it is only the default value that is causing issues (you will get the same problem if you isolate all your test resources with &lt;code&gt;QuarkusTestResource&lt;/code&gt;), a default value is important because it conveys the message that it is what we recommend.
And in this case, having all your test resources isolated by default would make your tests unnecessarily slow and could consume a lot of memory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 3.14, &lt;code&gt;WithTestResource&lt;/code&gt; is still around but we undeprecated &lt;code&gt;QuarkusTestResource&lt;/code&gt; and we recommend to use &lt;code&gt;QuarkusTestResource&lt;/code&gt; for now.
If you already migrated to &lt;code&gt;WithTestResource&lt;/code&gt;, you don&amp;#8217;t have to revert this change, it will continue to work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A big thank you to the Quarkus users who reported this issue with amazing reproducers, it really helped a lot.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been updated to 3.14.
You can find everything you need to know about it in the &lt;a href=&quot;https://camel.apache.org/blog/2024/08/camel-quarkus-release-3.14.0/&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-cxf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-cxf&quot;&gt;&lt;/a&gt;Quarkus CXF&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus CXF 3.14 was released and is now available in &lt;a href=&quot;https://code.quarkus.io/?extension-search=origin:platform%20quarkus-cxf&quot;&gt;Quarkus Platform 3.14&lt;/a&gt;.
Check &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.14.0.html&quot;&gt;Quarkus CXF 3.14.0&lt;/a&gt; release notes for more information about what is new in this release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.14.0.CR1&quot;&gt;3.14.0.CR1&lt;/a&gt; and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.14.0&quot;&gt;3.14.0&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.14.1&quot;&gt;3.14.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;984 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.14 release, thanks to Ales Justin, Alex Martel, Alexey Loubyansky, Andy Damevin, Auri Munoz, bdeneuter, Bill Burke, Bruno Baptista, Chris Cranford, Christian Navolskyi, Clement Escoffier, Cristiano Nicolai, Danilo Piazzalunga, Diego Pedregal, Dmitry Kryukov, Eric Deandrea, Falko Modler, Felix König, fivecut, Foivos Zakkak, Fouad Almalki, franz1981, frne, Galder Zamarreño, George Gastaldi, Georgios Andrianakis, Guillaume Smet, Gunther C. Wenda, Holly Cummins, holomekc, Ioannis Canellos, Jakub Jedlicka, James Cobb, Jan Martiska, Jerome Prinet, Jimy Navarro Cordova, Jorge Solórzano, Katia Aresti, Konrad Durnoga, KS, Ladislav Thon, Laurent Broudoux, Lin Gao, Lorenzo De Francesco, Lu Jun, Luke Morfill, Marc Nuri, Marcelo Ataxexe Guimarães, Marco Bungart, Marek Skacelik, mariofusco, marko-bekhta, Martin Bartoš, Martin Kouba, Matej Novotny, Max Rydahl Andersen, Melloware, Michal Karm Babacek, Michal Vavřík, normalek, Ozan Gunalp, Peter Palaga, peubouzon, Phillip Kruger, Phillip Krüger, polarctos, Robert Stupp, Roberto Cortez, Rolfe Dlugy-Hegwer, Rostislav Svoboda, Sanne Grinovero, Sebastian Schuster, Sergey Beryozkin, Stuart Douglas, Thomas Canava, vsevel, Wel,  S.P.A. van der (Stef), xstefank, Yoann Rodière, and Zed Spencer-Milnes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 28 Aug 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-14-1-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.13.3 released - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-13-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.13.3, our third maintenance release for the 3.13 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.
It should be a safe upgrade for anyone already using 3.13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One important change is that we downgraded Apache Commons Lang from 3.16.0 to 3.14.0,
because of a change in behavior as to the default source of entropy.
It is causing some severe issues (including the application completely stalling),
in particular with &lt;a href=&quot;https://github.com/liquibase/liquibase/issues/6178&quot;&gt;Liquibase&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find more information about this issue &lt;a href=&quot;https://issues.apache.org/jira/browse/LANG-1748&quot;&gt;here&lt;/a&gt;.
We will wait for the Java ecosystem to adapt to this change before upgrading again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.13, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using 3.13, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.13&quot;&gt;3.13&lt;/a&gt; migration guide.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.13.3&quot;&gt;the full changelog of 3.13.3 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 20 Aug 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-13-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Leveraging Quarkus build-time metaprogramming capabilities to improve Jackson&apos;s serialization performance</title>
            <link>
                https://quarkus.io/blog/quarkus-metaprogramming/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the key architectural decisions taken by Quarkus designers has been moving as much work as possible from the startup time to the build time. This choice implies a clear separation between the deployment (aka. build-time) and runtime parts of each extension, and allows to perform the biggest part of the work once and for all during the build, thus allowing the typical Quarkus application to have a smaller footprint and faster load time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A consequence of this architecture is the possibility of extensively leveraging &lt;a href=&quot;https://en.wikipedia.org/wiki/Metaprogramming&quot;&gt;metaprogramming&lt;/a&gt;, identifying and analyzing the Java classes implementing the domain model of a given application and generating other code intended to opportunely and efficiently manipulate those classes. In particular the goal of the improvement discussed in this article is replacing the standard Jackson serialization mechanism, based on reflection, with code generated at build time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reflection is used (and abused) by many Java frameworks and libraries to support dynamic behavior. If more work is done at build time, this dynamism is no longer needed. Reducing reflection to a bare minimum gives performance improvements. It also makes the application more suitable for compilation to a native binary (the &lt;a href=&quot;https://docs.oracle.com/en/learn/understanding-reflection-graalvm-native-image/index.html#step-2-the-closed-world-assumption&quot;&gt;GraalVM closed world assumption&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A similar idea has been already implemented also in the area of object to JSON serialization by &lt;a href=&quot;https://github.com/quarkusio/qson&quot;&gt;Qson&lt;/a&gt;, a Quarkus extension that generates through Gizmo the bytecode of deserializer (parser) and serializer (writer) classes. However, this is a full replacement of Jackson and comes with some, quite significant, &lt;a href=&quot;https://github.com/quarkusio/qson?tab=readme-ov-file#limitations&quot;&gt;limitations&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you decide to remain on the most common choice and keep using Jackson for the JSON serialization of objects returned by the invocation of a REST endpoint, you will still pay the price of the heavily reflection-based implementation offered out of the box by that library. In this article I will illustrate how I filled this gap and, most importantly, what I learned on how to write a Quarkus extension, or in my case improve an existing one, and in particular on how to use tools like Jandex and Gizmo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;out-of-the-box-jacksons-reflection-based-serialization&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#out-of-the-box-jacksons-reflection-based-serialization&quot;&gt;&lt;/a&gt;Out-of-the-box Jackson’s reflection-based serialization&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before trying to remove the use of reflection from Jackson&amp;#8217;s serialization, let’s look at the current situation. To do so I added a &lt;a href=&quot;https://github.com/franz1981/quarkus-profiling-workshop/blob/b0f1f61e2ed5f8b196d62bd74ad15d658e949d8c/src/main/java/profiling/workshop/json/CustomerLookupResource.java#L18&quot;&gt;new REST endpoint&lt;/a&gt; to the &lt;a href=&quot;https://github.com/franz1981/quarkus-profiling-workshop&quot;&gt;benchmark suite&lt;/a&gt; written by &lt;a href=&quot;https://x.com/forked_franz&quot;&gt;Francesco Nigro&lt;/a&gt; and myself that we also used for our &lt;a href=&quot;https://www.youtube.com/watch?v=Cw4nN5L-2vU&quot;&gt;Devoxx Belgium workshop on profiling&lt;/a&gt;. The goal of this benchmark is stressing the JSON serialization, so this endpoint doesn’t do anything else other than returning and then serializing in JSON a fixed object, in essence, writing and returning a JSON like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-json hljs&quot; data-lang=&quot;json&quot;&gt;{
  &quot;address&quot;: {
    &quot;street&quot;: &quot;viale Michelangelo&quot;,
    &quot;town&quot;: &quot;Mondragone&quot;
  },
  &quot;children&quot;: [
    {
      &quot;age&quot;: 12,
      &quot;firstName&quot;: &quot;Sofia&quot;,
      &quot;lastName&quot;: &quot;Fusco&quot;
    },
    {
      &quot;age&quot;: 9,
      &quot;firstName&quot;: &quot;Marilena&quot;,
      &quot;lastName&quot;: &quot;Fusco&quot;
    }
  ],
  &quot;creditCards&quot;: [
    {
      &quot;limit&quot;: 100,
      &quot;name&quot;: &quot;Visa&quot;
    },
    {
      &quot;limit&quot;: 150,
      &quot;name&quot;: &quot;Amex&quot;
    }
  ],
  &quot;age&quot;: 50,
  &quot;firstName&quot;: &quot;Mario&quot;,
  &quot;lastName&quot;: &quot;Fusco&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Running the benchmark suite against that endpoint I got the following result.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-console hljs&quot; data-lang=&quot;console&quot;&gt;Profiling for 20 seconds
Done
  Thread Stats   Avg  	Stdev 	Max   +/- Stdev
    Latency   115.82μs   77.29μs  14.88ms   93.27%
    Req/Sec   79104.05  14774.96  101709.00 	87.80
  3243266 requests in 40.001s,   1.30GB read
Requests/sec: 81079.62
Transfer/sec:  33.33MB&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or in other words my laptop can process just a bit more than 81K requests per second when serving that endpoint. We will see how getting rid of reflection will bring a 12% improvement of this figure, allowing it to process more than 92K requests per second, and in particular producing the following result.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-console hljs&quot; data-lang=&quot;console&quot;&gt;Profiling for 20 seconds
Done
  Thread Stats   Avg  	Stdev 	Max   +/- Stdev
    Latency   102.25μs   70.14μs  19.66ms   92.95%
    Req/Sec   90045.27  15073.98  103537.00 	97.56
  3691856 requests in 40.001s,   1.48GB read
Requests/sec: 92294.09
Transfer/sec:  37.94MB&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Being intended to be used for profiling, our benchmark suite also automatically produces a flamegraph of the benchmark under investigation. Zooming the resulting flamegraph on the &lt;a href=&quot;https://github.com/quarkusio/quarkus/blob/5f2d29b4500e88ebd6a3c7a8731f6165fb6b64e0/extensions/resteasy-reactive/rest-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/FullyFeaturedServerJacksonMessageBodyWriter.java#L52&quot;&gt;method of the rest-jackson extension&lt;/a&gt; triggering the JSON serialization we find the following situation where we can see that the &lt;code&gt;ObjectWriter::writeValue&lt;/code&gt; Jackson’s method actually converting the object to its JSON representation has been found on the stack of 252 samples during the benchmark execution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/metaprogramming/f1.png&quot; alt=&quot;f1&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Flamegraph of out of the box Jackson’s serialization&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further zooming the flamegraph on the Jackson’s &lt;code&gt;BeanPropertyWriter::serializeAsField&lt;/code&gt; method and searching for the word “reflect” it is possible to see in how many different places, evidenced in purple in this flamegraph, Jackson needs to use Java reflection in order to read the state of the object to be serialized and write it into a JSON string.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/metaprogramming/f2.png&quot; alt=&quot;f2&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Use of reflection in out of the box Jackson’s serialization&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As expected this use case requires a quite heavy use of reflection which is the thing that we want to avoid. We have already found that the JSON serialization is performed by the rest-jackson extension, so let’s see how we can modify it to achieve this goal.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;overriding-jackson-serialization&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#overriding-jackson-serialization&quot;&gt;&lt;/a&gt;Overriding Jackson serialization&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jackson makes it possible to override its standard reflection-based serialization behavior in a pretty simple way. It is sufficient to implement a class extending its &lt;code&gt;StdSerializer&lt;/code&gt; thus defining how an instance of a given pojo should be rendered in JSON, something like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public class PersonSerializer extends StdSerializer {
    public PersonSerializer() {
        super(Person.class);
    }

    public void serialize(Object obj, JsonGenerator jsonGen, SerializerProvider serProv) throws IOException {
        Person person = (Person)obj;
        jsonGen.writeStartObject();
        jsonGen.writeNumberField(&quot;age&quot;, person.getAge());
        jsonGen.writeStringField(&quot;name&quot;, person.getName());
        jsonGen.writeEndObject();
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and then to add this serializer to a module and register it on the ObjectMapper used by Jackson to perform the JSON serialization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;SimpleModule module = new SimpleModule();
module.addSerializer(Person.class, new PersonSerializer());
ObjectMapper mapper = new ObjectMapper();
mapper.registerModule(module);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this setup everytime Jackson will have to convert an instance of the &lt;code&gt;Person&lt;/code&gt; class into its JSON representation it will do this through this custom serializer instead of accessing the person’s fields via reflection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The strategy to implement reflection-free JSON serialization is then quite straightforward, but of course it would be great if the Quarkus extension could generate and register those serializers automatically and effortlessly. The first step to achieve this is discovering at deployment time for which classes we need to generate those serializers. In our case they are the classes returned by all the REST endpoints in our application, but of course the same approach could be extended to a wider scope.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;discovering-and-indexing-the-classes-to-be-serialized-with-jandex&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#discovering-and-indexing-the-classes-to-be-serialized-with-jandex&quot;&gt;&lt;/a&gt;Discovering and indexing the classes to be serialized with Jandex&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In general &lt;a href=&quot;https://quarkus.io/guides/cdi-reference#bean_discovery&quot;&gt;bean discovery&lt;/a&gt; is performed by Quarkus, which indexes all the beans that are part of the CDI process through &lt;a href=&quot;https://smallrye.io/jandex/&quot;&gt;Jandex&lt;/a&gt;. Since it finds all the bean classes having a &lt;a href=&quot;https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html#bean_defining_annotations&quot;&gt;bean defining annotation&lt;/a&gt;, this already includes all services exposing one or more REST endpoints that must have such an annotation. This means that all endpoints are already discovered by default. Even better, the &lt;a href=&quot;https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html#bean_defining_annotations&quot;&gt;quarkus-rest&lt;/a&gt; extension already collects &lt;a href=&quot;https://github.com/quarkusio/quarkus/blob/4ee036a19d64f537bea7836a25d5362091b0e8fc/extensions/resteasy-reactive/rest/deployment/src/main/java/io/quarkus/resteasy/reactive/server/deployment/ResteasyReactiveResourceMethodEntriesBuildItem.java#L30&quot;&gt;an Entry for each rest method&lt;/a&gt; in the &lt;code&gt;ResteasyReactiveResourceMethodEntriesBuildItem&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here each of these entries contains an instance of the Jandex &lt;code&gt;MethodInfo&lt;/code&gt; that carries all the necessary offline reflection information about the signature of a Java method implementing a specific REST endpoint. As anticipated we are interested in the types returned by those methods, because those are the classes of the objects that will require to be converted in JSON as response to the REST endpoints invocation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we have all the building blocks to start developing a &lt;a href=&quot;https://quarkus.io/guides/writing-extensions#build-step-processors&quot;&gt;&lt;code&gt;BuildStep&lt;/code&gt;&lt;/a&gt; that collects, without duplications, all those return types, represented as Jandex &lt;code&gt;ClassInfo&lt;/code&gt; s, and pass them to another service that will have the responsibility of generating the bytecode of a Jackson serializer for each of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@BuildStep
public void handleEndpointParams(ResteasyReactiveResourceMethodEntriesBuildItem resourceMethodEntries, JaxRsResourceIndexBuildItem jaxRsIndex) {

    	IndexView indexView = jaxRsIndex.getIndexView();

    	Map&amp;lt;String, ClassInfo&amp;gt; jsonClasses = new HashMap&amp;lt;&amp;gt;();
    	for (ResteasyReactiveResourceMethodEntriesBuildItem.Entry entry : resourceMethodEntries.getEntries()) {
        	MethodInfo methodInfo = entry.getMethodInfo();
        	ClassInfo returnClassInfo = indexView.getClassByName(methodInfo.returnType().name());
        	if (returnClassInfo != null) {
            	jsonClasses.put(returnClassInfo.name().toString(), returnClassInfo);
        	}
    	}

    	if (!jsonClasses.isEmpty()) {
        	// TODO: generate serializers for each returned type
    	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;where the &lt;code&gt;JaxRsResourceIndexBuildItem&lt;/code&gt; provides the Jandex &lt;code&gt;IndexView&lt;/code&gt; that allows access to all reflection information collected and indexed by Jandex. Since we already know that the JSON serialization will be triggered by the rest-jackson extension it is convenient to simply add this new &lt;code&gt;BuildStep&lt;/code&gt; to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/blob/main/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java&quot;&gt;BuildStepsProcessor already present in that extension&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;generating-the-jackson-serializers-with-gizmo&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#generating-the-jackson-serializers-with-gizmo&quot;&gt;&lt;/a&gt;Generating the Jackson serializers with Gizmo&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point we know the classes for which it will be necessary to automatically generate the bytecode implementing a Jackson serializer, something similar to the one sketched when discussing how to customize Jackson serialization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus makes heavy use of &lt;a href=&quot;https://github.com/quarkusio/gizmo/blob/main/USAGE.adoc&quot;&gt;Gizmo&lt;/a&gt; in all the many cases when it needs to perform some bytecode generation. Generating bytecode is a relatively low level task, so using a library like Gizmo, with a convenient higher level API that abstracts lots of the underlying complexity, is practically mandatory to perform this difficult task with a reasonable level of productivity and to keep the code readable and maintainable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We don’t make an exception this time, so for each of the Jandex &lt;code&gt;ClassInfo&lt;/code&gt; collected during the former step, Gizmo is used to generate the bytecode of a class extending the Jackson’s &lt;code&gt;StdSerializer&lt;/code&gt; and having a name equal to the one of the bean to be serialized plus the &lt;code&gt;$quarkusjacksonserializer&lt;/code&gt; suffix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public void generate(ClassInfo classInfo) {
    String pojoClassName = classInfo.name().toString();
    String generatedClassName = pojoClassName + &quot;$quarkusjacksonserializer&quot;;

	try (ClassCreator classCreator = new ClassCreator(
        	new GeneratedClassGizmoAdaptor(generatedClassBuildItemBuildProducer, true), generatedClassName, null,
        	StdSerializer.class.getName())) {

		// TODO: generate the serialize method for the given pojo
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Without going into too many details the core logic of this serializer is contained in the &lt;code&gt;serialize&lt;/code&gt; method that can be generated as follows&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;String JSON_GEN_CLASS_NAME = JsonGenerator.class.getName();
// public void serialize(Object var1, JsonGenerator var2, SerializerProvider var3) throws IOException { ...
MethodCreator serialize = classCreator.getMethodCreator(&quot;serialize&quot;, &quot;void&quot;, &quot;java.lang.Object&quot;, JSON_GEN_CLASS_NAME, &quot;com.fasterxml.jackson.databind.SerializerProvider&quot;);
serialize.setModifiers(ACC_PUBLIC);
serialize.addException(IOException.class);

// jsonGenerator.writeStartObject();
MethodDescriptor writeStartObject = MethodDescriptor.ofMethod(JSON_GEN_CLASS_NAME, &quot;writeStartObject&quot;, &quot;void&quot;);
serialize.invokeVirtualMethod(writeStartObject, jsonGenerator);

// TODO: generate fields serialization

// jsonGenerator.writeEndObject();
MethodDescriptor writeEndObject = MethodDescriptor.ofMethod(JSON_GEN_CLASS_NAME, &quot;writeEndObject&quot;, &quot;void&quot;);
serialize.invokeVirtualMethod(writeEndObject, jsonGenerator);
serialize.returnVoid();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Querying the &lt;code&gt;ClassInfo&lt;/code&gt; it is possible to iterate all the fields to be serialized, together with their accessor methods, in order to generate the code serializing in JSON each of those fields. For instance if valueHandle is the handle to the object to be serialized, which is the first argument of the signature of the &lt;code&gt;serialize&lt;/code&gt; method, and &lt;code&gt;getterMethod&lt;/code&gt; is the &lt;code&gt;MethodInfo&lt;/code&gt; of a getter returning a numeric field, the corresponding code generating the serialization of that field can be something like&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;// int number = value.getNumber()
ResultHandle fieldValueHandle = serialize.invokeVirtualMethod(MethodDescriptor.of(getterMethod), valueHandle);

// jsonGen.writeNumberField(&quot;number&quot;, number);
MethodDescriptor writerMethod = MethodDescriptor.ofMethod(JSON_GEN_CLASS_NAME, &quot;writeNumberField&quot;, &quot;void&quot;, &quot;java.lang.String&quot;, &quot;java.lang.Integer&quot;);
serialize.invokeVirtualMethod(writerMethod, jsonGenerator, serialize.load(fieldName), fieldValueHandle);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that, doing so, the logic to decide whether a field should be serialized or not, and how, totally bypasses the one implemented in Jackson and could sometimes differ from it. In particular this behavior can be explicitly modified by users through some specific Jackson annotations. To play safe when the serializers generator &lt;a href=&quot;https://github.com/quarkusio/quarkus/blob/b3e608507e3bdcbcebe15a3d45de1b6cc6945d10/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java#L312&quot;&gt;meets any of those annotations&lt;/a&gt;, it simply gives up generating a serializer for the specific class containing it. In this circumstance the serialization of that class will be performed with the normal reflection-based mechanism employed by Jackson.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Actually I see this as a defect and I tried to figure out if I could reuse Jackson&amp;#8217;s logic in some way also for this serializers generation. As discussed &lt;a href=&quot;https://github.com/FasterXML/jackson-modules-base/issues/247&quot;&gt;here&lt;/a&gt;, the main problem is that a library like Jackson, but also the vast majority of the Java frameworks, doesn’t have a clear separation between deployment and runtime as it happens with Quarkus. This however also demonstrates the clear advantage of this separation as implemented in Quarkus, that allows to develop features and optimizations that are otherwise simply impossible for other tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, we also need to take into account the fact that during the iteration of the fields of a class, the serializers generator also will very likely encounter other types belonging to the application’s business domain. In our original example the &lt;code&gt;Customer&lt;/code&gt; has an &lt;code&gt;Address&lt;/code&gt;, a &lt;code&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt; who are her children and a &lt;code&gt;CreditCard[]&lt;/code&gt;. When this happens these new types are added to a queue of &lt;code&gt;ClassInfo&lt;/code&gt; s for which another serializer has to be generated. The whole bytecode generation process terminates only when this queue is empty.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the end of this process all the newly created classes are passed back to the &lt;code&gt;BuildStep&lt;/code&gt; that will record them in the &lt;code&gt;ResteasyReactiveServerJacksonRecorder&lt;/code&gt; thus making them available also at runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@BuildStep
@Record(ExecutionTime.STATIC_INIT)
public void handleEndpointParams(CombinedIndexBuildItem index,
ResteasyReactiveServerJacksonRecorder recorder,
BuildProducer&amp;lt;GeneratedClassBuildItem&amp;gt; generatedClassBuildItemBuildProducer) {

	Map&amp;lt;String, ClassInfo&amp;gt; jsonClasses = new HashMap&amp;lt;&amp;gt;();

	// ... classes to be serialized discovery [omitted]

	if (!jsonClasses.isEmpty()) {
    	JacksonSerializerFactory factory = new JacksonSerializerFactory(
            	generatedClassBuildItemBuildProducer, index.getComputingIndex());
    	factory.create(jsonClasses.values())
            	.forEach(recorder::recordGeneratedSerializer);
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this reason it is necessary to add the &lt;code&gt;@Record&lt;/code&gt; annotation to the &lt;code&gt;BuildStep&lt;/code&gt; in order to indicate that it also outputs &lt;a href=&quot;https://quarkus.io/guides/writing-extensions#bytecode-recording&quot;&gt;recorded bytecode&lt;/a&gt;. This concludes the description of all the steps necessary to the implementation of this new feature, that can be visually summarized as it follows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/metaprogramming/DeploymentVsRuntime.jpg&quot; alt=&quot;DeploymentVsRuntime&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Blocks diagram describing the implementation of the generated reflection-free Jackson serializers&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;making-it-optional&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#making-it-optional&quot;&gt;&lt;/a&gt;Making it optional&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since it was not possible to reuse any of the heuristics used by Jackson to decide if and how a specific field should be serialized, and as discussed there could still exist some edge cases when the generated serializers produce a result that differs from what Jackson would do using reflection, we decided for now to disable this feature by default and give the possibility to users to opt-in. Considering that all the code implementing this new feature is self-contained in a single &lt;code&gt;BuildStep&lt;/code&gt;, that is easily achievable using a &lt;a href=&quot;https://quarkus.io/guides/writing-extensions#conditional-step-inclusion&quot;&gt;conditional step inclusion&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this purpose it is sufficient to &lt;a href=&quot;https://quarkus.io/guides/config-mappings&quot;&gt;map a configuration to an interface&lt;/a&gt; using the &lt;code&gt;@ConfigMapping&lt;/code&gt; annotation&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@ConfigMapping(prefix = &quot;quarkus.rest.jackson.optimization&quot;)
@ConfigRoot(phase = ConfigPhase.BUILD_TIME)
public interface JacksonOptimizationConfig {
    @WithDefault(&quot;false&quot;)
    boolean enableReflectionFreeSerializers();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and also having an implementation of a &lt;code&gt;BooleanSupplier&lt;/code&gt; reading that configuration&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;class IsReflectionFreeSerializersEnabled implements BooleanSupplier {
JacksonOptimizationConfig config;

    	@Override public boolean getAsBoolean() {
        	return config.enableReflectionFreeSerializers();
    	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;so that the &lt;code&gt;BuildStep&lt;/code&gt; will be enabled only if this supplier returns true.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@BuildStep(onlyIf = IsReflectionFreeSerializersEnabled.class)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this way this optimization is turned off by default (note the &lt;code&gt;@WithDefault(&quot;false&quot;)&lt;/code&gt; annotation on the boolean method) and can be enabled by simply adding the flag&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.rest.jackson.optimization.enable-reflection-free-serializers=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;to the &lt;code&gt;application.properties&lt;/code&gt; configuration file. With this last change, the final code of the complete &lt;code&gt;BuildStep&lt;/code&gt; is available &lt;a href=&quot;https://github.com/quarkusio/quarkus/blob/39ec43201a690e7895b643e6c328d9042e73ccf0/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java#L374&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;putting-it-at-work-and-measuring-the-results&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#putting-it-at-work-and-measuring-the-results&quot;&gt;&lt;/a&gt;Putting it at work and measuring the results&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that all the development has been done, let’s try to put this at work with the same benchmark from where we started and check if this change comes with a real performance gain as we hoped. First of all it is necessary to enable this feature by setting the above mentioned flag in the Quarkus &lt;code&gt;application.properties&lt;/code&gt; file. Additionally it will be useful to also set a second flag enabling Quarkus to dump the decompiled bytecode generated at deployment time&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.rest.jackson.optimization.enable-reflection-free-serializers=true
quarkus.package.decompiler.enabled=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In fact thanks to this second flag, after having recompiled our application, it is possible to find the bytecode of the generated classes under the folder &lt;code&gt;target/decompiled/generated-bytecode&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/metaprogramming/generated.png&quot; alt=&quot;generated&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. The Jackson serializers generated at deployment time&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, other than the code already generated by Quarkus to perform the invocation of the REST endpoints without reflection, you can see all the classes, terminating in &lt;code&gt;$quarkusjacksonserializer&lt;/code&gt;, implementing the reflection-free JSON serialization of all the classes in our domain. For instance for the Customer class it generates a Jackson’s &lt;code&gt;StdSerializer&lt;/code&gt; implementation like the following.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public class Customer$quarkusjacksonserializer extends StdSerializer {
    public Customer$quarkusjacksonserializer() {
        super(Customer.class);
    }

   public void serialize(Object var1, JsonGenerator var2, SerializerProvider var3) throws IOException {
  	Customer var4 = (Customer)var1;
  	var2.writeStartObject();
  	Address var5 = var4.getAddress();
  	var2.writePOJOField(&quot;address&quot;, var5);
  	List var6 = var4.getChildren();
  	var2.writePOJOField(&quot;children&quot;, var6);
  	CreditCard[] var7 = var4.getCreditCards();
  	var2.writePOJOField(&quot;creditCards&quot;, var7);
  	double var9 = var4.getIncome();
  	String[] var8 = new String[]{&quot;admin&quot;};
  	if (JacksonMapperUtil.includeSecureField(var8)) {
     	    var2.writeNumberField(&quot;income&quot;, var9);
  	}

  	int var11 = var4.getAge();
  	var2.writeNumberField(&quot;age&quot;, var11);
  	String var12 = ((Person)var4).getFirstName();
  	var2.writeStringField(&quot;firstName&quot;, var12);
  	String var13 = ((Person)var4).getLastName();
  	var2.writeStringField(&quot;lastName&quot;, var13);
  	var2.writeEndObject();
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As already anticipated, running again the benchmark with this optimization in place I got the following result&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-console hljs&quot; data-lang=&quot;console&quot;&gt;Profiling for 20 seconds
Done
  Thread Stats   Avg  	Stdev 	Max   +/- Stdev
    Latency   102.25μs   70.14μs  19.66ms   92.95%
    Req/Sec   90045.27  15073.98  103537.00 	97.56
  3691856 requests in 40.001s,   1.48GB read
Requests/sec: 92294.09
Transfer/sec:  37.94MB&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time Quarkus can serve more than 92K requests per second, compared with the 81K we had before doing this work, quite an interesting improvement. Finally also the corresponding flamegraph helps to make sense of this improvement: there isn’t any trace of usage of Java reflection in it and now the &lt;code&gt;ObjectWriter::writeValue&lt;/code&gt; Jackson’s method is sampled only 193 times instead of the 252 observed before.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/metaprogramming/f3.png&quot; alt=&quot;f3&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. Flamegraph of serialization using the generated Jackson’s serializers demonstrating the absence of any usage of reflection&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In fact in this case all the objects serializations, the one of the &lt;code&gt;Customer&lt;/code&gt; instance returned by the rest endpoint plus all other objects referenced by it, are now performed by the serializers generated during the deployment phase, the ones with the class names terminating in &lt;code&gt;$quarkusjacksonserializer&lt;/code&gt; and evidenced in purple in this last flamegraph.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/metaprogramming/f4.png&quot; alt=&quot;f4&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. Flamegraph of serialization demonstrating how all the necessary generated serializers are invoked&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-metaprogramming/
            </guid>
            
            
            
            <author>Mario Fusco (https://twitter.com/mariofusco)</author>
            
        </item>
        
        <item>
            <title>Revolutionising Telecom Microservice - Modernising JDiameter with Quarkus</title>
            <link>
                https://quarkus.io/blog/quarkus-jdiameter-intro/
            </link>
            <description>
                &lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-jdiameter-intro/quarkus-jdiameter-intro.png&quot; alt=&quot;]&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Diameter protocol serves as a cornerstone in any modern telecommunication backend, providing authentication, authorisation, and accounting (AAA) services in 3G, IMS, 4G, and 5G networks. Several vendors offer commercially licensed Diameter stacks, most of which are written in C++. As a result, many in the Java world have turned to the open-source RestComm JDiameter stack.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Developed in the early 2010s, JDiameter has not received any updates in the last seven years. A major challenge with JDiameter is its reliance on outdated dependencies—some with known Common Vulnerabilities and Exposures (CVEs)—and others that are deprecated or no longer supported. Additionally, JDiameter was written in Java 1.7, which restricts the use of modern advancements in the Java language, such as virtual threading.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the shift towards microservices in telecommunications, many organisations now develop solutions that are deployed and managed using platforms like Kubernetes and OpenShift. In the Java ecosystem, developers have several microservices frameworks to choose from, with the major ones being Spring Boot, Micronaut, and my preferred choice, Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the past seven years, I have primarily developed solutions for charging and billing subscribers in prepaid mobile networks, including writing both a Diameter Routing Agent (DRA) and an Online Charging System (OCS). In both instances, I used Quarkus as the microservices framework and JDiameter as the Diameter stack—with much frustration, I must add.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The solutions we developed were functional, but they felt more like a Quarkus application with a JDiameter sidecar. The Diameter stack operated independently, without leveraging the benefits offered by the Quarkus framework.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;quarkus-jdiameter-extension&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-jdiameter-extension&quot;&gt;&lt;/a&gt;Quarkus JDiameter Extension&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eventually, my frustration with the sidecar approach of integrating JDiameter with Quarkus led me to develop a solution that would allow the two to work more harmoniously. This initiative resulted in the creation of the Quarkus JDiameter extension.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As mentioned earlier, the RestComm JDiameter stack had been neglected and was in dire need of some attention. My first step was to modernise the JDiameter stack by removing deprecated dependencies and updating the outdated ones to their latest versions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Two key changes were made to the stack. The first was removing Pico containers—an outdated dependency injection framework from the pre-Java EE era—and the second was replacing the concurrency logic from the old Thread Group model with the more modern Thread Pool model. With the introduction of thread pooling, the Diameter stack can now utilise virtual threading!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next challenge was to develop a Quarkus extension to integrate the Diameter stack into the Quarkus framework. I had three main objectives with this extension:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Simplified Configuration&lt;/strong&gt;: Moving the configuration to the &quot;application.properties“ file to make the stack easier to configure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dependency Injection&lt;/strong&gt;: Enabling dependency injection of Diameter stacks and configuration into a scoped service.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Interceptor Service Framework&lt;/strong&gt;: Creating an interceptor service framework for a more straightforward implementation of Diameter applications.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus JDiameter stack has been released and is now part of Quarkiverse Hub. You can find it at &lt;a href=&quot;https://github.com/quarkiverse/quarkus-jdiameter&quot;&gt;Quarkiverse Hub&lt;/a&gt;. Documentation for the stack is available at &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-jdiameter/dev/index.html&quot;&gt;Quarkus JDiameter Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is still considerable potential for tighter integration of the JDiameter stack into the Quarkus framework. A future project could involve exposing the statistics collected in the stack via the Quarkus MicroProfile Metrics interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’ve been frustrated with integrating JDiameter in a microservice environment, as I was, give the Quarkus JDiameter extension a try!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-jdiameter-intro/
            </guid>
            
            
            
            <author>Eddie Carpenter (https://twitter.com/)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #47 - August</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-47/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus recently announced its intention to join the Commhaus Foundation to further solidify its commitment to open-source development and enterprise adoption. Learn more by reading blog posts from Jeff Beck and Max Rydahl Andersen. Explore Hibernate Reactive and Quarkus in-depth by building a reactive bank deposit application from scratch with this great tutorial &quot;Hibernate Reactive and Quarkus&quot; by Reza Ganji &amp;amp; Liam Williams. The article, &quot;Testing a Quarkus Application Using Testcontainers for Service Dependencies&quot; by Paul Pearson &amp;amp; Liam Williams will allow you to see the power of using Testcontainers to help test a Quarkus application using ‘live’ service-to-service testing. Read &quot;A Guide to Micrometer in Quarkus&quot; by Yatin Batra to explore and gain a comprehensive understanding of Micrometers in Quarkus. Discover some tips and pointers about deploying Quarkus on AWS in this &quot;Deploying native Quarkus REST API&amp;#8217;s in AWS Lambda&quot; by Patryk Szczypień.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/47/&quot;&gt;Newsletter #47: August&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 12 Aug 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-47/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.13.2 released - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-13-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.13.2, our second maintenance release for the 3.13 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.
It should be a safe upgrade for anyone already using 3.13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.13, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using 3.13, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.13&quot;&gt;3.13&lt;/a&gt; migration guide.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.13.2&quot;&gt;the full changelog of 3.13.2 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 12 Aug 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-13-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.13.1 released - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-13-1-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.13.1, our first maintenance release for the 3.13 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.
It should be a safe upgrade for anyone already using 3.13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.13, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using 3.13, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.13&quot;&gt;3.13&lt;/a&gt; migration guide.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.13.1&quot;&gt;the full changelog of 3.13.1 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 07 Aug 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-13-1-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Project Leyden</title>
            <link>
                https://quarkus.io/blog/quarkus-and-leyden/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You might have heard of &lt;a href=&quot;https://openjdk.org/projects/leyden/&quot;&gt;Project Leyden&lt;/a&gt;, an initiative within the OpenJDK project with ambitious goals.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As Quarkus users, you&amp;#8217;ll be wondering how this project will benefit you and how it&amp;#8217;s different from GraalVM native images. While we think it&amp;#8217;s fair to say that Leyden was inspired or at least motivated by some ideas first implemented in GraalVM&amp;#8217;s native images, Leyden is remarkably different. It&amp;#8217;s essential to understand how it works: as we will see, Leyden is not a replacement for GraalVM native images but rather a substantial evolution of the JVM, and we expect it to bring some benefits to native images as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To try to clarify this, unfortunately, this post is unusually long: we wish it could have been a short guide, &quot;This is how you enable Leyden,&quot; but this isn&amp;#8217;t quite the time yet, as we need to understand the different models first. Sometimes, the terminology is also different; for example, &quot;Ahead of Time (AOT)&quot; has a very specific meaning in the context of GraalVM native images and has traditionally been associated with &quot;compilation&quot;, but in the context of Leyden is used more broadly to indicate a variety of aspects of JVM operation; hopefully, after reading this, it will be less confusing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another significant misconception about Leyden is that it&amp;#8217;s a project to &quot;improve startup times&quot;; this statement is not wrong, as improving startup times is one of its goals. Yet the other stated goals of the project offer even more significant potential for our favourite platform, Quarkus, and its users.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, let&amp;#8217;s dive in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-is-leyden&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-is-leyden&quot;&gt;&lt;/a&gt;What is Leyden?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Project Leyden is an initiative from the OpenJDK team. It is an ongoing experiment that is currently being developed by the joint effort of teams from different companies contributing to the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The primary goal of this Project is to improve the startup time, time to peak performance, and footprint of Java programs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8201;&amp;#8212;&amp;#8201;Project Leyden, first thing on its project page&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Leyden is a general umbrella project to address slow startup and large footprint. It is useful to keep JDK bootstrap times and footprint low. This helps reduce energy consumption, hardware resource use, and, ultimately, monetary costs.
However, it&amp;#8217;s equally as essential to reduce the time to application peak performance, time usually spent loading application classes and executing application code, including JIT compiling methods on hot code paths. Reducing application footprint can have a tremendous impact and this can be achieved by trimming not just application data but also application classes and code. Leyden is addressing ways that the JVM can help developers achieve those goals; in many ways, this is complementary to the techniques offered by Quarkus at the framework level, so we expect some powerful results from them combined.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the project is evolving rapidly: some of the things explained in this article are evolving while this is written. If you plan on getting involved at a more technical level, follow the development in Jira and the &lt;a href=&quot;https://mail.openjdk.org/mailman/listinfo/leyden-dev&quot;&gt;Leyden mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-its-interesting-to-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-its-interesting-to-quarkus&quot;&gt;&lt;/a&gt;Why it’s interesting to Quarkus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From a Quarkus perspective, we&amp;#8217;ve done a fair job on all such metrics but we&amp;#8217;re constantly on the lookout to improve.
That&amp;#8217;s why Project Leyden got our attention. We&amp;#8217;re already working with our colleagues from the OpenJDK team at Red Hat, who are directly involved in implementing Leyden with the wider OpenJDK group: this blog post today is a collaboration among engineers from different teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although Quarkus is already doing a lot of work during the Ahead of Time phase to speed up warmup and response time, the enhancements that Leyden brings to the table are more related to how the JVM behaves. Complementing both approaches, the advantages we can expect from the combination of Quarkus and Leyden are beyond anything you can find with either of them in isolation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since the potential for such technological collaboration is strong, the Quarkus and OpenJDK teams are working together on various prototypes and anyone in the community is welcome to join as well.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;refresher-on-jvms-bootstrap-process&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#refresher-on-jvms-bootstrap-process&quot;&gt;&lt;/a&gt;Refresher on JVM&amp;#8217;s bootstrap process&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To better understand the scope of the potential improvements, we need to take a step back and discuss how the JVM works today, especially how our application is started and iteratively evolves from interpreting our bytecode to its highest performance mode: running native code which is highly optimized, adapted to the particular hardware, the configuration of the day, and the specific workloads it&amp;#8217;s been asked to perform.
No other runtime is able to match the JVM on this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we all know, a Java runtime does not directly run Java source code. The content of our JAR file is not executable machine code, but Java bytecode generated from Java source code, typically using the javac compiler but in some cases Quarkus will emit directly generated bytecode.
A key feature of bytecode is portability, encoding the structure of Java classes and operation of their methods in a machine and operating-system independent format. A Java runtime obeys the type information in the bytecode when laying out Java objects. Execution of a method normally involves interpreting the operations in the method bytecode, although a runtime may also choose to compile method bytecode to equivalent, native machine code and execute the latter directly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The unit of delivery for bytecode is a class file, which models a single class. The Java runtime itself provides a host of utility and runtime management classes, as class files embedded in either system jars or jmod files. Applications supplement this with their own class files, usually by appending jars to the classpath or module path.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bytecode is delivered class-at-a-time to allow the runtime to load classes &lt;em&gt;lazily&lt;/em&gt;: i.e. the runtime will only lookup, verify and consume a class file when that class&amp;#8217;s definition is required to proceed with execution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lazy loading is what allows Java to be a dynamic language&amp;#8201;&amp;#8212;&amp;#8201;i.e. one where the code that is included in the program can be decided at runtime. That might include loading classes from jars identified at runtime, possibly loaded via the network. Alternatively, it might include generating class bytecode at runtime, as is done with proxy classes or service provider auxiliary classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;just-in-time-jit-and-ahead-of-time-aot&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#just-in-time-jit-and-ahead-of-time-aot&quot;&gt;&lt;/a&gt;Just in Time (JIT) and Ahead of Time (AOT)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another name to describe Java&amp;#8217;s lazy loading is &apos;Just in Time&apos; (JIT). JIT is a well known term used to describe the operation of Java&amp;#8217;s runtime compilers. What is less well known is that it has a much wider use.
JIT is not limited to compilation: many other operations performed by the JVM are done lazily at runtime or &apos;Just In Time&apos;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An alternative to doing things &apos;Just in Time&apos; (JIT) is to do them &apos;Ahead Of Time&apos; (AOT).
For example, GraalVM&amp;#8217;s Native Image runtime loads and analyses the bytecode of every single class needed by an application, including JDK runtime classes, &apos;Ahead Of Time&apos; i.e. at image build time. It uses the type and method information encoded in that bytecode to &apos;Ahead Of Time&apos; compile a complete program that includes code for every method that might possibly be executed by the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The approach of GraalVM&amp;#8217;s native images lies at one extreme: everything is done AOT, while the traditional Java runtime model lies at the other extreme, as much as possible is done JIT.
However, it is actually possible to mix and match AOT and JIT models of execution in one runtime: re-balancing that AOT vs JIT mix is the goal of the first EA release of project Leyden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Interestingly, this time-shifting concept is also applied by Quarkus; we called it &quot;augmentation&quot; and essentially consists in booting popular frameworks during the build time of the application, to not incur such performance penalties at runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A native image build might also take advantage of Profile Guided Optimisations (PGO), which allows it to leverage some data about what&amp;#8217;s presumably happening at runtime back into the compilation process, guiding its optimisations.
It&amp;#8217;s essentially peeking into the future - another form of time-shifting.
However, it&amp;#8217;s only peeking into a simulation of runtime metrics, and ultimately, the compiler still needs to make all optimisation tradeoffs Ahead Of Time; this has pros and cons. The primary disadvantage is that any suboptimal decision is cast in stone; luckily there is a fallback mechanism to recover from outright bad decisions, but this mechanism cannot produce new optimal code. The advantage is more decisive for short-lived applications as the tradeoff of carrying all support for JIT optimisations in the runtime is less justifiable when there is barely an opportunity to take advantage of it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/leyden/AoT_vs_JiT_classic.svg&quot; alt=&quot;Default Java compilation and run&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. On a default Java compilation and run, we have two distinct phases: First we compile the source code into bytecode. And then we use that bytecode to run the application.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;class-data-sharing-cds-as-a-step-to-aot-caching&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#class-data-sharing-cds-as-a-step-to-aot-caching&quot;&gt;&lt;/a&gt;Class Data Sharing (CDS) as a step to AOT Caching&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Shifting work so it is done AOT is not a wholly new idea as far as the OpenJDK runtime is concerned. OpenJDK has supported a hybrid AOT/JIT class loading model for years with CDS. The observation that led to &lt;a href=&quot;https://docs.oracle.com/en/java/javase/21/vm/class-data-sharing.html&quot;&gt;Class Data Sharing (CDS)&lt;/a&gt; being proposed was that most applications load the same classes every time they run, both JDK classes during JDK bootstrap and application classes during application startup and warmup.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Loading requires locating a class bytecode file, possibly calling out to a Java ClassLoader, parsing the bytecode then building a JVM-internal model of the class. This internal model unpacks the information packed into the bytecode into a format that enables fast interpreted or compiled execution. If this loading and unpacking work could be done once and the resulting class model efficiently reused on subsequent runs, then that would save time during startup and warm up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Initially CDS optimized loading for a large set of core JDK classes. It worked by booting the JVM and dumping the class model for all classes loaded during startup into an archive file laid out in memory format. The resulting JDK module, class, field, and method graph can then be quickly remapped into memory next time the JVM runs. Loading a class that is present in the archive involves a simple lookup in the AOT class model. Loading a class not present in the archive requires the normal JIT steps of bytecode lookup, parsing and unpacking i.e. CDS implements a hybrid JIT/AOT execution model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/leyden/AoT_vs_JiT_static.svg&quot; alt=&quot;Static CDS benefits&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Static CDS archives are built during the JVM installation and includes classes from the core libraries. This archive can be used to move part of the class loading to AOT when running the application.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A default CDS archive for JDK runtime classes has been shipped with every JVM release since JDK17, halving JDK startup time. Improvements were made to CDS to allow application classes to be included in a CDS archive after executing a short application training run. The resulting mixed AOT/JIT operation can provide significant improvements to application startup and warmup times, depending on how well the training run exercises application code. So, selective JIT/AOT operation is not some new thing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/leyden/AoT_vs_JiT_dynamic.svg&quot; alt=&quot;Dynamic CDS benefits&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. When doing training runs, we create an archive that contains information on how the application runs. This archive includes not only classes from the core libraries, but also classes from our application.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus makes it really easy to generate CDS archives specific to your application code; this feature has been around since some years already: see the &lt;a href=&quot;https://quarkus.io/guides/appcds&quot;&gt;AppCDS guide in Quarkus&lt;/a&gt;.
As Leyden is coming, we aim to evolve this further and fully automate it for Leyden as well, so to get you even more benefits at no additional hassle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The goal of Project Leyden is extending the AOT vs JIT trade-off from class loading (as done by CDS) to other JIT operations in the JVM; there&amp;#8217;s a number of operations which could be &quot;moved in time&quot; to AOT, such as creation of heap objects to represent constants, gathering execution profile information, and many more.
Most importantly, it&amp;#8217;s moving AOT the lazy linking that normally happens during interpreted execution and the lazy compilation and recompilation that happens when methods have been executed enough times to justify the cost of compilation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;aot-vs-jit-linkage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#aot-vs-jit-linkage&quot;&gt;&lt;/a&gt;AOT vs JIT Linkage&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Linking of classes is another operation that the JVM does lazily. When class bytecode is processed the class is directly linked to its owning module and its owned methods and fields. JIT linkage connects elements of each independent, linked class sub-graph into a fully connected graph where elements from different (class or module) files cross-reference each other.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Loading and linking needs to proceed recursively. As one example, every class (except Object) needs to be linked to its super class. Super linkage cannot complete without ensuring the super class is loaded. Indeed, if the super&amp;#8217;s bytecode cannot be found or is not valid (say it identifies an interface not a class) then a linkage error may occur. Likewise, a new operation or a field get/put operation occurring in some method&amp;#8217;s bytecode can only be linked after loading the class (and field) named in the new bytecode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Linking is sometimes, but not always, done lazily. Indeed, it is necessary to do some linkage lazily in order to allow loading also to be lazy, otherwise the whole class graph would end up being linked and loaded as soon as the main routine was entered. Super linkage is always done eagerly at the point where the subclass has just been loaded. That is because it is not possible to use a subclass to create instances or execute methods without knowing how the superclass is defined. By contrast, field and method linkage is done lazily. In these cases linkage happens as a side-effect of execution. When a method executes a field get/put or method invoke bytecode for the first time the target field or method is looked up via its owner class, loading it if necessary. The field type or method signature is checked for consistency and details of where to find the field or how to call the method are cached, allowing the next execution of the bytecode to bypass the linkage step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As with lazy loading, this lazy approach results in almost the exact same linkage being established on every run. The time spent stopping and restarting execution to lazily connect the class graph comprises a noticeable percentage of JDK startup, application startup and application warm up (time to peak running). We could speed up startup and, more crucially, warm up time if we could pre-compute this linkage and avoid the need to establish it at runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;synergy-with-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#synergy-with-quarkus&quot;&gt;&lt;/a&gt;Synergy with Quarkus&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Loading and linking of classes is an important step in the warm up of the application because it involves searching through the whole classpath for all classes and objects referenced by the bytecode the JVM is going to run. By default, this is done as a lazy operation because loading and linking all existing classes in the classpath would not only require a bigger memory footprint, but also a bigger warm up time. This is why the JVM only compiles and links the bytecode that is going to be used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a process that Quarkus already speeds up by, among other strategies, aggressively reducing the set of classes included in the classpath, so the search for matches is faster. The search for classes is also accelerated by indexes which Quarkus can generate when it fully analyzes the application at build time. But it is still a heavy operation that is difficult to execute ahead of time, before we know what is going to be run and how. Quarkus might be able to provide some additional hints to the linker in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first improvement Leyden is offering to improve startup time is to upgrade the AOT model originally developed as part of the CDS project to encompass not just pre-loading of classes but also pre-linking, as described in &lt;a href=&quot;https://openjdk.org/jeps/8315737&quot;&gt;JEP Ahead-of-Time Class Linking&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An AOT Cache can be generated during a training run that bootstraps the JVM and, optionally, executes application-specific code.
As with a CDS archive, the AOT Cache stores a class graph for all classes loaded during the training run in a format that allows it to be quickly remapped on a subsequent run. The stored graph also includes any linkage information established by code executed during the training run. Pre-cached links avoid the need to stop and start execution to perform linkage on subsequent runs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/leyden/AoT_vs_JiT_leyden.svg&quot; alt=&quot;Leyden CDS benefits&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Leyden&amp;#8217;s AOT Cache contains a lot more pre-generated content that allows us to move part of the load, link, and compiling to AOT, allowing for faster startup and warm up of the application.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Remember that the training run enables some of the loading and linking to be done AOT but that anything not trained for will still be performed via the regular JIT process: the AOT approach is not required to be applied comprehensively, so that the JVM can fallback to the regular loading system for the use cases which can not benefit from AOT processing.
This ability to fallback to &quot;regular JIT processing&quot; is a luxury that GraalVM native images can&amp;#8217;t use.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jit-vs-aot-compilation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jit-vs-aot-compilation&quot;&gt;&lt;/a&gt;JIT vs AOT Compilation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another well-known lazy operation the JVM performs is JIT (runtime) compilation. Method bytecode is normally interpreted, but the JVM will lazily translate bytecode to equivalent machine code.
Since generating optimal machine code is an expensive operation, it performs this compilation task selectively, only bothering to compile methods that have been invoked quite a few times.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JIT compilation is also &apos;adaptive&apos; i.e. the JVM will lazily recompile some methods, using different &apos;tiers&apos; or levels of compilation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;A tier 1 compile generates code that is only lightly optimised, based on very limited execution profile data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A tier 2 compile also generates lightly optimized code but instruments it to profile control flow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tier 3 compilation adds further instrumentation that records many more details about what gets executed, including with what type of values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A tier 4 compile uses all gathered profile information and performs a great deal of optimization.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tier 1 - 3 compilations omit many possible optimizations in order to deliver compiled code quickly. A tier 4 compilation can take much longer to complete so it is only attempted for a small subset of very frequently executed methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes, the code is compiled with substantial optimisations based on &apos;speculative&apos; assumptions extrapolated from the profiling data.
In such cases, the compiler will make an optimistic assumption about a condition to be consistently true in the future yet include an efficient check to verify the assumption during execution so that the semantics of the program are not affected in case this educated guess eventually turns out to be false; when this is detected, the code is de-optimised, returning at a previous tier of compilation and the profiling data is adjusted, so that it will eventually be recompiled with better information.
Essentially, some parts of code might get recompiled multiple times and occasionally revert to a lower tier: it&amp;#8217;s an highly dynamic process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Peak optimization is reached when most of the running code is compiled at the highest tier, and background compilation activities become very rare or, ideally, none at all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Compiling code for peak performance also requires quite some resources, so performing this work ahead of time can also save precious CPU cycles during the application bootstrap, and can manifest in substantial memory savings as well: Java developers aren&amp;#8217;t used to measure the memory costs of the JIT compiler, but the fact that it&amp;#8217;s hidden doesn&amp;#8217;t imply it&amp;#8217;s non-existent; and while this might be a detail for large enterprise servers, it&amp;#8217;s quite important to be aware of such resource costs when developing microservices or simply aiming for smaller, more power efficient targets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But there are some limitations on what we can optimise before runtime just by examining the bytecode. For example, extensive use of reflection prevents the compiler from predicting which symbols will be loaded, linked, and most used at runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Leyden project has already sucessfully prototyped shifting the work of method compilation from JIT to AOT. Execution and compilation of methods is tracked during the training run. At the end of the run any associated profiling information and compiled code for the method are saved to the AOT Cache, allowing them to be quickly mapped back into memory and reused when the application is next run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As with AOT loading and linking, the training run enables some of the work of profiling and compiling to be done AOT but allows anything not trained still to be compiled via the regular JIT compilation process. Note that method code does not need to have been compiled at the highest tier in order to be saved. Also, when code compiled at a lower tier is restored it can still be recompiled at a higher level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Compiled code can also be deoptimized and re-optimized to adapt to different runtime conditions, just as with code compiled in the current runtime. So, the use of AOT compilation is fully integrated into OpenJDK&amp;#8217;s adaptive, dynamic compilation and recompilation model: even if some assumptions made during AOT compilation turn out to be suboptimal, the just-in-time compiler can intervene at runtime and improve the code with the new information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-to-play-with-it&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-to-play-with-it&quot;&gt;&lt;/a&gt;How to play with it&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first step would be to install one of the early Leyden builds that you can find at &lt;a href=&quot;https://jdk.java.net/leyden/&quot;&gt;jdk.java.net/leyden/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Make sure that you have installed it correctly by running the following command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-console hljs&quot; data-lang=&quot;console&quot;&gt;$ java --version
openjdk 24-leydenpremain 2025-03-18
OpenJDK Runtime Environment (build 24-leydenpremain+2-8)
OpenJDK 64-Bit Server VM (build 24-leydenpremain+2-8, mixed mode, sharing)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to the application you want to test Leyden with and start a first training run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-console hljs&quot; data-lang=&quot;console&quot;&gt;$ java -XX:CacheDataStore=quarkusapp.aot -jar $YOUR_JAR_FILE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will generate the archive files with all the profiling information needed to speed up the production run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have them, we can run our application using the Leyden enhancements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-console hljs&quot; data-lang=&quot;console&quot;&gt;$ java -XX:CacheDataStore=quarkusapp.aot -XX:+AOTClassLinking -jar $YOUR_JAR_FILE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;potentially-needed-workarounds&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#potentially-needed-workarounds&quot;&gt;&lt;/a&gt;Potentially needed workarounds&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since it’s early days for the Leyden project, there are some known issues. The following instructions shouldn’t be necessary for the final versions but you might need them today.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;force-the-use-of-g1gc&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#force-the-use-of-g1gc&quot;&gt;&lt;/a&gt;Force the use of G1GC&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To benefit from the natively compiled code in AOT archives, the garbage collector used at runtime needs to match the same garbage collector used when you recorded the AOT archives.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Remember that the JVM’s default choice of garbage collector is based on ergonomics; normally this is nice but it can cause some confusion in this case; for example if you build on a large server it will pick G1GC by default, but then when you run the application on a server with constrained memory it would, by default, pick SerialGC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To avoid this mismatch it’s best to pick a garbage collector explicitly; and since several AOT related optimisations today only apply to G1, let’s enforce the use of G1GC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Force using G1GC:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-console hljs&quot; data-lang=&quot;console&quot;&gt;-XX:+UseG1GC&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;N.B. you need to use this consistently on both the process generating the AOT archives and the runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;force-the-g1-region-sizes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#force-the-g1-region-sizes&quot;&gt;&lt;/a&gt;Force the G1 Region sizes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As identified and reported by the Quarkus team to our colleagues working on Project Leyden, beyond enforcing a specific garbage collector, one should also ensure that the code stored in AOT archives is being generated with the same G1 region sizes as what’s going to be used at runtime, or one risks segmentation faults caused by it wrongly identifying regions.
See &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8335440&quot; class=&quot;bare&quot;&gt;https://bugs.openjdk.org/browse/JDK-8335440&lt;/a&gt; for details, or simply set:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Configure G1HeapRegionSize explicitly:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-console hljs&quot; data-lang=&quot;console&quot;&gt;-XX:G1HeapRegionSize=1048576&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;N.B. you need to use this consistently on both the process generating the AOT archives and the runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;failure-to-terminate-in-containers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#failure-to-terminate-in-containers&quot;&gt;&lt;/a&gt;Failure to terminate in containers&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This issue has already been resolved, but in case you’re using an older version of project Leyden and it fails to exit on regular container termination, you might be affected by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8333794&quot;&gt;JDK-8333794&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Workaround for JDK-8333794:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-console hljs&quot; data-lang=&quot;console&quot;&gt;-Djdk.console=java.basebroken&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;current-status-of-project-leyden&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#current-status-of-project-leyden&quot;&gt;&lt;/a&gt;Current status of Project Leyden&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are already experimental &lt;a href=&quot;https://jdk.java.net/leyden/&quot;&gt;early-access builds of Leyden&lt;/a&gt; that can be tested based on &lt;a href=&quot;https://openjdk.org/jeps/8315737&quot;&gt;this draft JEP about Ahead-of-Time Class Linking&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the Leyden Project, the idea of leveraging a &quot;training run&quot; has been extended to a wider range of data structures embedded in the new AOT cache. Now the cache produced by the AOT process contains the following data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Class file events with historical data (Classes loaded and linked, Compilations)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resolution of API points and indy (stored in constant pool images in the AOT archive). If you have lambdas in your code, they are captured here.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pre-created constant objects in the Java heap (String and Class&amp;lt;?&amp;gt; constants)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execution profiles and some compiled native code (all tiers)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Leyden is also a hot topic at the &lt;a href=&quot;https://openjdk.org/projects/mlvm/jvmlangsummit/agenda.html&quot;&gt;JVM Language Summit&lt;/a&gt; this year; as soon as the recordings of the talks about Leyden are publicly available we&amp;#8217;ll add the links here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;some-known-limitations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#some-known-limitations&quot;&gt;&lt;/a&gt;Some known limitations&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is an experimental project being developed by multiple teams having different approaches and focuses. Limitations explained here are being worked on at the time of writing this blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the main issues is that functionality is currently only available for x86_64 and AArch64 architectures at the moment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, current developments rely on a flat classpath. If the application is using custom classloaders, then it may not benefit as much as it could as it may miss caching many classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same happens if the application is intensively using reflection. Quarkus avoids reflection whenever possible, preferring to resolve reflective calls at build time as well - so there’s a nice synergy at play.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However Quarkus in “fast-jar” mode, which is the default packaging mode, will use a custom classloader which currently would get in the way of some Leyden optimisations. One could use a different packaging mode in Quarkus to get more prominent benefits from Leyden, but doing so would disable other Quarkus optimisations, so the comparison wouldn’t be entirely fair today.
We hope to work on improvements in this area to have all possible benefits, combined.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The focus on these first early releases has been on bootstrap times. There are measurable, significant startup time improvements, due to AOT loading and linking. In some cases, these improvements on startup time have worsened the memory footprint of some applications. That’s an already known issue that is being worked on, and the expected outcome is to improve memory footprint as well, so we would suggest not worrying too much about total memory consumption at this stage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since the AOT archives include machine specific optimisations such as the native code generated by the C2 compiler, the training run and the production run must be done on the same type of hardware and JDK versions; it also requires using the same JAR-based classpaths and the same command line options.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although the training run can use a different Main class to the one used for running the application, for example a test class that simulates usage.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;what-is-on-the-roadmap-for-leyden&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-is-on-the-roadmap-for-leyden&quot;&gt;&lt;/a&gt;What is on the roadmap for Leyden?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There’s still work to be done regarding classes that can’t be loaded and linked in AOT with the current implementation. For example, classes loaded using a user-defined class loader. There’s also room to improve the way the training runs are made, maybe allowing the user to tweak the results to influence decisions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently, the &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8326035&quot;&gt;Z Garbage Collector&lt;/a&gt; does not support AOT object archiving. There is an active effort to make sure all Garbage Collectors are compatible with these enhancements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are also other things planned in the roadmap for Leyden, like adding condensers. &lt;a href=&quot;https://openjdk.org/projects/leyden/notes/03-toward-condensers&quot;&gt;Condensers&lt;/a&gt; will be composable transformers of the source code in AOT that modify the source code optimising it. Each developer will be able to define a pipeline of condensers that improves their source code before compiling it into bytecode; this is very interesting to the Quarkus team but condensers aren’t available yet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The OpenJDK team is actively extending the range of compiled code that can be saved to and restored from the AOT cache. Our colleagues from Red Hat’s OpenJDK team are directly involved in this effort, looking into save and restore of auxiliary code that is normally generated at runtime and used to provide optimized code for &apos;intrinsic&apos; methods or to link compiled Java method code to the compiled C code that implements the JVM, the interpreter and other compiled C libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;will-leyden-replace-graalvms-native-image-capabilities&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#will-leyden-replace-graalvms-native-image-capabilities&quot;&gt;&lt;/a&gt;Will Leyden replace GraalVM&amp;#8217;s native-image capabilities?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The short answer is no.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want the absolute smallest footprint and ensure that absolutely no &quot;dynamic&quot; adaptations happen at runtime, GraalVM native images are the way to go. Just think about it: to support the dynamic aspects that the JVM normally provides,
even in very minimal form, you would need some code which is able to perform this work, and some memory and some computational resources to run such code and adapt your runtime safely; this is a complex feature and will never be completely free, even in the case Leyden evolved significantly beyond the current plans.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The architecture of Quarkus enables developers to define an application in strict &quot;closed world&quot; style, and this approach works extremely well in combination with GraalVM native images, but the Quarkus design works indeed very well on the bigger, dynamic JVMs as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The ability that Quarkus offers to create a closed world application doesn&amp;#8217;t imply that you should necessarily be doing so; in fact there are many applications which could benefit from a bit more dynamism, some more runtime configurability or auto-adaptability, and Quarkus also allows to create such applications while still benefiting from very substantial efficiency improvements over competing architectures, and even over competing runtimes and languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re very excited by Project Leyden as it allows to substantially improve bootstrap times, warmup times, and overall costs even for the &quot;regular&quot; JVM, so retaining all the benefits of a dynamic runtime and an adaptative JIT compiler, and this will be a fantastic option for all those applications for which a fully AOT native image might not be suitable: you&amp;#8217;ll get some of the benefits from native-image (not all of them) but essentially for free, at no drawbacks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also hope it will bring better defined semantics in regards to running certain phases “ahead of time” (or later); there is a very interesting read on this topic by Mark Reinhold: &lt;a href=&quot;https://openjdk.org/projects/leyden/notes/02-shift-and-constrain&quot;&gt;Selectively Shifting and Constraining Computation&lt;/a&gt; ; from a perspective of Quarkus developers, we can confirm that improvements in the language specification in this area would be very welcome, and also improve the quality and maintainability of applications compiled with GraalVM native-image(s).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For these reasons, Quarkus will definitely not deprecate support for native images; it&amp;#8217;s more plausible that, eventually, the &quot;full JVM&quot; will always be benefiting from Leyden powered improvements, and as usual we&amp;#8217;ll work to make these benefits work in synergy with our architecture, and at minimal effort for you all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Essentially both the JVM and the native-image options are bound to benefit from this initiative. It&amp;#8217;s a great time to be a Java developer!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-can-i-make-sure-this-will-work-for-me&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-can-i-make-sure-this-will-work-for-me&quot;&gt;&lt;/a&gt;How can I make sure this will work for me?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The best way to make sure your application benefits from Leyden is to start experimenting early and participate in the development. It would be great to add real-world feedback from a perspective of Quarkus users.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you spend some time testing your application with the &lt;a href=&quot;https://jdk.java.net/leyden/&quot;&gt;early-access builds of Leyden&lt;/a&gt;, and &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8332177?jql=issuetype%20%3D%20Bug%20AND%20status%20%3D%20Open%20AND%20labels%20%3D%20leyden&quot;&gt;reporting any bugs&lt;/a&gt; or weird behaviour the developers will take your specificities into account.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The OpenJDK issue tracker isn’t open to everyone, but you’re also very welcome to provide feedback on our &lt;a href=&quot;https://quarkus.io/discussion/&quot;&gt;Quarkus channels&lt;/a&gt;; we can then relay any suggestions to our colleagues who are directly working on project Leyden.
You can also use the &lt;a href=&quot;https://mail.openjdk.org/mailman/listinfo/leyden-dev&quot;&gt;Leyden mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 06 Aug 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-and-leyden/
            </guid>
            
            
            
            <author>Maria Arias de Reyna Dominguez, Andrew Dinn, Sanne Grinovero</author>
            
        </item>
        
        <item>
            <title>Leveraging Hibernate Search capabilities in a Quarkus application without a database</title>
            <link>
                https://quarkus.io/blog/search-standalone-mapper/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the second post in the series diving into the implementation details of the
&lt;a href=&quot;https://github.com/quarkusio/search.quarkus.io&quot;&gt;application&lt;/a&gt; backing the guide search of
&lt;a href=&quot;https://quarkus.io/guides/&quot;&gt;quarkus.io&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hibernate Search is mainly known for its &lt;a href=&quot;{quarkus-hibernate-search-docs-url}&quot;&gt;integration with Hibernate ORM&lt;/a&gt;,
where it can detect the entity changes made through ORM and reflect them in the search indexes. But there is more to
Hibernate Search than that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/search-standalone-mapper/search-orm.png&quot; alt=&quot;search orm&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Hibernate Search integration with Hibernate ORM&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Not all applications that require search capabilities rely on databases to provide the source for the search indexes.
Some applications rely on a NOSQL store where Hibernate ORM is not applicable, or even flat file storage.
What can be done in these scenarios?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s where the &lt;a href=&quot;https://quarkus.io/guides/hibernate-search-standalone-elasticsearch&quot;&gt;Hibernate Search Standalone mapper&lt;/a&gt; can come in handy.
It was &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-10-0-released/&quot;&gt;recently&lt;/a&gt; included as one of the Quarkus core extensions.
This mapper allows domain entities to be annotated with Hibernate Search annotations and then uses
the Search DSL&amp;#8217;s power to perform search operations and more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the release 3.10 of Quarkus, we&amp;#8217;ve migrated our Quarkus application that backs the guides&apos;
search of &lt;a href=&quot;https://quarkus.io/guides/&quot;&gt;quarkus.io/guides/&lt;/a&gt; to the Standalone mapper and would like to share with you
how to use this mapper to index the data coming from files and without knowing the total number of
records to index.
Please refer to the &lt;a href=&quot;https://quarkus.io/guides/hibernate-search-standalone-elasticsearch&quot;&gt;guide&lt;/a&gt; for a more in depth review of how to configure and use the mapper.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/search-standalone-mapper/search-standalone.png&quot; alt=&quot;search standalone&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Hibernate Search Standalone mapper&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s start by describing the task that this search application has to perform. The application&amp;#8217;s main goal is to
provide search capabilities over the documentation guides.
It obtains the required information about these guides from reading multiple files.
We want to read the data just once, start indexing as soon as we can, and keep only as many records in memory as strictly necessary.
We would also want to monitor the progress and report any exceptions that may occur during the indexing process.
Hence, we would want to create a finite stream of data that we would feed
to a &lt;a href=&quot;https://docs.jboss.org/hibernate/search/7.1/reference/en-US/html_single/#indexing-massindexer-basics&quot;&gt;mass indexer&lt;/a&gt;,
which will create the documents in the search index that we will later use to perform search operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Generally speaking, mass indexing can be as simple as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@Inject
SearchMapping searchMapping; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
// ...

var future = searchMapping.scope(Object.class) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    .massIndexer() &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    .start(); &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Inject &lt;code&gt;SearchMapping&lt;/code&gt; somewhere in your app so that it can be used to access Hibernate Search capabilities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a scope targeting the entities that we plan to reindex.
In this case, all indexed entities should be targeted; hence, the &lt;code&gt;Object.class&lt;/code&gt; can be used to create the scope.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a mass indexer with the default configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start the indexing process. Starting the process returns a future; the indexing happens in the background.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For Hibernate Search to perform this operation, we must tell it how to load the indexed entities.
We will use an &lt;code&gt;EntityLoadingBinder&lt;/code&gt; to do that. It is a simple interface providing access to the binding context
where we can define selection-loading strategies (for search) and mass-loading strategies (for indexing).
Since, in our case, we are only interested in the mass indexer, it would be enough only to define the mass loading strategy:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public class GuideLoadingBinder implements EntityLoadingBinder {

    @Override
    public void bind(EntityLoadingBindingContext context) { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        context.massLoadingStrategy(Guide.class, new MassLoadingStrategy&amp;lt;Guide, Guide&amp;gt;() { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
            // ...
        });
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Implement the single &lt;code&gt;bind(..)&lt;/code&gt; method of the &lt;code&gt;EntityLoadingBinder&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Specify the mass loading strategy for the &lt;code&gt;Guide&lt;/code&gt; search entity.
We&amp;#8217;ll discuss the implementation of the strategy later in this post.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And then, with the entity loading binder defined, we can simply reference it within the &lt;code&gt;@SearchEntity&lt;/code&gt; annotation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@SearchEntity(loadingBinder = @EntityLoadingBinderRef(type = GuideLoadingBinder.class)) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
@Indexed( ... )
public class Guide {
    @DocumentId
    public URI url;

    // other fields annotated with various Hibernate Search annotations,
    // e.g. @KeywordField/@FullTextField.
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Reference the loading binder implementation by the type.
As with many other Hibernate Search components,
a CDI bean reference can be used here instead by providing the bean name,
for example, if the loading binder requires access to some CDI beans and is a CDI bean itself.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That is all that is needed to tie things together.
The only open question is how to implement the mass loading strategy.
Let&amp;#8217;s first review how the mass indexer works on a high level:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/search-standalone-mapper/mass-indexer.png&quot; alt=&quot;mass indexer&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. High level mass indexer flow&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Implementing the mass loading strategy requires providing an identifier and entity loaders.
As already mentioned, in our case, we want a data stream that reads the information from files and does the reading part just once.
Hence, we want to avoid decoupling the id/entity reading steps.
While the identifier loader&amp;#8217;s contract suggests that it should provide the batch of identifiers to the sink,
nothing prevents us from passing a batch of actual entity instance instead.
It is acceptable to do in this case since we are only interested in the mass loading;
we are not implementing a selection loading strategy that would be used when searching.
Now, if the identifier loader provides actual entity instances, the entity loader has nothing more to do
than just pass through the batch of received &quot;identifiers&quot;, which are actual entities, to the entity sink.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With that in mind, the mass-loading strategy may be implemented as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;new MassLoadingStrategy&amp;lt;Guide, Guide&amp;gt;() {
    @Override
    public MassIdentifierLoader createIdentifierLoader(LoadingTypeGroup&amp;lt;Guide&amp;gt; includedTypes,
            MassIdentifierSink&amp;lt;Guide&amp;gt; sink, MassLoadingOptions options) {
            // ...  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        };
    }

    @Override
    public MassEntityLoader&amp;lt;Guide&amp;gt; createEntityLoader(LoadingTypeGroup&amp;lt;Guide&amp;gt; includedTypes,
            MassEntitySink&amp;lt;Guide&amp;gt; sink,
            MassLoadingOptions options) {
        return new MassEntityLoader&amp;lt;Guide&amp;gt;() { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
            @Override
            public void close() {
                // noting to do
            }

            @Override
            public void load(List&amp;lt;Guide&amp;gt; guides) throws InterruptedException {
                sink.accept(guides); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
            }
        };
    }
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;We&amp;#8217;ll look at the implementation of the identifier loader in the following code snippet as
it is slightly trickier than the pass-through entity loader.
Hence, we would want to take a closer look at it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An implementation of the pass-through entity loader.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As explained above, we treat the search entities as identifiers and simply pass the entities we receive to the sink.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If passing entities as identifiers feels like a hack, it&amp;#8217;s because it is.
Hibernate Search will, at some point, provide alternative APIs to achieve this more elegantly: &lt;a href=&quot;https://hibernate.atlassian.net/browse/HSEARCH-5209&quot;&gt;HSEARCH-5209&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since the guide search entities are constructed from the information read from a file,
we have to somehow pass the stream of these guides to the identifier loader.
We could do this by using the &lt;code&gt;MassLoadingOptions options&lt;/code&gt;.
These mass loading options provide access to the context objects passed to the mass indexer by the user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@Inject
SearchMapping searchMapping; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
// ...

var future = searchMapping.scope(Object.class) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    .context(GuideLoadingContext.class, guideLoadingContext) &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    // ... &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    .massIndexer() &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
    .start(); &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Inject &lt;code&gt;SearchMapping&lt;/code&gt; somewhere in your application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a scope, as usual.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pass the context object to the mass indexer that knows how to read the files,
and is able to provide the batches of &lt;code&gt;Guide&lt;/code&gt; search entities. See the following code snippet
for an example of how such context can be implemented.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set any other mass indexer configuration options as needed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a mass indexer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start the indexing process.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public class GuideLoadingContext {

    private final Iterator&amp;lt;Guide&amp;gt; guides;

    GuideLoadingContext(Stream&amp;lt;Guide&amp;gt; guides) {
        this.guides = guides.iterator(); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    }

    public List&amp;lt;Guide&amp;gt; nextBatch(int batchSize) {
        List&amp;lt;Guide&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
        for (int i = 0; guides.hasNext() &amp;amp;&amp;amp; i &amp;lt; batchSize; i++) {
            list.add(guides.next()); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        }
        return list;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Get an iterator from the finite data stream of guides.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read the next batch of the guides from the iterator. We are using the batch size limit
that we will retrieve from the mass-loading options
and checking the iterator to see if there are any more entities to pull.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, having the way of reading the entities in batches from the stream
and knowing how to pass it to the mass indexer, implementing the identifier loader
can be as easy as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@Override
public MassIdentifierLoader createIdentifierLoader(LoadingTypeGroup&amp;lt;Guide&amp;gt; includedTypes,
        MassIdentifierSink&amp;lt;Guide&amp;gt; sink, MassLoadingOptions options) {
    var context = options.context(GuideLoadingContext.class); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    return new MassIdentifierLoader() {
        @Override
        public void close() {
            // nothing to do
        }

        @Override
        public long totalCount() {
            return 0; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        }

        @Override
        public void loadNext() throws InterruptedException {
            List&amp;lt;Guide&amp;gt; batch = context.nextBatch(options.batchSize()); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
            if (batch.isEmpty()) {
                sink.complete();  &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
            } else {
                sink.accept(batch); &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
            }
        }
    };
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Retrieve the guide loading context that is expected to be passed to the mass indexer.
(e.g. &lt;code&gt;.context(GuideLoadingContext.class, guideLoadingContext)&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We do not know how many guides there will be until we finish reading all the files
and completing the indexing, so we&amp;#8217;ll just pass &lt;code&gt;0&lt;/code&gt; here.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The information is not critical: it&amp;#8217;s only used to monitor progress.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is one of the areas that we plan to improve;
see &lt;a href=&quot;https://hibernate.atlassian.net/browse/HSEARCH-5180&quot;&gt;one of the improvements we are currently working on&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Request the next batch of guides. &lt;code&gt;options.batchSize()&lt;/code&gt; will provide us with the value configured
for the current mass indexer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the batch is empty, it means that the stream iterator has no more guides to return.
Hence, we can notify the mass indexing sink that no more items will be provided by calling &lt;code&gt;.complete()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If there are any guides in the loaded batch, we&amp;#8217;ll pass them to the sink to be processed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To sum up, here is a summary of the steps to take to index an unknown number of search entities from a datasource
while reading each entity only once, and without relying on lookups by identifier:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Start by creating a loader binder and let Hibernate Search know about it via the &lt;code&gt;@SearchEntity&lt;/code&gt; annotation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement a mass loading strategy (&lt;code&gt;MassLoadingStrategy&lt;/code&gt;) that includes:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An identifier loader that does all the heavy lifting and actually constructs entire entities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An entity loader that simply passes through the entities loaded by the identifier loader to the indexing sink.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Supply through the mass indexer context any helpful services, resources, helpers, etc., that are used to load the data.
And access them in the loaders through &lt;code&gt;options.context(..);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With everything in place, run the mass indexing as usual.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a complete working example of this approach, check out the
&lt;a href=&quot;https://github.com/quarkusio/search.quarkus.io&quot;&gt;search.quarkus.io on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please note that some of the features discussed in this post are still incubating
and may change in the future.
In particular, we&amp;#8217;ve already identified and are working on possible &lt;a href=&quot;https://hibernate.atlassian.net/browse/HSEARCH-5180&quot;&gt;improvements&lt;/a&gt;
for mass indexing of a finite data stream, where the total size of entities is unknown beforehand.
If you find the approach described in the post interesting
and have similar use cases, we encourage you to give it a try.
Feel free to reach out to us to discuss your ideas and suggestions for other improvements, if any.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stay tuned for more details in the coming weeks as we publish more blog posts
exploring other interesting implementation aspects of this application.
Happy searching and mass indexing!&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/search-standalone-mapper/
            </guid>
            
            
            
            <author>Marko Bekhta (https://twitter.com/that_java_guy)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.13 - OpenTelemetry Metrics, OpenTelemetry 1.39, TLS registry improvements and more...</title>
            <link>
                https://quarkus.io/blog/quarkus-3-13-0-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While the summer is here, Quarkus is making great progress and this release contains several exciting new features and improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/39032&quot;&gt;#39032&lt;/a&gt; - OpenTelemetry Metrics support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/41521&quot;&gt;#41521&lt;/a&gt; - Bump OpenTelemetry to 1.39. and Instrumentation to 2.5.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/41418&quot;&gt;#41418&lt;/a&gt; - Add TLS registry CLI commands&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/41501&quot;&gt;#41501&lt;/a&gt; - Cert-Manager support and TLS periodic reload&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/41804&quot;&gt;#41804&lt;/a&gt; - Introduce the ability to automatically stand up an HTTP proxy for the REST Client&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/41760&quot;&gt;#41760&lt;/a&gt; - WebSockets Next: add support for Kotlin suspend functions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/41258&quot;&gt;#41258&lt;/a&gt; - ArC: support interception of producers and synthetic beans&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/41368&quot;&gt;#41368&lt;/a&gt; - Add new &lt;code&gt;@WithTestResource&lt;/code&gt; annotation and deprecate &lt;code&gt;@QuarkusTestResource&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/41457&quot;&gt;#41457&lt;/a&gt; - Provide a configuration option for disabling live-reload&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.13, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.13&quot;&gt;Quarkus 3.13 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;opentelemetry&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#opentelemetry&quot;&gt;&lt;/a&gt;OpenTelemetry&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A couple of months ago, we started some major work on the OpenTelemetry extension and you might have noticed that we skipped a few OpenTelemetry releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is our pleasure to announce that this extensive work has landed in Quarkus 3.13 with these major changes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Update to OpenTelemetry 1.39 and Instrumentation 2.5.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Introduce OpenTelemetry Metrics support&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The documentation has been updated:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/guides/opentelemetry-tracing&quot;&gt;OpenTelemetry Tracing&lt;/a&gt; guide&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/guides/opentelemetry-metrics&quot;&gt;OpenTelemetry Metrics&lt;/a&gt; guide&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tls-registry&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tls-registry&quot;&gt;&lt;/a&gt;TLS registry&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Quarkus 3.12, we introduced the TLS registry to simplify managing the TLS configuration and certificates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release introduces several additional improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can automatically reload certificates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use Kubernetes secrets or Cert-Manager to store your certificates&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These new features are documented in the &lt;a href=&quot;https://quarkus.io/guides/tls-registry-reference&quot;&gt;TLS registry&lt;/a&gt; guide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We added several &lt;code&gt;quarkus tls&lt;/code&gt; commands to the CLI to help with this new feature.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;http-proxy-for-rest-client&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#http-proxy-for-rest-client&quot;&gt;&lt;/a&gt;HTTP proxy for REST Client&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When working with REST Clients, you might want to have a closer look at the requests sent to the server.
You often end up having to use a pass-through proxy, especially when dealing with HTTPS connections.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.13 comes with a new feature that starts a pass-through proxy in dev mode.
This proxy can be used as target for Wireshark to get the content of the requests sent by the client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It can be easily enabled by setting &lt;code&gt;quarkus.rest-client.&quot;client name&quot;.enable-local-proxy&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.
When starting Quarkus, a log message will indicate you the port of the proxy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This feature is only available with the Quarkus REST Client (the RESTEasy client doesn&amp;#8217;t support it).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;websockets-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#websockets-next&quot;&gt;&lt;/a&gt;WebSockets Next&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;WebSockets Next, our next-generation WebSockets extension continues to be improved in each release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One major improvement in this release for our Kotlin users is the support of Kotlin suspend functions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;arc-support-interception-of-producers-and-synthetic-beans&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#arc-support-interception-of-producers-and-synthetic-beans&quot;&gt;&lt;/a&gt;ArC - Support interception of producers and synthetic beans&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ArC is the CDI implementation of Quarkus.
It is at the core of Quarkus and is a critical piece of the Quarkus architecture,
and is regularly improved to support more use cases or simplify existing ones.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting with Quarkus 3.13, it will be possible to use interceptors on producers and synthetic beans - which are very often used by extensions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;withtestresource-replaces-quarkustestresource&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#withtestresource-replaces-quarkustestresource&quot;&gt;&lt;/a&gt;@WithTestResource replaces @QuarkusTestResource&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;WithTestResource&lt;/code&gt; replaces &lt;code&gt;QuarkusTestResource&lt;/code&gt; that is now deprecated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The only change is the default behavior of the annotation: by default, it will restrict the resources to the annotated class.
You can easily go back to the previous behavior by adding &lt;code&gt;restrictToAnnotatedClass = false&lt;/code&gt; to your &lt;code&gt;@WithTestResource&lt;/code&gt; annotation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;quarkus update&lt;/code&gt; will take care of this change for you and make sure it keeps the current behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;disable-live-reload&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#disable-live-reload&quot;&gt;&lt;/a&gt;Disable live reload&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In some cases, people wanted to use dev mode for the Dev Services feature but wanted to disable live reload.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now easily do it by setting the &lt;code&gt;quarkus.live-reload.enabled&lt;/code&gt; configuration property to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;quarkus-cxf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-cxf&quot;&gt;&lt;/a&gt;Quarkus CXF&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus CXF 3.13 was released and is now available in &lt;a href=&quot;https://code.quarkus.io/?extension-search=origin:platform%20quarkus-cxf&quot;&gt;Quarkus Platform 3.13&lt;/a&gt;.
Check &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.13.0.html&quot;&gt;Quarkus CXF 3.13.0&lt;/a&gt; and &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.13.1.html&quot;&gt;Quarkus CXF 3.13.1&lt;/a&gt; release notes for more information about what is new in this release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.13.0.CR1&quot;&gt;3.13.0.CR1&lt;/a&gt; and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.13.0&quot;&gt;3.13.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;973 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.13 release, thanks to Ales Justin, Alex Martel, Alexey Loubyansky, Andre F de Miranda, Andy Damevin, Auri Munoz, Bruno Alves, Bruno Baptista, chrischiedo, Christian Navolskyi, Christian Schmidt, Clement Escoffier, Cristiano Nicolai, Daniel Santos, David M. Lloyd, Dmitry Kryukov, Eric Deandrea, Foivos Zakkak, Fouad Almalki, Galder Zamarreño, George Gastaldi, Georgios Andrianakis, Giancarlo Calderón Cárdenas, Gonçalo Montalvão Marques, Guillaume Smet, Gunther C. Wenda, Gwenneg Lepage, Harald Albers, harlequin516, Holly Cummins, Ioannis Canellos, Jakub Jedlicka, James Cobb, James Netherton, Jan Hendriks, Jan Martiska, Jerome Prinet, João Daniel Simões, Juan Jose Garcia, Julien Ponge, Katia Aresti, Ladislav Thon, Luke Morfill, Maciej Lisowski, Marc Nuri, Marco Bungart, Marco Sappé Griot, Marek Skacelik, mariofusco, Mark Dijkstra, marko-bekhta, Martin Bartoš, Martin Kouba, Matej Novotny, Matheus Cruz, Matteo Franci a.k.a. Fugerit, Max Rydahl Andersen, melloware, Michael Edgar, Michael Hamburger, Michal Karm Babacek, Michal Vavřík, Michel Käser, mkrueger92, Nikolas Schmidt-Voigt, Ozan Gunalp, Peter Palaga, Phillip Krüger, renanmachad, Roberto Balarezo, Roberto Cortez, Rolfe Dlugy-Hegwer, Ryan Dens, Sanne Grinovero, Sebastian Schuster, Sergey Beryozkin, Shivansh, Simon Bradette, Stéphane Épardaud, Thomas Canava, vsevel, xstefank, YeonguChoe, and Yoann Rodière.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 31 Jul 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-13-0-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus to move to the Commonhaus Foundation</title>
            <link>
                https://quarkus.io/blog/quarkus-moving-to-commonhaus/
            </link>
            <description>
                &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tldr&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tldr&quot;&gt;&lt;/a&gt;tl;dr&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After a period of consulting with the community inside and outside Red Hat we took the decision to submit a request for the &lt;a href=&quot;https://quarkus.io&quot;&gt;Quarkus project&lt;/a&gt; to join the &lt;a href=&quot;https://www.commonhaus.org/&quot;&gt;Commonhaus Foundation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we are thrilled to announce that the Quarkus project is transitioning to the Commonhaus Foundation. Quarkus grew as a research effort inside Red Hat with the goal to revolutionise Java for the Cloud Era and since 2019 when it was unveiled as a community project, Quarkus has been nurtured and supported by Red Hat. This move to Commonhaus aligns with our &lt;a href=&quot;https://quarkus.io/blog/quarkus-in-a-foundation/&quot;&gt;vision of fostering a more inclusive and collaborative environment&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-move-to-a-foundation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-move-to-a-foundation&quot;&gt;&lt;/a&gt;Why Move to a Foundation?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus has seen tremendous growth and adoption, especially with the recent advancements in Java and Kubernetes-native development. Despite our successes, our vibrant and ever-expanding Quarkus community with over 900 contributors, there is still the perception that Quarkus is too dependent on Red Hat. We aim to change this by providing a neutral ground where other organisations and contributors can feel equally valued and involved.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-commonhaus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-commonhaus&quot;&gt;&lt;/a&gt;Why Commonhaus?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commonhaus stands out with its innovative governance framework and commitment to independently managed projects. Joining Commonhaus allows Quarkus to benefit from a self-governing model. Commonhaus suits very well the fast delivery model of Quarkus. We are excited to join the other ten prominent projects that are hosted in Commonhaus, which include Hibernate and Jackson, important components of Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-next&quot;&gt;&lt;/a&gt;What&amp;#8217;s Next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus will continue to innovate and evolve. We are dedicated to making Quarkus the best framework for Java development. This transition will enable us to welcome more contributions from a diverse range of developers and organisations. We are actively working on upcoming releases and are eager to hear your ideas and feedback.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This move is as much for Quarkus as it is for you. If you or the organisation you work at are interested in ensuring that the Quarkus ecosystem grows and evolves in a direction that helps you, come and join us in helping Quarkus transition to the CommonHaus foundation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commonhaus is currently bootstrapping, enabling it to be shaped and moulded to help you and open source projects like Quarkus to have a great home.
For questions about this move, please refer to our &lt;a href=&quot;/foundation/faq&quot;&gt;dedicated FAQ&lt;/a&gt; or reach out through our usual channels.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On behalf of the Quarkus team.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 30 Jul 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-moving-to-commonhaus/
            </guid>
            
            
            
            <author>Max Rydahl Andersen (https://twitter.com/maxandersen)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.12.3 released - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-12-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.12.3, our third maintenance release for the 3.12 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.
It should be a safe upgrade for anyone already using 3.12.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.12, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.12.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using 3.12, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.12&quot;&gt;3.12&lt;/a&gt; migration guide.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.12.3&quot;&gt;the full changelog of 3.12.3 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 17 Jul 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-12-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
    </channel>
</rss>
