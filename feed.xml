<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

    <channel>
        <title>Quarkus</title>
        <link>https://quarkus.io</link>
        <description>Quarkus: Supersonic Subatomic Java</description>
        <lastBuildDate>Thu, 21 Aug 2025 03:21:31 +0000</lastBuildDate>
        
        
        <item>
            <title>CVE emergency fixes - August 2025</title>
            <link>
                https://quarkus.io/blog/cve-fixes-aug-2025/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released two emergency releases for LTS branches - Quarkus 3.15.6.1 and 3.20.2.1 to address
&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2025-55163&quot;&gt;CVE-2025-55163&lt;/a&gt;.
The fix mitigates a vulnerability affecting the Quarkus HTTP/2 transport.
Furthermore, 3.20.2.1 fixes a recent &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/49133&quot;&gt;regression in context propagation behavior&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are using these versions and the mentioned components, the update is recommended.
The fix will be also included in the upcoming 3.26.0 and 3.25.4 releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 18 Aug 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/cve-fixes-aug-2025/
            </guid>
            
            
            
            <author>Jan Marti≈°ka (https://twitter.com/janmartiska)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #59 - August</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-59/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Learn how to integrate LangChain4j with Quarkus MCP for building intelligent assistants using tools and natural language queries with Omozegie Aziegbe&amp;#8217;s blog article &quot;LangChain4j Quarkus MCP Example&quot;. Read &quot;Create a Java REST API with Quarkus and Eclipse JNoSQL for MongoDB&quot; by Otavio Santana to learn how to create a RESTful API using Quarkus and integrate it with Eclipse JNoSQL to work with MongoDB. Learn how to create a simple RESTful Java AI application that asks a large language model (LLM) to write a short poem based on a topic provided by the application user in Laura Cowen&amp;#8217;s article &quot;Create your first AI Java application with Quarkus and LangChain4j&quot;. &quot;Building a CLI with Quarkus, Kotlin and GraalVM&quot; by Maarten Mulders is a great guide that covers project setup, dependency injection, PicoCLI integration, and proven practices for developer productivity, automation, and modern software development. Learn out to combine K-Means clustering, a local LLM, and Quarkus to transform image uploads into beautiful, named color palettes with &quot;Color Whisperer: Build a Java App That Sees the Soul of Your Images&quot; by Markus Eisele. See how to create a summarizing agent that speaks the A2A protocol and harnesses local or cloud LLMs in Markus Eisele&amp;#8217;s &quot;Build Your First AI Agent in Java: Quarkus, Langchain4j, and the A2A SDK&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/59/&quot;&gt;Newsletter #59: August&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 13 Aug 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-59/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.25.3 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-25-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.25.3, the third maintenance release for our 3.25 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also released Quarkus 3.26.0.CR1, the first release candidate for 3.26 and it also marks the feature freeze for the upcoming 3.27 LTS,
as 3.27 LTS will be branched off from 3.26.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.25, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.25.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.25&quot;&gt;Quarkus 3.25 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.25.3&quot;&gt;3.25.3&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 13 Aug 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-25-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.25.2 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-25-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.25.2, the second maintenance release for our 3.25 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.25, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.25.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.25&quot;&gt;Quarkus 3.25 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.25.2&quot;&gt;3.25.2&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Fri, 08 Aug 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-25-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.25.1 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-25-1-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.25.1, the first maintenance release for our 3.25 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.25, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.25.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.25&quot;&gt;Quarkus 3.25 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.25.1&quot;&gt;3.25.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 06 Aug 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-25-1-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.25 - Virtual threads for GraphQL, Micrometer update and various new security-related features</title>
            <link>
                https://quarkus.io/blog/quarkus-3-25-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.25 with the following significant new features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47802&quot;&gt;#47802&lt;/a&gt; - Virtual threads support for SmallRye GraphQL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/48482&quot;&gt;#48482&lt;/a&gt; - Security - Provide a fluent API to set up path-specific authorization programmatically&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/48296&quot;&gt;#48296&lt;/a&gt; - OIDC Client: Add periodic asynchronous tokens refresh for performance critical applications&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/48734&quot;&gt;#48734&lt;/a&gt; - Support for OAuth2 Protected Resource Metadata&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are now preparing 3.26, which will be the base for our new LTS, 3.27 LTS.
The feature freeze for the next LTS is on August 12th.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.25, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.25.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.25&quot;&gt;Quarkus 3.25 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;virtual-threads-support-for-smallrye-graphql&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#virtual-threads-support-for-smallrye-graphql&quot;&gt;&lt;/a&gt;Virtual threads support for SmallRye GraphQL&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have had a Quarkus virtual threads story for a long time:
Quarkus 3.6 introduced virtual threads support for Quarkus REST.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since then, a lot more features got support for virtual threads added e.g. Quarkus Messaging, gRPC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Quarkus 3.25, we introduce the support of virtual threads in the &lt;a href=&quot;https://quarkus.io/guides/smallrye-graphql#runonvirtualthread&quot;&gt;SmallRye GraphQL extension&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;security&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#security&quot;&gt;&lt;/a&gt;Security&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;fluent-api-to-set-up-path-specific-authorization&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fluent-api-to-set-up-path-specific-authorization&quot;&gt;&lt;/a&gt;Fluent API to set up path-specific authorization&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To defined path-specific authorization, you previously had to use configuration properties such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.http.auth.permission.permit1.paths=/public/*
quarkus.http.auth.permission.permit1.policy=permit
quarkus.http.auth.permission.permit1.methods=GET

quarkus.http.auth.permission.deny1.paths=/forbidden
quarkus.http.auth.permission.deny1.policy=deny

quarkus.http.auth.permission.roles1.paths=/roles-secured/*,/other/*,/api/*
quarkus.http.auth.permission.roles1.policy=role-policy1
quarkus.http.auth.policy.role-policy1.roles-allowed=user,admin&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is still a possibility but you now also have the option to use a programmatic API if it is more convenient for you.
For instance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public class HttpSecurityConfiguration {
    void configure(@Observes HttpSecurity httpSecurity) {
        httpSecurity
                .get(&quot;/public/*&quot;).permit()
                .path(&quot;/roles-secured/*&quot;, &quot;/other/*&quot;, &quot;/api/*&quot;).roles(&quot;admin&quot;, &quot;user&quot;)
                .path(&quot;/forbidden&quot;).authorization().deny();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;periodic-asynchronous-tokens-refresh&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#periodic-asynchronous-tokens-refresh&quot;&gt;&lt;/a&gt;Periodic asynchronous tokens refresh&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The OIDC Client currently refreshes the token during the current request execution,
which might be impractical for high performance applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.25 introduces the ability to refresh the tokens in the background by using the &lt;code&gt;quarkus.oidc-client.refresh-interval&lt;/code&gt; configuration property.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;support-for-oauth2-protected-resource-metadata&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#support-for-oauth2-protected-resource-metadata&quot;&gt;&lt;/a&gt;Support for OAuth2 Protected Resource Metadata&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.25 adds initial support for &lt;a href=&quot;https://datatracker.ietf.org/doc/rfc9728/&quot;&gt;RFC 9728&amp;#8217;s OAuth 2.0 Protected Resource Metadata&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See our &lt;a href=&quot;https://quarkus.io/guides/security-oidc-expanded-configuration#resource-metadata-properties&quot;&gt;documentation&lt;/a&gt; for all the details about this new feature.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;legacy-config-classes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#legacy-config-classes&quot;&gt;&lt;/a&gt;Legacy config classes&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have started sunsetting the legacy config classes support and, with 3.25, you can&amp;#8217;t build an extension using legacy config classes anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 3.26, the support for legacy config classes will be entirely dropped from Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-langchain4j&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-langchain4j&quot;&gt;&lt;/a&gt;Quarkus LangChain4j&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus LangChain4j is now part of the Quarkus Platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first version of Quarkus LangChain4j we included is &lt;code&gt;1.1.0&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been upgraded to 3.25.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.25.0.CR1&quot;&gt;3.25.0.CR1&lt;/a&gt; and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.25.0&quot;&gt;3.25.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1103 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.25 release, thanks to Alex Martel, Alexey Loubyansky, Anis Ikram, Antonio Macr√¨, Blaz Mrak, Bruno Baptista, Chris Laprun, Christian, Christian Beikov, Clement Escoffier, comrt, David M. Lloyd, Erik Mattheis, Foivos Zakkak, Fouad Almalki, Francesco Nigro, George Gastaldi, Georgios Andrianakis, Guillaume LECLERC, Guillaume Smet, Holly Cummins, Ilya Korennoy, Inaki Villar, Ivan Petkov, Izziizzi-ux, James Netherton, Jan Martiska, Jonathan Dowland, Julien Ponge, Katia Aresti, Kevin Wooten, Ladislav Thon, Lars Andringa, Lorenzo Vannucchi, Marco Belladelli, Marco Bungart, marko-bekhta, Martin Barto≈°, Martin Kouba, Matej Novotny, Matej Va≈°ek, Matheus Oliveira da Silva, Max Rydahl Andersen, melloware, Michal Vav≈ô√≠k, Nicola Concetti, Ozan Gunalp, Paulo Casaes, Peter Palaga, Phillip Kr√ºger, Pierre Beitz, Ramon Boss, Robert Pospisil, Roberto Cortez, Rostislav Svoboda, Sebastian Zieja, Sergey Beryozkin, Severin Gehwolf, Sopka, St√©phane √âpardaud, Teymur Babayev, Thomas Canava, Vincent Sevel, and Yoann Rodi√®re.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 30 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-25-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Use Quarkus MCP client to access secure MCP HTTP server from command line</title>
            <link>
                https://quarkus.io/blog/secure-mcp-oidc-client/
            </link>
            <description>
                &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-client/&quot;&gt;Use Quarkus MCP client to access secure MCP HTTP servers&lt;/a&gt; blog post, we explained how a user can login to Quarkus LangChain4j AI server application with GitHub OAuth2 and have Google AI Gemini use &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html&quot;&gt;Quarkus MCP Client&lt;/a&gt; to access a secure &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server&quot;&gt;Quarkus MCP Server&lt;/a&gt; user name provider tool with a GitHub access token.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, not every AI service application is going to be designed to require a user login: for example, it may run as a command line application or cron scheduler. But also, not every AI service application that requires a user login will be able to use a user login token to access a secure MCP server because such a server may only support tokens of different type.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, we will explain how &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html&quot;&gt;Quarkus MCP Client&lt;/a&gt; that runs in a command line Quarkus LangChain4j AI application can itself acquire an access token using an OAuth2 &lt;code&gt;client_credentials&lt;/code&gt; grant and use it to access a secure &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server&quot;&gt;Quarkus MCP Server&lt;/a&gt; service account name provider tool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will work with &lt;a href=&quot;https://www.keycloak.org/&quot;&gt;Keycloak&lt;/a&gt; and rely on it to demonstrate how to approach securing complex, distributed AI applications that may span multiple security boundaries, by requiring that access tokens are restricted to specific audiences, and exchanging them to acquire new, correct audiences.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;demo-architecture&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#demo-architecture&quot;&gt;&lt;/a&gt;Demo architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_client/demo-architecture.png&quot; alt=&quot;Command Line Poem Service Architecture&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see in the diagram above, a command line agent uses a &lt;code&gt;Poem Service&lt;/code&gt; AI service to create a poem. The &lt;code&gt;Poem Service&lt;/code&gt; uses &lt;code&gt;AI Gemini&lt;/code&gt; and requests &lt;code&gt;MCP Client&lt;/code&gt; to complete a tool call to help &lt;code&gt;AI Gemini&lt;/code&gt; to find out the service account name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MCP client must use an access token. It uses an OAuth2 &lt;code&gt;client_credential&lt;/code&gt; grant to acquire a service account token and propagate it to the secure MCP server. This service account token&amp;#8217;s audience restricts it to accessing the MCP server only.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MCP server tool implementation must access a REST server to complete the tool action. However, it can not use the current access token that is restricted to accessing this MCP server because the REST server accepts tokens that are meant to access this REST server only.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, the MCP server exchanges the current token to set the REST server audience before propagating it, with the REST server successfully completing the secure tool call, with the response returned to the MCP Client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are now ready to start working on the demo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find the complete project source in the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-cmd-client-server&quot;&gt;Quarkus LangChain4j Command Line Secure MCP Client Server sample&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-mcp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-mcp-server&quot;&gt;&lt;/a&gt;Step 1 - Create and start MCP server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let&amp;#8217;s create a secure Quarkus MCP SSE server that can enforce an authenticated access to its tool, verify that the access token has a correct audience, and complete a tool action by exchanging the current access token for a new access token with the REST server audience and propagating this token to the REST server to get the required service account name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-dependencies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-dependencies&quot;&gt;&lt;/a&gt;MCP server maven dependencies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the following dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.mcp&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-mcp-server-sse&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &amp;lt;version&amp;gt;1.4.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-oidc&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-rest&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-rest-client-oidc-token-propagation&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-mcp-server-sse&lt;/code&gt; is required to support MCP Streamable HTTP and SSE transports.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-oidc&lt;/code&gt; is required to secure access to MCP SSE endpoints. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-rest&lt;/code&gt; is required to support REST server that the MCP tool has to call. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-rest-client-oidc-token-propagation&lt;/code&gt; also brings &lt;code&gt;quarkus-rest-client&lt;/code&gt; and is required to support a REST client call to REST server with the token exchange and propagation. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-tool&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-tool&quot;&gt;&lt;/a&gt;MCP Service Account Name Tool&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s create a tool that can return a name of the current service account.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import org.eclipse.microprofile.rest.client.inject.RestClient;
import io.quarkiverse.mcp.server.TextContent;
import io.quarkiverse.mcp.server.Tool;
import jakarta.inject.Inject;

public class ServiceAccountNameProvider { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    @RestClient
    @Inject
    ServiceAccountNameRestClient serviceAccountNameRestClient; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

    @Tool(name = &quot;sevice-account-name-provider&quot;, description = &quot;Provides a name of the current service account&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    TextContent provideServiceAccountName() {
        return new TextContent(serviceAccountNameRestClient.getServiceAccountName()); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Provide a tool that can return a name of the current service account.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use an injected &lt;code&gt;ServiceAccountNameRestClient&lt;/code&gt; to access the REST server to complete the service account name request. See the &lt;a href=&quot;#service-account-name-rest-client&quot;&gt;Service Account Name REST client&lt;/a&gt; section below for more details.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MCP server tool can be invoked only if the current MCP request is authenticated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post we do not enforce the secure tool access with annotations such as &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-client/#mcp-server-tool&quot;&gt;@PermissionAllowed&lt;/a&gt; or &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/#tool&quot;&gt;@Authenticated&lt;/a&gt; but only use the HTTP security policy configuration instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See how both main MCP SSE and tool endpoints are secured in the &lt;a href=&quot;#mcp-server-configuration&quot;&gt;MCP Server Configuration&lt;/a&gt; section below.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;service-account-name-rest-client&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#service-account-name-rest-client&quot;&gt;&lt;/a&gt;Service Account Name REST client&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;#mcp-server-tool&quot;&gt;MCP Service Account Name Tool&lt;/a&gt; uses the Service Account Name REST client to call the REST server to complete a service account name request.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This REST client looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;
import io.quarkus.oidc.token.propagation.common.AccessToken;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Produces;

@RegisterRestClient
@AccessToken &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
public interface ServiceAccountNameRestClient {

    @GET
    @Produces(&quot;text/plain&quot;)
    String getServiceAccountName(); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Get a service account name from the REST server. See the &lt;a href=&quot;#service-account-name-rest-server&quot;&gt;Service Account Name REST server&lt;/a&gt; section below for more details.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use &lt;code&gt;@AccessToken&lt;/code&gt; annotation to require the access token exchange and propagation. This single &lt;code&gt;@AccessToken&lt;/code&gt; annotation, supported by an additional configuration in the &lt;a href=&quot;#mcp-server-configuration&quot;&gt;MCP Server Configuration&lt;/a&gt; section below, is all that is required to support this complex access token flow.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;service-account-name-rest-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#service-account-name-rest-server&quot;&gt;&lt;/a&gt;Service Account Name REST server&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;#mcp-server-tool&quot;&gt;MCP Service Account Name Tool&lt;/a&gt; uses the &lt;a href=&quot;#service-account-name-rest-client&quot;&gt;Service Account Name REST client&lt;/a&gt; to get a service account name from the Service Account Name REST server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This REST server looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import io.quarkus.security.Authenticated;
import io.quarkus.security.identity.SecurityIdentity;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;

@Path(&quot;/service-account-name&quot;)
public class ServiceAccountNameRestServer {

    @Inject
    SecurityIdentity securityIdentity;

    @GET
    @Produces(&quot;text/plain&quot;)
    @Authenticated &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    public String getServiceAccountName() {
        return securityIdentity.getPrincipal().getName(); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Provide a secure REST resource method that can return a service account name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use an injected &lt;code&gt;SecurityIdentity&lt;/code&gt; to complete the method&amp;#8217;s task, in this case - return a service account identity name.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this demo, the REST server is collocated with the MCP server to simplify the demo. Of course, in production, such REST servers will most likely be remote.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, let&amp;#8217;s have a look, in the &lt;a href=&quot;#mcp-server-configuration&quot;&gt;MCP Server Configuration&lt;/a&gt; section, how access to both the &lt;a href=&quot;#mcp-server-tool&quot;&gt;MCP Service Account Name Tool&lt;/a&gt; and this server is restricted to tokens with specific audiences only.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-configuration&quot;&gt;&lt;/a&gt;MCP Server Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s configure our secure MCP server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;# MCP server
quarkus.mcp.server.server-info.name=Service Account Name Provider &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
quarkus.mcp.server.traffic-logging.enabled=true
quarkus.mcp.server.traffic-logging.text-limit=1000

# Require an authenticated access to MCP server
quarkus.http.auth.permission.authenticated.paths=/mcp/* &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
quarkus.http.auth.permission.authenticated.policy=authenticated

# Default Quarkus OIDC tenant that verifies access tokens which reach the MCP server.
quarkus.oidc.client-id=quarkus-mcp-server &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
quarkus.oidc.token.audience=quarkus-mcp-server &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

# Request a token exchange before the token propagation
quarkus.rest-client-oidc-token-propagation.exchange-token=true &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

# OIDC client that performs the current token exchange
quarkus.oidc-client.auth-server-url=${quarkus.oidc.auth-server-url} &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
quarkus.oidc-client.client-id=${quarkus.oidc.client-id}
quarkus.oidc-client.credentials.secret=${quarkus.oidc.credentials.secret}
quarkus.oidc-client.scopes=quarkus-mcp-service-scope
quarkus.oidc-client.grant.type=exchange
quarkus.oidc-client.grant-options.exchange.subject_token_type=urn:ietf:params:oauth:token-type:access_token &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;

# REST client which accesses a protected REST server, by propagating the exchanged token
io.quarkiverse.langchain4j.sample.ServiceAccountNameRestClient/mp-rest/url=http://localhost:8080/service-account-name  &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;

# OIDC `service-account-name-rest-server` tenant that secures a protected REST server.
quarkus.oidc.service-account-name-rest-server.auth-server-url=${quarkus.oidc.auth-server-url} &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
quarkus.oidc.service-account-name-rest-server.token.audience=quarkus-mcp-service &lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;(9)&lt;/b&gt;
quarkus.oidc.service-account-name-rest-server.tenant-paths=/service-account-name

# Keycloak devservice that enables a default OIDC tenant that secures MCP server.
quarkus.keycloak.devservices.image-name=quay.io/keycloak/keycloak:26.3.1 &lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;(10)&lt;/b&gt;
quarkus.keycloak.devservices.port=8081
# Keycloak may require more memory on some systems
quarkus.keycloak.devservices.container-memory-limit=1250M&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Declare MCP server and enable traffic logging.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enforce an authenticated access to the main MCP SSE and tool endpoints. The configured pattern covers both the initial &apos;/mcp/sse&apos; handshake and &apos;/mcp/messages/&apos; requests.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Default OIDC tenant that secures the MCP SSE endpoint and tool. It is supported by Keycloak Dev Service in dev mode. In simple cases you do not even have to configure the default OIDC tenant. But in this demo, the default OIDC tenant is required to enforce that the tokens which reach the MCP server contain a &lt;code&gt;quarkus-mcp-server&lt;/code&gt; audience.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Request an access token exchange before the &lt;a href=&quot;#service-account-name-rest-client&quot;&gt;Service Account Name REST client&lt;/a&gt; propagates it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configure OIDC client to perform the token exchange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Set the &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8693#name-token-type-identifiers&quot;&gt;type&lt;/a&gt; of a new token that the current token will be exchanged for to &lt;code&gt;access_token&lt;/code&gt;. Starting from Quarkus 3.25, an expected new  token type will be set to &lt;code&gt;access_token&lt;/code&gt; by default, and users will not have to configure this property when the access token type is required when exchanging tokens.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configure the &lt;a href=&quot;#service-account-name-rest-client&quot;&gt;Service Account Name REST client&lt;/a&gt; with the REST server address. The REST server is collocated with the MCP server only to simplify the demo.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The OIDC tenant that protects the REST server only.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;9&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The OIDC tenant that protects the REST server requires that the tokens that are used to access it contain a REST server &lt;code&gt;quarkus-mcp-service&lt;/code&gt; audience.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;10&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configure Keycloak dev service to use one of the latest released Keycloak images, and make it run on a fixed &lt;code&gt;8081&lt;/code&gt; port to simplify the &lt;a href=&quot;#poem-service-configuration&quot;&gt;Poem Service Configuration&lt;/a&gt; where an access to Keycloak is also required.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;start-mcp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#start-mcp-server&quot;&gt;&lt;/a&gt;Start the MCP server in dev mode&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now let&amp;#8217;s start the MCP server in dev mode:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;mvn quarkus:dev&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and go to the &lt;a href=&quot;#keycloak-setup&quot;&gt;Step 2 - Keycloak setup&lt;/a&gt; in the next section to complete the Keycloak configuration that is required to support the secure MCP server token audience and exchange requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;keycloak-setup&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#keycloak-setup&quot;&gt;&lt;/a&gt;Step 2 - Keycloak setup&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we &lt;a href=&quot;#start-mcp-server&quot;&gt;started the MCP server in dev mode&lt;/a&gt;, Keycloak Dev Service launched a Keycloak container, made it available on port &lt;code&gt;8081&lt;/code&gt;, created a &lt;code&gt;quarkus&lt;/code&gt; realm with the &lt;code&gt;quarkus-mcp-server&lt;/code&gt; client - this client name was configured with the &lt;code&gt;quarkus.oidc.client-id=quarkus-mcp-server&lt;/code&gt; property in the &lt;a href=&quot;#mcp-server-configuration&quot;&gt;MCP Server Configuration&lt;/a&gt; section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;quarkus-mcp-server&lt;/code&gt; client represents a confidential OIDC client that protects the MCP server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But MCP server and REST server have additional token audience and exchange requirements and we must complete the Keycloak setup to support those requirements. Let&amp;#8217;s do it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to &lt;code&gt;&lt;a href=&quot;http://localhost:8081&quot; class=&quot;bare&quot;&gt;http://localhost:8081&lt;/a&gt;&lt;/code&gt; and login as a Keycloak admin, with the &lt;code&gt;admin&lt;/code&gt; name and &lt;code&gt;admin&lt;/code&gt; password credentials.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Select the &lt;code&gt;quarkus&lt;/code&gt; realm:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_client/quarkus-realm.png&quot; alt=&quot;Quarkus Realm&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, create a &lt;code&gt;quarkus-mcp-client&lt;/code&gt; OIDC client that the Quarkus MCP client will use to acquire OAuth2 &lt;code&gt;client_credentials&lt;/code&gt; tokens for accessing the MCP server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Start with the &lt;code&gt;General Settings&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_client/quarkus-mcp-client.png&quot; alt=&quot;Quarkus MCP Client&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and enable &lt;code&gt;Client authentication&lt;/code&gt; and &lt;code&gt;Service accounts roles&lt;/code&gt; capabilities:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_client/quarkus-mcp-client-service-account.png&quot; alt=&quot;Quarkus MCP Client Service Account&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Save the &lt;code&gt;quarkus-mcp-client&lt;/code&gt; OIDC client. Click on its &lt;code&gt;Credentials&lt;/code&gt; tab and copy the generated secret to export it later as the &lt;a href=&quot;#oidc-client-secret&quot;&gt;OIDC client secret&lt;/a&gt; in order to run the command line AI &lt;code&gt;Poem Service&lt;/code&gt; application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the Quarkus MCP client to be able to access MCP server with access tokens that the &lt;code&gt;quarkus-mcp-client&lt;/code&gt; OIDC client will acquire, these tokens must contain an audience (&lt;code&gt;aud&lt;/code&gt;) claim with a &lt;code&gt;quarkus-mcp-server&lt;/code&gt; audience. The MCP server is configured in the &lt;a href=&quot;#mcp-server-configuration&quot;&gt;MCP Server Configuration&lt;/a&gt; section to require this audience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Keycloak supports several options for adding an audience (&lt;code&gt;aud&lt;/code&gt;) claim to issued tokens. We will use an option that involves creating a custom &lt;code&gt;Client scope&lt;/code&gt; with an &lt;code&gt;Audience&lt;/code&gt; mapping.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to the &lt;code&gt;Client scopes&lt;/code&gt; and create an &lt;code&gt;Optional&lt;/code&gt; &lt;code&gt;quarkus-mcp-server-scope&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_client/quarkus-mcp-server-scope.png&quot; alt=&quot;Quarkus MCP Server Scope&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the &lt;code&gt;quarkus-mcp-server-scope&lt;/code&gt; scope is created, go to its &lt;code&gt;Mappings&lt;/code&gt; tab, and choose &lt;code&gt;Configure a new mapper&lt;/code&gt; option and select &lt;code&gt;Audience&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_client/quarkus-mcp-server-scope-aud.png&quot; alt=&quot;Quarkus MCP Server Scope Audience&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Name this mapper as &lt;code&gt;quarkus-mcp-server-as-audience&lt;/code&gt; and choose &lt;code&gt;quarkus-mcp-server&lt;/code&gt; as an &lt;code&gt;Included Client Audience&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_client/quarkus-mcp-server-scope-aud-details.png&quot; alt=&quot;Quarkus MCP Server Scope Audience Details&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the &lt;code&gt;quarkus-mcp-server-scope&lt;/code&gt; is created, add it as an &lt;code&gt;Optional&lt;/code&gt; scope to the &lt;code&gt;quarkus-mcp-client&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_client/add-quarkus-mcp-server-scope-to-quarkus-mcp-client.png&quot; alt=&quot;Add Scope to Client&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, when Quarkus MCP client will use the &lt;code&gt;quarkus-mcp-client&lt;/code&gt; OIDC client to acquire tokens, it will request a &lt;code&gt;quarkus-mcp-server-scope&lt;/code&gt; token scope, resulting in Keycloak issuing tokens with an audience that contains the &lt;code&gt;quarkus-mcp-server&lt;/code&gt; - exactly what the Quarkus MCP server requires.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, we need to support Quarkus MCP server exchanging the incoming access token with the &lt;code&gt;quarkus-mcp-server&lt;/code&gt; audience for a new token that will contain a REST server audience instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create a &lt;code&gt;quarkus-mcp-service&lt;/code&gt; OIDC client that represents the REST server, similarly to how you created the &lt;code&gt;quarkus-mcp-client&lt;/code&gt; OIDC client. Next, create a &lt;code&gt;quarkus-mcp-service-scope&lt;/code&gt; client scope, similarly to how you created the &lt;code&gt;quarkus-mcp-server-scope&lt;/code&gt; client scope, choosing the &lt;code&gt;quarkus-mcp-service&lt;/code&gt; as an &lt;code&gt;Included Client Audience&lt;/code&gt; when creating an audience mapping for this scope.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the &lt;code&gt;quarkus-mcp-service-scope&lt;/code&gt; is created, add it as an &lt;code&gt;Optional&lt;/code&gt;  client scope to the &lt;code&gt;quarkus-mcp-server&lt;/code&gt; MCP Server OIDC client, similarly to how you added the &lt;code&gt;quarkus-mcp-server-scope&lt;/code&gt; to the &lt;code&gt;quarkus-mcp-client&lt;/code&gt; above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, update the &lt;code&gt;quarkus-mcp-server&lt;/code&gt; capability to support a &lt;code&gt;Standard Token Exchange&lt;/code&gt;, see the &lt;a href=&quot;https://www.keycloak.org/securing-apps/token-exchange#_standard-token-exchange-enable&quot;&gt;How to enable token exchange&lt;/a&gt; example in the Keycloak documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, the &lt;code&gt;quarkus-mcp-server&lt;/code&gt; OIDC client that secures the MCP server can also exchange the incoming token and request a new &lt;code&gt;quarkus-mcp-service&lt;/code&gt; audience by adding the &lt;code&gt;quarkus-mcp-service-scope&lt;/code&gt; scope to the token exchange grant request, exactly what the REST server requires.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you actively work with another OAuth2 provider that can produce tokens with required audiences and exchange them using a standard token exchange grant, then you can also try to adapt this demo to work with that provider instead.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-poem-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-poem-service&quot;&gt;&lt;/a&gt;Step 3 - Create and run Poem Service from command line&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MCP server is now &lt;a href=&quot;#start-mcp-server&quot;&gt;running&lt;/a&gt; and ready to accept tool calls. Let&amp;#8217;s create a command line AI &lt;code&gt;Poem Service&lt;/code&gt; that will work with AI Gemini and use Quarkus MCP client to complete tool calls.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;poem-service-maven-dependencies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#poem-service-maven-dependencies&quot;&gt;&lt;/a&gt;Poem Service Maven dependencies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the following dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-langchain4j-ai-gemini&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-langchain4j-mcp&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-langchain4j-oidc-client-mcp-auth-provider&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;quarkus-picocli&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-langchain4j-ai-gemini&lt;/code&gt; brings support for AI Gemini.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-langchain4j-mcp&lt;/code&gt; provides core MCP Client support.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-langchain4j-oidc-cient-mcp-auth-provider&lt;/code&gt; provides an implementation of &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html#_authorization&quot;&gt;McpClientAuthProvider&lt;/a&gt; that can supply access tokens that it itself acquires with an OAuth2 &lt;code&gt;client_credentials&lt;/code&gt; grant (or any other supported grant that does not require a user input). Note, this dependency is different from the &lt;code&gt;quarkus-langchain4j-oidc-mcp-auth-provider&lt;/code&gt; one that supplies tokens already available after an authorization code flow completes, it was demoed in the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-client/#poem-service-maven-dependencies&quot;&gt;Use Quarkus MCP client to access secure MCP HTTP servers&lt;/a&gt; blog post to propagate GitHub login access tokens.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-picocli&lt;/code&gt; supports building command-line Quarkus applications. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;ai-gemini-key&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ai-gemini-key&quot;&gt;&lt;/a&gt;AI Gemini API key&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Poem Service&lt;/code&gt; relies on AI Gemini to create a poem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Get &lt;a href=&quot;https://aistudio.google.com/app/apikey&quot;&gt;AI Gemini API key&lt;/a&gt; and export it as an &lt;code&gt;AI_GEMINI_API_KEY&lt;/code&gt; environment property.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;oidc-client-secret&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#oidc-client-secret&quot;&gt;&lt;/a&gt;OIDC client secret&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus MCP client will use an implementation of &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html#_authorization&quot;&gt;McpClientAuthProvider&lt;/a&gt; provided by the &lt;code&gt;quarkus-langchain4j-oidc-cient-mcp-auth-provider&lt;/code&gt; dependency.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This &lt;code&gt;McpClientAuthProvider&lt;/code&gt; uses the &lt;a href=&quot;#poem-service-configuration&quot;&gt;configured OIDC client&lt;/a&gt; to acquire access tokens using an OAuth2 &lt;code&gt;client_credentials&lt;/code&gt; grant, where an OIDC client secret must be provided.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Export the OIDC &lt;code&gt;quarkus-mcp-client&lt;/code&gt; client secret that you copied when working through the &lt;a href=&quot;#keycloak-setup&quot;&gt;Step 2 - Keycloak setup&lt;/a&gt; section as an &lt;code&gt;OIDC_CLIENT_SECRET&lt;/code&gt; environment property.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;poem-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#poem-service&quot;&gt;&lt;/a&gt;Poem Service&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Poem Service&lt;/code&gt; is a simple Quarkus LangChain4j AI service:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import dev.langchain4j.service.UserMessage;
import io.quarkiverse.langchain4j.RegisterAiService;
import io.quarkiverse.langchain4j.mcp.runtime.McpToolBox;

@RegisterAiService
public interface PoemService {
    @UserMessage(&quot;&quot;&quot;
            Write a short 1 paragraph poem in {language} about a Java programming language.
            Provide a translation to English if the original poem language is not English.
            Dedicate the poem to the service account, refer to this account by its name.&quot;&quot;&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    @McpToolBox(&quot;service-account-name&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    String writePoem(String language); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Request to write a poem about Java.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use Quarkus MCP &lt;code&gt;service-account-name&lt;/code&gt; client configured in the &lt;a href=&quot;#poem-service-configuration&quot;&gt;Poem Service Configuration&lt;/a&gt; section to call a tool that can provide a service account name.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This service is called from the &lt;code&gt;PoemCommand&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import java.util.concurrent.Callable;
import jakarta.enterprise.context.control.ActivateRequestContext;
import jakarta.inject.Inject;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;

@Command(name = &quot;poem&quot;, mixinStandardHelpOptions = true, description = &quot;Create a poem&quot;, version = &quot;v1.0&quot;)
@ActivateRequestContext
public class PoemCommand implements Callable&amp;lt;Integer&amp;gt; {

    @Option(names = { &quot;-l&quot;, &quot;--language&quot; }, description = &quot;Poem language&quot;, defaultValue = &quot;English&quot;)
    String poemLanguage;

    @Inject
    PoemService poemService;

    @Override
    public Integer call() {
        System.out.println(poemService.writePoem(poemLanguage)); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        return 0;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Call &lt;code&gt;PoemService&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;poem-service-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#poem-service-configuration&quot;&gt;&lt;/a&gt;Poem Service Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s see how the command line &lt;code&gt;Poem Service&lt;/code&gt; configuration looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.langchain4j.mcp.service-account-name.transport-type=http &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
quarkus.langchain4j.mcp.service-account-name.url=http://localhost:8081/mcp/sse/ &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

quarkus.oidc-client.auth-server-url=http://localhost:8081/realms/quarkus &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
quarkus.oidc-client.client-id=quarkus-mcp-client &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
quarkus.oidc-client.credentials.secret=${oidc_client_secret} &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
quarkus.oidc-client.scopes=quarkus-mcp-server-scope &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;

quarkus.langchain4j.ai.gemini.api-key=${ai_gemini_api_key} &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
quarkus.langchain4j.ai.gemini.log-requests=true &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
quarkus.langchain4j.ai.gemini.log-responses=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enable MCP client HTTP transport. In this demo we use SSE, but &lt;code&gt;Streamable HTTP&lt;/code&gt; is also supported.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Point to the Quarkus MCP server endpoint that you started in the &lt;a href=&quot;#start-mcp-server&quot;&gt;Start the MCP server in dev mode&lt;/a&gt; step.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configure &lt;a href=&quot;https://quarkus.io/guides/security-openid-connect-client-reference&quot;&gt;OIDC client&lt;/a&gt; to acquire access tokens using OAuth2 &lt;code&gt;client_credentials&lt;/code&gt; grant, a default grant type supported by the OIDC client. OIDC client points to a Keycloak &lt;code&gt;quarkus&lt;/code&gt; realm, note the fixed &lt;code&gt;8081&lt;/code&gt; port that you requested Keycloak Dev Service to use for Keycloak in the &lt;a href=&quot;#keycloak-setup&quot;&gt;Step 2 - Keycloak setup&lt;/a&gt; section.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;OIDC client id, you created the OIDC &lt;code&gt;quarkus-mcp-client&lt;/code&gt; client in the &lt;a href=&quot;#keycloak-setup&quot;&gt;Step 2 - Keycloak setup&lt;/a&gt; section.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;OIDC &lt;code&gt;quarkus-mcp-client&lt;/code&gt; client secret that you exported during the &lt;a href=&quot;#oidc-client-secret&quot;&gt;OIDC client secret&lt;/a&gt; step.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Request that the tokens issued to &lt;code&gt;quarkus-mcp-client&lt;/code&gt; must contain a &lt;code&gt;quarkus-mcp-server&lt;/code&gt; MCP server audience. You created a client &lt;code&gt;quarkus-mcp-server-scope&lt;/code&gt; scope with a &lt;code&gt;quarkus-mcp-server&lt;/code&gt; client audience mapping in the &lt;a href=&quot;#keycloak-setup&quot;&gt;Step 2 - Keycloak setup&lt;/a&gt; section.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;AI Gemini key that you acquired and exported during the &lt;a href=&quot;#ai-gemini-key&quot;&gt;AI Gemini API key&lt;/a&gt; step.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enable AI Gemini request and response logging&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please pay attention to the fact that the MCP client configuration has a &lt;code&gt;service-account-name&lt;/code&gt; name. You referred to this configuration with the &lt;code&gt;@McpToolBox(&quot;service-account-name&quot;)&lt;/code&gt; annotation in the &lt;a href=&quot;#poem-service&quot;&gt;Poem Service&lt;/a&gt; section.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;package-poem-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#package-poem-service&quot;&gt;&lt;/a&gt;Package Poem Service&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Package the command line &lt;code&gt;Poem Service&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;mvn clean package&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;run-poem-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#run-poem-service&quot;&gt;&lt;/a&gt;Run Poem Service&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run the command line &lt;code&gt;Poem Service&lt;/code&gt; that you packaged in the &lt;a href=&quot;#package-poem-service&quot;&gt;Package Poem Service&lt;/a&gt; section:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;java -jar target/quarkus-app/quarkus-run.jar&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should get a response such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;For service-account-quarkus-mcp-client, this Java ode I write,
A language strong, with classes bright, and objects shining light.
From simple apps to systems grand, its power knows no end,
With threads and streams, a helping hand,  a journey without bend.
Its virtual machine, a sturdy friend,  on which great feats depend.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How about trying another language ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;java -jar target/quarkus-app/quarkus-run.jar --language Greek&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should get a response such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;Here&apos;s a short poem in Greek about Java, dedicated to the service account &quot;service-account-quarkus-mcp-client&quot;:

**Greek:**

Œ©, Java, Œ≥ŒªœéœÉœÉŒ± ŒπœÉœáœÖœÅŒÆ Œ∫Œ±Œπ Œ≥œÅŒÆŒ≥ŒøœÅŒ∑,
Œ≥ŒπŒ± œÄœÅŒøŒ≥œÅŒ±ŒºŒºŒ±œÑŒπœÉŒºœå, ŒµœÅŒ≥Œ±ŒªŒµŒØŒø Œ±Œ∫œÅŒπŒ≤Œ≠œÇ.
Œ£œÑŒøŒΩ service-account-quarkus-mcp-client Œ±œÜŒπŒµœÅœâŒºŒ≠ŒΩŒ∑,
Œ∑ Œ¥œçŒΩŒ±ŒºŒÆ œÉŒøœÖ, œÄŒ¨ŒΩœÑŒ±  Œ±ŒæŒπŒøŒ∏Œ±œçŒºŒ±œÉœÑŒ∑.

**English Translation:**

O Java, language strong and fast,
For programming, a precise tool.
Dedicated to service-account-quarkus-mcp-client,
Your power, always admirable.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;have-token-audiences-made-any-difference&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#have-token-audiences-made-any-difference&quot;&gt;&lt;/a&gt;Have token audiences made any difference ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the command line &lt;code&gt;Poem Service&lt;/code&gt; to &lt;a href=&quot;#run-poem-service&quot;&gt;run successfully&lt;/a&gt;, Quarkus MCP client had to acquire a token with a &lt;code&gt;quarkus-mcp-server&lt;/code&gt; audience to access the MCP server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is how a token that Keycloak issues to the MCP client looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_client/token-with-quarkus-mcp-server-aud.png&quot; alt=&quot;Token with quarkus-mcp-server audience&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The token &lt;code&gt;aud&lt;/code&gt; claim contains two audience values, one of them is a required &lt;code&gt;quarkus-mcp-server&lt;/code&gt; audience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the MCP &lt;code&gt;quarkus-mcp-server&lt;/code&gt; server to complete the Quarkus MCP client request, it had to verify that the token had a correct &lt;code&gt;quarkus-mcp-server&lt;/code&gt; audience, and exchange it for a new token with a &lt;code&gt;quarkus-mcp-service&lt;/code&gt; audience to access the REST server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is how an exchanged token that a Keycloak issues to the MCP server looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_oidc_client/token-with-quarkus-mcp-service-aud.png&quot; alt=&quot;Token with quarkus-mcp-service audience&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The token &lt;code&gt;aud&lt;/code&gt; claim contains a required &lt;code&gt;quarkus-mcp-service&lt;/code&gt; audience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note this token still retains a record of the original &lt;code&gt;quarkus-mcp-client&lt;/code&gt; client that acquired the previous token, but also lists &lt;code&gt;quarkus-mcp-server&lt;/code&gt; as the authorizing party (&lt;code&gt;azp&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s try to access both MCP server and REST server without an audience claim.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensure the MCP server is &lt;a href=&quot;#start-mcp-server&quot;&gt;running&lt;/a&gt; and &lt;a href=&quot;#keycloak-setup&quot;&gt;Keycloak is configured&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the demo, the OIDC &lt;code&gt;quarkus-mcp-client&lt;/code&gt; client acquires tokens that are used to access the MCP server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use the following curl command to acquire a &lt;code&gt;client_credentials&lt;/code&gt; token for the &lt;code&gt;quarkus-mcp-client&lt;/code&gt; client, omitting a &lt;code&gt;quarkus-mcp-server-scope&lt;/code&gt; grant property:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl -X POST -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -d &quot;grant_type=client_credentials&amp;amp;client_id=quarkus-mcp-client&amp;amp;client_secret=keycloak_quarkus_mcp_client_secret&quot; http://localhost:8081/realms/quarkus/protocol/openid-connect/token&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and confirm at &lt;a href=&quot;https://jwt.io/&quot;&gt;jwt.io&lt;/a&gt; that the returned JWT token has no audience claim.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Try to access the MCP server with this token:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl -H &quot;Authorization: Bearer &amp;lt;token&amp;gt;&quot; http://localhost:8080/mcp/sse&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and you will get HTTP 401.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What about the REST server ? In the demo, the OIDC &lt;code&gt;quarkus-mcp-server&lt;/code&gt; client acquires tokens that are used to access the REST server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use the following curl command to acquire a &lt;code&gt;client_credentials&lt;/code&gt; token  for the &lt;code&gt;quarkus-mcp-server&lt;/code&gt; client, omitting a &lt;code&gt;quarkus-mcp-service-scope&lt;/code&gt; grant property:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl -X POST -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -d &quot;grant_type=client_credentials&amp;amp;client_id=quarkus-mcp-server&amp;amp;client_secret=secret&quot; http://localhost:8081/realms/quarkus/protocol/openid-connect/token&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and confirm at &lt;a href=&quot;https://jwt.io/&quot;&gt;jwt.io&lt;/a&gt; that the returned JWT token has no audience claim.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Try to access the REST server with this token:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl -H &quot;Authorization: Bearer &amp;lt;token&amp;gt;&quot; http://localhost:8080/service-account-name&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and you will get HTTP 401.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also enforce a stricter verification by requiring that tokens received by both MCP and REST servers were issued to the &lt;code&gt;quarkus-mcp-client&lt;/code&gt; and &lt;code&gt;quarkus-mcp-server&lt;/code&gt; respectively by adding the following configuration fragment to the &lt;a href=&quot;#mcp-server-configuration&quot;&gt;MCP Server Configuration&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;# Tokens that are accepted by MCP server must have been requested by `quarkus-mcp-client`

quarkus.oidc.token.required-claims.azp=quarkus-mcp-client

# Tokens that are accepted by REST server must have been requested by `quarkus-mcp-server`

quarkus.oidc.service-account-name-rest-server.token.required-claims.azp=quarkus-mcp-server&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resource-indicator&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#resource-indicator&quot;&gt;&lt;/a&gt;Note about Resource Indicators&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization&quot;&gt;latest 2025-06-18 MCP authorization specification&lt;/a&gt; &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#token-audience-binding-and-validation&quot;&gt;requires&lt;/a&gt; the use of &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8707.html&quot;&gt;OAuth2 Resource Indicators&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OAuth2 Resource Indicator allows for a fine grained token audience restriction, in the presence of multiple, diverse resource servers that must be accessed with tokens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a simple demo that we created in this blog post, having a token to contain an audience only is sufficient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If your provider already supports &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8707.html&quot;&gt;OAuth2 Resource Indicators&lt;/a&gt; and you need to have a token to also include a resource indicator, configure OIDC client to request it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, you can add &lt;code&gt;quarkus.oidc-client.grant.client.extra-params.resource=http://localhost:8080/mcp&lt;/code&gt; to the &lt;a href=&quot;#poem-service-configuration&quot;&gt;Poem Service Configuration&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case, to have the MCP server verify that an access token contains a correct resource indicator, add &lt;code&gt;quarkus.oidc.token.required-claims.resource=http://localhost:8080/mcp&lt;/code&gt; to the &lt;a href=&quot;#mcp-server-configuration&quot;&gt;MCP Server Configuration&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;security-considerations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#security-considerations&quot;&gt;&lt;/a&gt;Security Considerations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensuring that each participant in your distributed AI system is properly secured and accepts tokens thar are meant to access this participant only is crucial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Token audience restriction is one of the key OAuth2 mechanisms that supports this goal, with &lt;a href=&quot;#resource-indicator&quot;&gt;resource indicators&lt;/a&gt; allowing to achieve a finer-grained audience restriction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8693&quot;&gt;Token exchange&lt;/a&gt; can help to correctly switch the OAuth2 security context when the tokens are flowing in a multi-hop distributed AI application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Read more about the &lt;a href=&quot;https://modelcontextprotocol.io/specification/draft/basic/authorization#access-token-privilege-restriction&quot;&gt;Access Token Privilege Restriction&lt;/a&gt; in the &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization&quot;&gt;latest 2025-06-18 MCP authorization specification&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, we demonstrated how &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html&quot;&gt;Quarkus MCP Client&lt;/a&gt; can access secure MCP servers by acquiring access tokens using an OAuth2 &lt;code&gt;client_credentials&lt;/code&gt; grant and propagating them to the secure Quarkus MCP server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also looked into restricting tokens to specific audiences and started learning about an important OAuth2 &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8693&quot;&gt;token exchange&lt;/a&gt; grant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have more content dedicated to AI and MCP security lined up for you, stay tuned !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/secure-mcp-oidc-client/
            </guid>
            
            
            
            <author>Sergey Beryozkin (https://twitter.com/sberyozkin)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.24.5 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-24-5-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.24.5, the fourth (we skipped 3.24.0) maintenance release for our 3.24 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will release 3.25 next week.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.24, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.24.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.24&quot;&gt;Quarkus 3.24 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.24.5&quot;&gt;3.24.5&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-24-5-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.20.2 released - LTS maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-20-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.20.2, our second maintenance release for the 3.20 LTS stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.20.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.20, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update --stream=3.20&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.20.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.20.2&quot;&gt;the full changelog of 3.20.2 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-20-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.15.6 released - LTS maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-15-6-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.15.6, our next maintenance release for the 3.15 LTS stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.15.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.15, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update --stream=3.15&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.15.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.15.6&quot;&gt;the full changelog of 3.15.6 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-15-6-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.24.4 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-24-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.24.4, the third (we skipped 3.24.0) maintenance release for our 3.24 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.24, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.24.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.24&quot;&gt;Quarkus 3.24 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.24.4&quot;&gt;3.24.4&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 17 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-24-4-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Introducing Quarkus quickjs4j: Seamless JavaScript Integration in Your Quarkus Applications</title>
            <link>
                https://quarkus.io/blog/quickjs4j/
            </link>
            <description>
                &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re excited to announce the release of the Quarkus quickjs4j extension, a powerful new addition to the
Quarkus ecosystem that enables seamless execution of JavaScript code within your Java applications. Built
on top of the &lt;a href=&quot;https://github.com/roastedroot/quickjs4j&quot;&gt;quickjs4j library&lt;/a&gt;, this extension brings the
lightweight QuickJS JavaScript engine to both JVM and Native Quarkus, with full CDI integration and
compile-time optimizations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whether you need to execute dynamic business logic, implement configurable rules engines, or integrate with
JavaScript-based algorithms, the Quarkus quickjs4j extension provides a type-safe, performant solution that
leverages Quarkus&amp;#8217;s build-time processing capabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-javascript-in-java-applications&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-javascript-in-java-applications&quot;&gt;&lt;/a&gt;Why JavaScript in Java Applications?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus applications often need to execute dynamic logic that can be modified without recompiling the entire
application. JavaScript provides an excellent solution for this use case, offering:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dynamic Configuration&lt;/strong&gt;: Update business rules and logic without application restarts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Scripting Capabilities&lt;/strong&gt;: Enable power users to customize application behavior&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Algorithm Integration&lt;/strong&gt;: Leverage existing JavaScript libraries and algorithms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rapid Prototyping&lt;/strong&gt;: Quickly test and iterate on complex logic&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus quickjs4j extension makes this integration seamless while maintaining the performance and developer
experience you expect from Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;key-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#key-features&quot;&gt;&lt;/a&gt;Key Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;compile-time-code-generation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#compile-time-code-generation&quot;&gt;&lt;/a&gt;Compile-time Code Generation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The extension automatically generates CDI beans and proxy classes for your JavaScript interfaces during build
time, ensuring optimal performance and early error detection.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;full-cdi-integration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-cdi-integration&quot;&gt;&lt;/a&gt;Full CDI Integration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JavaScript interfaces are first-class citizens in your Quarkus application, injectable like any other CDI bean.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;flexible-script-loading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#flexible-script-loading&quot;&gt;&lt;/a&gt;Flexible Script Loading&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Load JavaScript files from multiple sources:
- Classpath resources (recommended for packaged scripts)
- Filesystem paths (for dynamic script loading)
- URLs (for remote script execution)
- Anywhere else (using the optional Factory pattern)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;context-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#context-support&quot;&gt;&lt;/a&gt;Context Support&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pass Java objects as context to JavaScript execution, enabling bidirectional communication between Java and
JavaScript code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;sandboxed-execution&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sandboxed-execution&quot;&gt;&lt;/a&gt;Sandboxed Execution&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;QuickJs4J provides a secure and efficient way to execute JavaScript within Java. By running code in a sandbox,
it ensures:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Memory safety ‚Äì JavaScript runs in isolation, protecting your application from crashes or memory leaks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No system access by default ‚Äì JavaScript cannot access the filesystem, network, or other sensitive resources unless explicitly allowed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Portability ‚Äì Being pure Java bytecode, it runs wherever the JVM does.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Native-image friendly ‚Äì Compatible with GraalVM&amp;#8217;s native-image for fast, lightweight deployments.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whether you&amp;#8217;re embedding scripting capabilities or isolating untrusted code, QuickJs4J is designed for safe and
seamless integration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#getting-started&quot;&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Adding the extension to your Quarkus application is straightforward. First, add the dependency to your &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.quickjs4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-quickjs4j&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${quarkus-quickjs4j.version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You&amp;#8217;ll also need to enable the annotation processor for code generation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;build&amp;gt;
    &amp;lt;plugins&amp;gt;
        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;configuration&amp;gt;
                &amp;lt;annotationProcessorPaths&amp;gt;
                    &amp;lt;path&amp;gt;
                        &amp;lt;groupId&amp;gt;io.quarkiverse.quickjs4j&amp;lt;/groupId&amp;gt;
                        &amp;lt;artifactId&amp;gt;quarkus-quickjs4j&amp;lt;/artifactId&amp;gt;
                        &amp;lt;version&amp;gt;${quarkus-quickjs4j.version}&amp;lt;/version&amp;gt;
                    &amp;lt;/path&amp;gt;
                &amp;lt;/annotationProcessorPaths&amp;gt;
            &amp;lt;/configuration&amp;gt;
        &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;simple-example-javascript-calculator&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#simple-example-javascript-calculator&quot;&gt;&lt;/a&gt;Simple Example: JavaScript Calculator&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s create a simple calculator to demonstrate the extension&amp;#8217;s capabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, define a Java interface annotated with &lt;code&gt;@ScriptInterface&lt;/code&gt; and &lt;code&gt;@ScriptImplementation&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package com.example;

import io.roastedroot.quickjs4j.annotations.ScriptInterface;
import io.quarkiverse.quickjs4j.annotations.ScriptImplementation;

@ScriptInterface
@ScriptImplementation(location = &quot;calculator.js&quot;)
public interface Calculator {
    int add(int a, int b);
    int multiply(int a, int b);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, create the JavaScript implementation in &lt;code&gt;src/main/resources/calculator.js&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-javascript hljs&quot; data-lang=&quot;javascript&quot;&gt;function add(a, b) {
    return a + b;
}

function multiply(a, b) {
    return a * b;
}

export { add, multiply };&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, inject and use the calculator in your Quarkus application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package com.example;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;

@ApplicationScoped
public class MathService {

    @Inject
    Calculator calculator;

    public int performCalculation() {
        int sum = calculator.add(5, 3);        // Returns 8
        int product = calculator.multiply(4, 7); // Returns 28
        double quotient = calculator.divide(10.0, 2.0); // Returns 5.0

        return sum + product + (int) quotient;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s it! The extension handles all the complexity of JavaScript execution, type conversion, and CDI
integration behind the scenes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;advanced-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#advanced-features&quot;&gt;&lt;/a&gt;Advanced Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;context-objects-for-bidirectional-communication&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#context-objects-for-bidirectional-communication&quot;&gt;&lt;/a&gt;Context Objects for Bidirectional Communication&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A powerful feature of quickjs4j is the ability to provide Java context objects that JavaScript code
can invoke:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@ScriptInterface(context = CalculatorContext.class)
@ScriptImplementation(location = &quot;calculator.js&quot;)
public interface Calculator {
    int add(int a, int b);
    int multiply(int a, int b);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@ApplicationScoped
public class CalculatorContext {
    public void log(String message) {
        System.out.println(&quot;Calc&amp;gt;&amp;gt; &quot; + message);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your JavaScript code can then call these Java methods:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-javascript hljs&quot; data-lang=&quot;javascript&quot;&gt;function add(a, b) {
    Calculator_Builtins.log(`Adding ${a} + ${b}`);
    return a + b;
}

function multiply(a, b) {
    Calculator_Builtins.log(`Multiplying ${a} * ${b}`);
    return a * b;
}

export { add, multiply };&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;factory-pattern-for-dynamic-scripts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#factory-pattern-for-dynamic-scripts&quot;&gt;&lt;/a&gt;Factory Pattern for Dynamic Scripts&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For scenarios where you need to load scripts dynamically at runtime, use the factory pattern:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@ApplicationScoped
public class DynamicMathService {

    @Inject
    CalculatorContext context;

    @Inject
    ScriptInterfaceFactory&amp;lt;Calculator, CalculatorContext&amp;gt; calculatorFactory;

    public void executeCustomScript() {
        // Load your javascript from some dynamic source
        String scriptContent = loadDynamicScriptContent();

        // Create calculator instance with dynamic script
        Calculator calculator = calculatorFactory.create(scriptContent, context);

        // Use the calculator
        int result = calculator.add(10, 20);
        System.out.println(&quot;Result: &quot; + result);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This approach is perfect for applications that need to execute user-provided scripts or
load scripts from external sources.  Note that the execution of the script is fully sandboxed.
Only the methods exposed by the Context can be invoked from within the script.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;error-handling-and-debugging&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#error-handling-and-debugging&quot;&gt;&lt;/a&gt;Error Handling and Debugging&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JavaScript errors are propagated as Java exceptions, making debugging straightforward:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;try {
    double result = calculator.divide(10, 0);
} catch (RuntimeException e) {
    logger.error(&quot;JavaScript execution failed: {}&quot;, e.getMessage(), e);
    // Handle the error appropriately
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;build-time-magic&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#build-time-magic&quot;&gt;&lt;/a&gt;Build-time Magic&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Behind the scenes, the extension performs build-time code generation, creating:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CDI Bean Classes&lt;/strong&gt;: &lt;code&gt;{InterfaceName}_CDI&lt;/code&gt; - Injectable CDI beans&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Factory Classes&lt;/strong&gt;: &lt;code&gt;{InterfaceName}_Factory&lt;/code&gt; - Injectable factory beans&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Proxy Classes&lt;/strong&gt;: &lt;code&gt;{InterfaceName}_Proxy&lt;/code&gt; - Generated by quickjs4j&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Context Builtins&lt;/strong&gt;: &lt;code&gt;{ContextName}_Builtins&lt;/code&gt; - JavaScript-accessible Java methods&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This build-time approach ensures minimal runtime overhead while providing full IDE
support with code completion and type checking.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;performance-considerations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#performance-considerations&quot;&gt;&lt;/a&gt;Performance Considerations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The QuickJS engine is designed for lightweight, fast JavaScript execution. Combined with
Quarkus&amp;#8217;s build-time optimizations, the extension provides:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fast Startup&lt;/strong&gt;: Minimal impact on application startup time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Low Memory Footprint&lt;/strong&gt;: Efficient memory usage for JavaScript execution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Native Image Support&lt;/strong&gt;: Full compatibility with GraalVM native images&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Build-time Validation&lt;/strong&gt;: Early detection of interface mismatches and errors&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-cases&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#use-cases&quot;&gt;&lt;/a&gt;Use Cases&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus quickjs4j extension is perfect for:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Business Rules Engines&lt;/strong&gt;: Implement configurable business logic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Template Processing&lt;/strong&gt;: Generate dynamic content with JavaScript templates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Algorithm Integration&lt;/strong&gt;: Leverage existing JavaScript algorithms and libraries&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User Scripting&lt;/strong&gt;: Allow power users to customize application behavior&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Configuration Logic&lt;/strong&gt;: Implement complex configuration scenarios&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;current-status-and-future-plans&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#current-status-and-future-plans&quot;&gt;&lt;/a&gt;Current Status and Future Plans&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The extension is currently in &lt;strong&gt;experimental status&lt;/strong&gt;, meaning APIs may evolve based on
community feedback. We&amp;#8217;re actively working on:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Enhanced error reporting and debugging capabilities&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Performance optimizations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configurable JavaScript engine options&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improved IDE integration and tooling&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular, we have a lot of work to do in optimizing performance.  There are
clear tradeoffs to consider around flexibility and speed, as well as customization.
The current experimental implementation takes a very conservative approach to
ensure full sandboxing and thread safety.  The result is a slower implementation,
but one that is guaranteed to be thread safe and fully sandboxed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;getting-involved&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#getting-involved&quot;&gt;&lt;/a&gt;Getting Involved&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus quickjs4j extension is part of the Quarkiverse ecosystem and welcomes community
contributions. Whether you&amp;#8217;re interested in:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reporting bugs or requesting features&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Contributing code improvements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sharing use cases and examples&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improving documentation&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Visit our &lt;a href=&quot;https://github.com/quarkiverse/quarkus-quickjs4j&quot;&gt;GitHub repository&lt;/a&gt; to get involved.
We would really love for you to try out quickjs4j in Quarkus and give us feedback.  The best
way to evolve the functionality is by hearing from users!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus quickjs4j extension opens up exciting possibilities for Java developers who need
to integrate JavaScript execution into their applications. With its compile-time code generation,
full CDI integration, and flexible script loading options, it provides a powerful yet easy-to-use
solution for dynamic code execution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Try it out and let us know what you think! We&amp;#8217;re excited to see what the community builds with this
capability.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links-and-resources&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links-and-resources&quot;&gt;&lt;/a&gt;Links and Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to learn more about QuickJS itself, or the upstream quickjs4j Java project,
here are some helpful links:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkiverse/quarkus-quickjs4j&quot;&gt;Quarkus quickjs4j GitHub Repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/roastedroot/quickjs4j&quot;&gt;quickjs4j Library&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bellard.org/quickjs/&quot;&gt;QuickJS JavaScript Engine&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 15 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quickjs4j/
            </guid>
            
            
            
            <author>Eric Wittmann (https://twitter.com/apicurio)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #58 - July</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-58/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Discover more about the launch of the Agent2Agent (A2A) Java SDK, contributed by the WildFly and the Quarkus communities. Learn how to build a Model Context Protocol server and client using Quarkus and LangChain4J in ‚ÄúUsing the Model Context Protocol With Quarkus and Langchain4j‚Äù by Vishal Shanbhag &amp;amp; Saajan Nagendra. Make sure you read ‚ÄúAI Tool Calling with Quarkus LangChain4j‚Äù by piotr.minkowski to explore Quarkus LangChain4j AI support&amp;#8217;s integration with chat models, focusing on &quot;tool calling&quot; (function calling), an AI application pattern that enhances models via API/external tool interaction.  See how to trace microservice calls across network boundaries using Quarkus, REST clients, and Jaeger in Markus Eisele‚Äôs post ‚ÄúThe Distributed Dragon Forge: A Hands-On OpenTelemetry Adventure with Quarkus‚Äù. Finally, check out Lo√Øc Mathieu‚Äôs article to learn how to build  a chatbot with Google Gemini Vertex AI and Quarkus Comments Feed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/58/&quot;&gt;Newsletter #58: July&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 14 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-58/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Getting Started with Quarkus and the A2A Java SDK</title>
            <link>
                https://quarkus.io/blog/quarkus-and-a2a-java-sdk/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A couple of weeks ago, we &lt;a href=&quot;https://quarkus.io/blog/a2a-project-launches-java-sdk/&quot;&gt;announced&lt;/a&gt; that our &lt;a href=&quot;https://github.com/a2aproject/a2a-java&quot;&gt;A2A Java SDK&lt;/a&gt; has been contributed to the official A2A project! This was a collaboration between our WildFly and Quarkus teams at Red Hat and Google. Today, we have released A2A Java SDK 0.2.3.Beta1, which aligns with the v0.2.3 version of the &lt;a href=&quot;https://github.com/a2aproject/A2A/tree/v0.2.3&quot;&gt;A2A specification&lt;/a&gt;. In this blog post, we&amp;#8217;ll cover how to easily get started with Quarkus and A2A using the A2A Java SDK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also check out our &lt;a href=&quot;https://www.youtube.com/watch?v=5CZzW-wvEQs&quot;&gt;short video&lt;/a&gt; that gives an introduction to the A2A Java SDK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/5CZzW-wvEQs?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-a2a&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-a2a&quot;&gt;&lt;/a&gt;What&amp;#8217;s A2A?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before jumping into the details, let&amp;#8217;s go through what &lt;a href=&quot;https://a2aproject.github.io/A2A/specification/&quot;&gt;A2A&lt;/a&gt; is. The &lt;em&gt;Agent2Agent&lt;/em&gt; (A2A) protocol is an open standard developed by Google. It enables AI agents to communicate and collaborate with one another, regardless of each agent&amp;#8217;s underlying framework, language, or vendor. This is important, as it paves the way for polyglot multi-agent systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;main-concepts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#main-concepts&quot;&gt;&lt;/a&gt;Main Concepts&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The A2A protocol involves a few important concepts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt; - This is the end user who has a request that will require the help of one or more agents.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A2A Client&lt;/strong&gt; - This is the client that will send requests on the user&amp;#8217;s behalf to an A2A server agent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A2A Server&lt;/strong&gt; - This is the server agent that will receive and respond to requests from an A2A client agent. An A2A server agent exposes an HTTP endpoint that implements the A2A protocol.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A2A client and A2A server agents can be implemented using different languages and frameworks. They just need to be able to speak with each other using the A2A protocol. Communication happens using JSON-RPC 2.0 over HTTP(S) as the transport. A2A SDKs written for various programming languages enable this interoperability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/orgs/a2aproject/repositories&quot;&gt;A2A project&lt;/a&gt; aims to provide SDKs for various languages. Using the &lt;a href=&quot;https://github.com/a2aproject/a2a-python&quot;&gt;A2A Python SDK&lt;/a&gt; and our &lt;a href=&quot;https://github.com/a2aproject/a2a-java&quot;&gt;A2A Java SDK&lt;/a&gt;, for example, it&amp;#8217;s possible for an A2A client agent written in Python to communicate with an A2A server agent written in Java and vice versa.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;from-a-quarkus-langchain4j-ai-service-to-an-a2a-server-agent&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#from-a-quarkus-langchain4j-ai-service-to-an-a2a-server-agent&quot;&gt;&lt;/a&gt;From a Quarkus LangChain4j AI Service to an A2A Server Agent&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s say we have a &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/ai-services.html&quot;&gt;Quarkus LangChain4j AI service&lt;/a&gt; that can respond to user queries about the weather by making use of a weather MCP server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@RegisterAiService
@ApplicationScoped
public interface WeatherAgent {

    @SystemMessage(&quot;&quot;&quot;
            You are a specialized weather forecast assistant. Your primary function is to
            utilize the provided tools to retrieve and relay weather information in response
            to user queries. You must rely exclusively on these tools for data and refrain
            from inventing information. Ensure that all responses include the detailed output
            from the tools used and are formatted in Markdown.
            &quot;&quot;&quot;
    )
    @McpToolBox(&quot;weather&quot;) // &amp;lt;-- The weather MCP server that will be used
    String chat(@UserMessage String question);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To turn this weather agent into an A2A server agent, there are a few simple steps we need to follow:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;add-an-a2a-java-sdk-server-dependency&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#add-an-a2a-java-sdk-server-dependency&quot;&gt;&lt;/a&gt;Add an A2A Java SDK Server Dependency&lt;/h3&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;io.github.a2asdk&lt;/code&gt; &lt;code&gt;groupId&lt;/code&gt; is temporary and will likely change for future releases. Keep an eye on the &lt;code&gt;a2a-java&lt;/code&gt; &lt;a href=&quot;https://github.com/a2aproject/a2a-java/blob/main/README.md&quot;&gt;README&lt;/a&gt; for up-to-date documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.github.a2asdk&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;a2a-java-sdk-server-quarkus&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a2a-java-sdk-server-quarkus&lt;/code&gt; provides access to the core classes that make up the A2A specification and provides the HTTP endpoint that implements the A2A protocol. This dependency makes use of Quarkus Reactive Routes. If not using Quarkus, the &lt;code&gt;a2a-java-sdk-server-jakarta&lt;/code&gt; dependency can be used to expose an A2A server agent in a Jakarta server supporting CDI and Jakarta RESTful Web Services.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;add-a-class-that-creates-an-a2a-agentcard&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#add-a-class-that-creates-an-a2a-agentcard&quot;&gt;&lt;/a&gt;Add a Class that Creates an A2A &lt;code&gt;AgentCard&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;AgentCard&lt;/code&gt; is a class that describes the capabilities of an A2A server agent. Other agents or clients will use this to understand what our weather agent can do. The A2A Java SDK will automatically expose this agent card at the server agent&amp;#8217;s &lt;code&gt;.well-known/agent.json&lt;/code&gt; URI. For example, if our A2A server agent is running on &lt;a href=&quot;http://localhost:10001&quot; class=&quot;bare&quot;&gt;http://localhost:10001&lt;/a&gt;, the agent card will be available at &lt;a href=&quot;http://localhost:10001/.well-known/agent.json&quot; class=&quot;bare&quot;&gt;http://localhost:10001/.well-known/agent.json&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;import io.a2a.server.PublicAgentCard;
import io.a2a.spec.AgentCapabilities;
import io.a2a.spec.AgentCard;
import io.a2a.spec.AgentSkill;
...

@ApplicationScoped
public class WeatherAgentCardProducer {

    @Produces
    @PublicAgentCard
    public AgentCard agentCard() {
        return new AgentCard.Builder()
                .name(&quot;Weather Agent&quot;)
                .description(&quot;Helps with weather&quot;)
                .url(&quot;http://localhost:10001&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
                .version(&quot;1.0.0&quot;)
                .capabilities(new AgentCapabilities.Builder() &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
                        .streaming(true)
                        .pushNotifications(false)
                        .stateTransitionHistory(false)
                        .build())
                .defaultInputModes(Collections.singletonList(&quot;text&quot;))
                .defaultOutputModes(Collections.singletonList(&quot;text&quot;))
                .skills(Collections.singletonList(new AgentSkill.Builder()
                        .id(&quot;weather_search&quot;)
                        .name(&quot;Search weather&quot;)
                        .description(&quot;Helps with weather in city, or states&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
                        .tags(Collections.singletonList(&quot;weather&quot;))
                        .examples(List.of(&quot;weather in LA, CA&quot;)) &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
                        .build()))
                .build();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The URL of our A2A server agent. We set &lt;code&gt;quarkus.http.port&lt;/code&gt; to &lt;code&gt;10001&lt;/code&gt; in our &lt;code&gt;application.properties&lt;/code&gt; file so our A2A server agent will be available at &lt;a href=&quot;http://localhost:10001&quot; class=&quot;bare&quot;&gt;http://localhost:10001&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Indicates the capabilities of our A2A server agent like whether it supports streaming, push notifications, and state transition history.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Describes what our agent can do.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;An example query that our agent can handle.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;add-a-class-that-creates-an-a2a-agentexecutor&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#add-a-class-that-creates-an-a2a-agentexecutor&quot;&gt;&lt;/a&gt;Add a class that creates an A2A &lt;code&gt;AgentExecutor&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;AgentExecutor&lt;/code&gt; is a class that will be used to process requests sent to our A2A server agent. It will pass the requests received from the A2A client to our Quarkus LangChain4j AI service and is responsible for returning the responses back to the A2A client. The A2A Java SDK will call this executor when a request is sent to our A2A server agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the &lt;code&gt;AgentExecutor&lt;/code&gt; interface specifies two methods, &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;cancel&lt;/code&gt;, that we need to implement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;import io.a2a.server.agentexecution.AgentExecutor;
import io.a2a.server.agentexecution.RequestContext;
import io.a2a.server.events.EventQueue;
import io.a2a.server.tasks.TaskUpdater;
import io.a2a.spec.JSONRPCError;
import io.a2a.spec.Message;
import io.a2a.spec.Part;
import io.a2a.spec.Task;
import io.a2a.spec.TaskNotCancelableError;
import io.a2a.spec.TaskState;
import io.a2a.spec.TextPart;
...

@ApplicationScoped
public class WeatherAgentExecutorProducer {

    @Inject
    WeatherAgent weatherAgent; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    @Produces
    public AgentExecutor agentExecutor() {
        return new WeatherAgentExecutor(weatherAgent);
    }

    private static class WeatherAgentExecutor implements AgentExecutor {

        private final WeatherAgent weatherAgent;

        public WeatherAgentExecutor(WeatherAgent weatherAgent) {
            this.weatherAgent = weatherAgent;
        }

        @Override
        public void execute(RequestContext context, EventQueue eventQueue) throws JSONRPCError { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
            TaskUpdater updater = new TaskUpdater(context, eventQueue);

            // mark the task as submitted and start working on it
            if (context.getTask() == null) {
                updater.submit();
            }
            updater.startWork();

            // extract the text from the message
            String userMessage = extractTextFromMessage(context.getMessage());

            // call the weather agent with the user&apos;s message
            String response = weatherAgent.chat(userMessage); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;

            // create the response part
            TextPart responsePart = new TextPart(response, null);
            List&amp;lt;Part&amp;lt;?&amp;gt;&amp;gt; parts = List.of(responsePart);

            // add the response as an artifact and complete the task
            updater.addArtifact(parts, null, null, null);
            updater.complete();
        }

        @Override
        public void cancel(RequestContext context, EventQueue eventQueue) throws JSONRPCError { &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
            Task task = context.getTask();

            if (task.getStatus().state() == TaskState.CANCELED) {
                // task already cancelled
                throw new TaskNotCancelableError();
            }

            if (task.getStatus().state() == TaskState.COMPLETED) {
                // task already completed
                throw new TaskNotCancelableError();
            }

            // cancel the task
            TaskUpdater updater = new TaskUpdater(context, eventQueue);
            updater.cancel();
        }

        private String extractTextFromMessage(Message message) {
            StringBuilder textBuilder = new StringBuilder();
            if (message.getParts() != null) {
                for (Part part : message.getParts()) {
                    if (part instanceof TextPart textPart) {
                        textBuilder.append(textPart.getText());
                    }
                }
            }
            return textBuilder.toString();
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is our Quarkus LangChain4j AI service.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;execute&lt;/code&gt; method will be used to process requests from an A2A client.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Here we are invoking our Quarkus LangChain4j AI service.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;cancel&lt;/code&gt; method be used to cancel an ongoing request.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s it, we can now start our Quarkus application as shown below and our A2A server agent will be available at &lt;a href=&quot;http://localhost:10001&quot; class=&quot;bare&quot;&gt;http://localhost:10001&lt;/a&gt;. A2A client agents can now send weather-related queries to our A2A server agent and our agent will respond with the weather information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;$ mvn quarkus:dev&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve gone from a Quarkus LangChain4j AI service to an A2A server agent in just a few steps!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The source code for this example is available &lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/multi_language/python_and_java_multiagent/weather_agent&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;validating-our-a2a-server-agent-using-the-a2a-inspector&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#validating-our-a2a-server-agent-using-the-a2a-inspector&quot;&gt;&lt;/a&gt;Validating our A2A Server Agent Using the A2A Inspector&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/a2aproject/a2a-inspector&quot;&gt;A2A Inspector&lt;/a&gt; is a web application that&amp;#8217;s very easy to run and can be used to inspect any A2A server agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can use the A2A Inspector to validate our A2A server agent by specifying our server agent&amp;#8217;s URL in the &lt;code&gt;Connect&lt;/code&gt; text box.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The A2A Inspector will obtain and show our server agent&amp;#8217;s agent card:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-and-a2a-java-sdk/a2a-inspector-agent-card.png&quot; alt=&quot;a2a inspector agent card&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that this matches the information we provided in our &lt;code&gt;WeatherAgentCardProducer&lt;/code&gt; class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also use the inspector to send requests to the A2A server agent and to view the raw HTTP requests and responses.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;multi-agent-orchestration-with-python-and-java-server-agents&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#multi-agent-orchestration-with-python-and-java-server-agents&quot;&gt;&lt;/a&gt;Multi-Agent Orchestration with Python and Java Server Agents&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s take a look at a more complex example that makes use of our weather A2A server agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-and-a2a-java-sdk/multiagent-java-python.png&quot; alt=&quot;multiagent java python&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a multi-agent example where a host agent delegates requests to two different A2A server agents, an Airbnb agent and our Weather agent, based on the user&amp;#8217;s question. Under the hood, the host agent makes use of each agent&amp;#8217;s agent card to determine the capabilities of each agent and uses an LLM to determine which agent to delegate the request to based on their capabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/multi_language/python_and_java_multiagent/airbnb_agent&quot;&gt;Airbnb agent&lt;/a&gt; is a Python agent that&amp;#8217;s implemented using LangGraph and makes use of the A2A Python SDK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/multi_language/python_and_java_multiagent/weather_agent&quot;&gt;Weather agent&lt;/a&gt; is our Java agent that&amp;#8217;s implemented using Quarkus LangChain4j and makes use of the A2A Java SDK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the host agent uses A2A clients written in Python to communicate with the server agents. It&amp;#8217;s also possible to use an &lt;a href=&quot;https://github.com/a2aproject/a2a-java?tab=readme-ov-file#a2a-client&quot;&gt;A2A client&lt;/a&gt; written in Java using our A2A Java SDK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The complete source code for this example is available &lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/multi_language/python_and_java_multiagent&quot;&gt;here&lt;/a&gt;. To experiment with this multi-agent example, try sending different types of questions to the host agent, for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What&amp;#8217;s the weather in New York, NY?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find me a room in LA, CA, July 7-9, 2 adults&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the host agent will delegate the first question to the Weather agent and the second question to the Airbnb agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-and-a2a-java-sdk/new_york_weather.png&quot; alt=&quot;new york weather&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the second question will be delegated to the Airbnb agent:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-and-a2a-java-sdk/la_airbnb.png&quot; alt=&quot;la airbnb&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve seen how easy it is to get started with Quarkus and A2A using the A2A Java SDK. With just a few steps, we can turn a Quarkus LangChain4j AI service into an A2A server agent that can communicate with other A2A agents, regardless of the language or framework they are implemented in. The LangChain4j and Quarkus teams are also working on removing most of the boilerplate code to expose an A2A server and interact with A2A clients. So, stay tuned!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;further-reading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#further-reading&quot;&gt;&lt;/a&gt;Further Reading&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://a2aproject.github.io/A2A/specification/&quot;&gt;A2A Specification&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/a2aproject/a2a-java/blob/main/README.md&quot;&gt;A2A Java SDK Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 09 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-and-a2a-java-sdk/
            </guid>
            
            
            
            <author>Farah Juma (https://twitter.com/farahjuma)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.24.3 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-24-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.24.3, the second (we skipped 3.24.0) maintenance release for our 3.24 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.24, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.24.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.24&quot;&gt;Quarkus 3.24 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.24.3&quot;&gt;3.24.3&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 09 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-24-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Sunsetting legacy config classes</title>
            <link>
                https://quarkus.io/blog/legacy-config-classes-sunsetting/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After having migrated the whole Quarkus code base and Quarkiverse extensions to @ConfigMapping interfaces in Quarkus 3.19,
we announce the sunsetting of legacy config classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;some-history&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#some-history&quot;&gt;&lt;/a&gt;Some history&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 2022, we introduced in Quarkus a new configuration infrastructure for extensions based on interfaces annotated with &lt;code&gt;@ConfigMapping&lt;/code&gt;.
They were a replacement for the legacy config classes that were used in Quarkus extensions,
which came with several issues and were specific to extensions (you couldn&amp;#8217;t use them in applications).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new &lt;code&gt;@ConfigMapping&lt;/code&gt; infrastructure unified extension and application configuration on the same infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Quarkus 3.19k, released late February this year, we moved all the core extensions to this new infrastructure (except for some classes that were kept for compatibility purposes)
and deprecated the legacy config classes support, together with dropping close to all the existing config classes: we kept a few for compatibility reasons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The extension annotation processor was also modified to require a specific option &lt;code&gt;-AlegacyConfigRoot=true&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plan has always been to sunset the legacy config classes so that we could remove all the machinery related to it,
and offer a single unified configuration mechanism.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;current-state&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#current-state&quot;&gt;&lt;/a&gt;Current state&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The current state of the public Quarkus ecosystem is the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;All the Core extensions are using the new &lt;code&gt;@ConfigMapping&lt;/code&gt;-based infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All the Quarkiverse extensions have been updated to use the new &lt;code&gt;@ConfigMapping&lt;/code&gt;-based infrastructure (except for &lt;code&gt;quarkus-logging-json&lt;/code&gt; but we have a &lt;a href=&quot;https://github.com/quarkiverse/quarkus-logging-json/pull/345&quot;&gt;pull request ready&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some other extensions participating to the Ecosystem CI have also been updated such as &lt;a href=&quot;https://persistence.blazebit.com/&quot;&gt;Blaze-Persistence&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We know some of you also develop custom extensions so we highly recommend moving your custom extensions to &lt;code&gt;@ConfigMapping&lt;/code&gt; as soon as possible, if not already done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find more information about it in &lt;a href=&quot;https://quarkus.io/guides/writing-extensions#configuration&quot;&gt;our documentation&lt;/a&gt; and a ton of examples in the &lt;a href=&quot;https://github.com/search?q=repo%3Aquarkusio%2Fquarkus%20%40ConfigMapping&amp;amp;type=code&quot;&gt;Quarkus Core repository&lt;/a&gt; or the &lt;a href=&quot;https://github.com/search?q=org%3Aquarkiverse+%40ConfigMapping&amp;amp;type=code&quot;&gt;Quarkiverse extensions&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any questions while migrating, please ask them in &lt;a href=&quot;https://github.com/quarkusio/quarkus/discussions/categories/q-a&quot;&gt;GitHub Discussions&lt;/a&gt;, we will be happy to help.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;coming-in-3-25&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#coming-in-3-25&quot;&gt;&lt;/a&gt;Coming in 3.25&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 3.25, we will throw an error when the extension annotation processor is used with &lt;code&gt;-AlegacyConfigRoot=true&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;It won&amp;#8217;t be possible to build an extension containing legacy config classes with Quarkus 3.25 anymore.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;coming-in-3-26&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#coming-in-3-26&quot;&gt;&lt;/a&gt;Coming in 3.26&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 3.26, we will remove all support for legacy config classes, meaning they won&amp;#8217;t work anymore.
&lt;strong&gt;If one of the extensions of your application is using any legacy config class, your application won&amp;#8217;t build.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that since 3.19.4, you get a warning if any of the extensions in your application is using legacy config classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will also drop all the compatibility classes we kept until then:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;GlobalDevServicesConfig&lt;/code&gt;: use &lt;code&gt;DevServicesConfig&lt;/code&gt; instead&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;HttpConfiguration&lt;/code&gt;: use &lt;code&gt;VertxHttpConfig&lt;/code&gt; instead&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;HttpBuildTimeConfig&lt;/code&gt;: use &lt;code&gt;VertxHttpBuildTimeConfig&lt;/code&gt; instead&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;feedback-and-questions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#feedback-and-questions&quot;&gt;&lt;/a&gt;Feedback and questions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any feedback or questions regarding this change, please either use &lt;a href=&quot;https://github.com/quarkusio/quarkus/discussions/categories/q-a&quot;&gt;GitHub Discussions&lt;/a&gt; or the &lt;a href=&quot;https://groups.google.com/g/quarkus-dev&quot;&gt;quarkus-dev Google groups&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 03 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/legacy-config-classes-sunsetting/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.24.2 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-24-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.24.2, the first (we skipped 3.24.0) maintenance release for our 3.24 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.24, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.24.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.24&quot;&gt;Quarkus 3.24 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.24.2&quot;&gt;3.24.2&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 02 Jul 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-24-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus and WildFly teams from Red Hat collaborating with Google on launch of Agent2Agent Java SDK</title>
            <link>
                https://quarkus.io/blog/a2a-project-launches-java-sdk/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The agent revolution just took a massive leap forward! Following the
recent landmark &lt;a href=&quot;https://developers.googleblog.com/en/google-cloud-donates-a2a-to-linux-foundation/&quot;&gt;announcement&lt;/a&gt; that Google has donated the Agent2Agent
(A2A) protocol to the Linux Foundation, we‚Äôre thrilled to announce the
launch of the &lt;a href=&quot;https://github.com/a2aproject/a2a-java&quot;&gt;A2A Java SDK&lt;/a&gt;, created by the WildFly and Quarkus teams in close collaboration, and now contributed to the official A2A project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;a-new-era-under-linux-foundation-stewardship&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-new-era-under-linux-foundation-stewardship&quot;&gt;&lt;/a&gt;A New Era Under Linux Foundation Stewardship&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://a2aproject.github.io/A2A/latest/specification&quot;&gt;A2A&lt;/a&gt; protocol‚Äôs transition to the Linux Foundation represents more
than just a change of governance: it‚Äôs a commitment to vendor-neutral,
community-driven innovation. Similar how WildFly and Quarkus both recently joined the CommonHaus foundation. This ensures that A2A, as a critical interoperability
standard, remains open and accessible to all. With more than 100
companies now supporting the protocol, we‚Äôre witnessing the formation of
what industry leaders are calling &amp;#8220;an open, interoperable Internet of
Agents.&amp;#8221;
With the A2A Java SDK now part of this movement, enterprise developers can participate in this open agent ecosystem from day one.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-java-sdk-matters&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-java-sdk-matters&quot;&gt;&lt;/a&gt;Why Java SDK Matters&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here‚Äôs where things get exciting from a technical perspective: &lt;strong&gt;true
polyglot agent ecosystems&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The agent landscape has been fragmented, with Python dominating AI/ML
workflows, JavaScript powering web-based agents, and Java serving as the
backbone of enterprise backend systems. Siloed development across language ecosystems has held back the true potential of agentic applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our Java SDK shatters these barriers by implementing the A2A protocol
specification natively in Java, enabling:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enterprise-grade agent integration&lt;/strong&gt; with existing Java
infrastructure&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Seamless interoperability&lt;/strong&gt; between Java agents and those written in
Python, JavaScript, or any A2A-compatible language with
well-tested enterprise capabilities (including observability, security&amp;#8230;&amp;#8203;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And you know what? Writing agents in Java is now as easy as writing&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;1-a-class-that-creates-an-a2a-agent-card&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1-a-class-that-creates-an-a2a-agent-card&quot;&gt;&lt;/a&gt;1. A class that creates an A2A Agent Card&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;import io.a2a.spec.AgentCapabilities;
import io.a2a.spec.AgentCard;
import io.a2a.spec.AgentSkill;
import io.a2a.spec.PublicAgentCard;
...

@ApplicationScoped
public class WeatherAgentCardProducer {

    @Produces
    @PublicAgentCard
    public AgentCard agentCard() {
        return new AgentCard.Builder()
                .name(&quot;Weather Agent&quot;)
                .description(&quot;Helps with weather&quot;)
                .url(&quot;http://localhost:10001&quot;)
                .version(&quot;1.0.0&quot;)
                .capabilities(new AgentCapabilities.Builder()
                        .streaming(true)
                        .pushNotifications(false)
                        .stateTransitionHistory(false)
                        .build())
                .defaultInputModes(Collections.singletonList(&quot;text&quot;))
                .defaultOutputModes(Collections.singletonList(&quot;text&quot;))
                .skills(Collections.singletonList(new AgentSkill.Builder()
                        .id(&quot;weather_search&quot;)
                        .name(&quot;Search weather&quot;)
                        .description(&quot;Helps with weather in city, or states&quot;)
                        .tags(Collections.singletonList(&quot;weather&quot;))
                        .examples(List.of(&quot;weather in LA, CA&quot;))
                        .build()))
                .build();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-a-class-that-creates-an-a2a-agent-executor&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2-a-class-that-creates-an-a2a-agent-executor&quot;&gt;&lt;/a&gt;2. A class that creates an A2A Agent Executor&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;import io.a2a.server.agentexecution.AgentExecutor;
import io.a2a.server.agentexecution.RequestContext;
import io.a2a.server.events.EventQueue;
import io.a2a.server.tasks.TaskUpdater;
import io.a2a.spec.JSONRPCError;
import io.a2a.spec.Message;
import io.a2a.spec.Part;
import io.a2a.spec.Task;
import io.a2a.spec.TaskNotCancelableError;
import io.a2a.spec.TaskState;
import io.a2a.spec.TextPart;
...

@ApplicationScoped
public class WeatherAgentExecutorProducer {

    @Inject
    WeatherAgent weatherAgent;

    @Produces
    public AgentExecutor agentExecutor() {
        return new WeatherAgentExecutor(weatherAgent);
    }

    private static class WeatherAgentExecutor implements AgentExecutor {

        private final WeatherAgent weatherAgent;

        public WeatherAgentExecutor(WeatherAgent weatherAgent) {
            this.weatherAgent = weatherAgent;
        }

        @Override
        public void execute(RequestContext context, EventQueue eventQueue) throws JSONRPCError {
            TaskUpdater updater = new TaskUpdater(context, eventQueue);

            // mark the task as submitted and start working on it
            if (context.getTask() == null) {
                updater.submit();
            }
            updater.startWork();

            // extract the text from the message
            String userMessage = extractTextFromMessage(context.getMessage());

            // call the weather agent with the user&apos;s message
            String response = weatherAgent.chat(userMessage);

            // create the response part
            TextPart responsePart = new TextPart(response, null);
            List&amp;lt;Part&amp;lt;?&amp;gt;&amp;gt; parts = List.of(responsePart);

            // add the response as an artifact and complete the task
            updater.addArtifact(parts, null, null, null);
            updater.complete();
        }

        @Override
        public void cancel(RequestContext context, EventQueue eventQueue) throws JSONRPCError {
            Task task = context.getTask();

            if (task.getStatus().state() == TaskState.CANCELED) {
                // task already cancelled
                throw new TaskNotCancelableError();
            }

            if (task.getStatus().state() == TaskState.COMPLETED) {
                // task already completed
                throw new TaskNotCancelableError();
            }

            // cancel the task
            TaskUpdater updater = new TaskUpdater(context, eventQueue);
            updater.cancel();
        }

        private String extractTextFromMessage(Message message) {
            StringBuilder textBuilder = new StringBuilder();
            if (message.getParts() != null) {
                for (Part part : message.getParts()) {
                    if (part instanceof TextPart textPart) {
                        textBuilder.append(textPart.getText());
                    }
                }
            }
            return textBuilder.toString();
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pretty straightforward, right? The SDK provides all the necessary
components to create agent cards, handle agent execution, and manage
communication between agents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note: In future some of this boiler plate code we expect will be simplified by Quarkus and other frameworks using the A2A Java SDK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And when it comes to client-side development, it&amp;#8217;s even easier. The SDK
includes a simple A2A client that allows you to interact with A2A agents
using the A2A protocol. This client abstracts away the complexities of
the protocol, making it easy to send messages, receive responses, and
manage agent interactions. Creating an A2A client in Java is as simple as:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;1-create-an-a2a-client&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1-create-an-a2a-client&quot;&gt;&lt;/a&gt;1. Create an A2A client&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;// Create an A2AClient (the URL specified is the server agent&apos;s URL, be sure to replace it with the actual URL of the A2A server you want to connect to)
A2AClient client = new A2AClient(&quot;http://localhost:1234&quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-send-a-message-to-the-a2a-server-agent&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2-send-a-message-to-the-a2a-server-agent&quot;&gt;&lt;/a&gt;2. Send a message to the A2A server agent&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;// Send a text message to the A2A server agent
Message message = A2A.toUserMessage(&quot;tell me a joke&quot;); // the message ID will be automatically generated for you
MessageSendParams params = new MessageSendParams.Builder()
        .message(message)
        .build();
SendMessageResponse response = client.sendMessage(params);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;A2A#toUserMessage&lt;/code&gt; will automatically generate a message ID
for you when creating the &lt;code&gt;Message&lt;/code&gt; if you don‚Äôt specify it. You can
also explicitly specify a message ID like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;Message message = A2A.toUserMessage(&quot;tell me a joke&quot;, &quot;message-1234&quot;); // messageId is message-1234&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the SDK also provides a convenient way to handle task management,
allowing you to create, get the current state, and cancel tasks with ease. This is
especially useful for managing long-running operations or coordinating
complex workflows between multiple agents. You can find more details
about task management and many other features in the &lt;strong&gt;&lt;a href=&quot;https://github.com/a2aproject/a2a-java&quot;&gt;A2A Java SDK&lt;/a&gt;&lt;/strong&gt; repository&amp;#8217;s.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You just want more code? Are you interested to see interoperability in action? Explore our
&lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/multi_language/python_and_java_multiagent&quot;&gt;multi-language
sample implementation&amp;#44;&lt;/a&gt; which demonstrates how Python and Java
agents collaborate seamlessly. See this picture for a bird-eye overview,
and checkout the code for more insights&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/a2a-announce/a2a-agentic.png&quot; alt=&quot;a2a agentic&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;technical-excellence-the-mutiny-zero-advantage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#technical-excellence-the-mutiny-zero-advantage&quot;&gt;&lt;/a&gt;Technical Excellence: The Mutiny-Zero Advantage&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And if you need your agent to be reactive, don&amp;#8217;t worry about the dependencies you are adding, because
the Java SDK leverages &lt;strong&gt;mutiny-zero&lt;/strong&gt; as its reactive foundation, a
decision that reflects our commitment to framework-agnostic excellence.
&lt;a href=&quot;https://smallrye.io/smallrye-mutiny-zero/latest/&quot;&gt;Mutiny Zero&lt;/a&gt; is a minimal API for creating reactive streams-compliant
publishers that weighs less than 50K and have &lt;strong&gt;zero&lt;/strong&gt; external dependencies
beyond the Reactive Streams API. This architecture delivers several
compelling advantages:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;No Vendor Lock-in&lt;/strong&gt;: No specific technology commitments for your
agents.&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lightweight Performance&lt;/strong&gt;: Faster startups, reduced resource
consumption.&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Maximum Compatibility&lt;/strong&gt;: Seamless integration with existing Java
reactive ecosystems.&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Future-Proof Design&lt;/strong&gt;: Ready for Java‚Äôs modern Flow APIs, backward
compatible.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This reactive foundation ensures your Java agents can handle
high-throughput, low-latency agent-to-agent communications while
remaining lightweight and composable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;community-driven-innovation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#community-driven-innovation&quot;&gt;&lt;/a&gt;Community-Driven Innovation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What started as an external contribution has now become an official part
of the A2A project repository, showcasing how the ecosystem can rapidly
evolve through diverse contributions. This is precisely the kind of
collaborative development that will accelerate A2A adoption and
innovation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ready to dive in? Here‚Äôs your roadmap:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Explore the SDK&lt;/strong&gt;: Visit
&lt;a href=&quot;https://github.com/a2aproject/a2a-java&quot;&gt;github.com/a2aproject/a2a-java&lt;/a&gt;
to examine the implementation&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Study Real Examples&lt;/strong&gt;: Check out the
&lt;a href=&quot;https://github.com/a2aproject/a2a-samples/tree/main/samples/multi_language/python_and_java_multiagent&quot;&gt;multi-language
samples&lt;/a&gt; to see interoperability in action&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Join the Community&lt;/strong&gt;: Connect with fellow developers in the A2A
ecosystem&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Start Building&lt;/strong&gt;: Begin prototyping your first multi-language agent
team&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-bigger-picture-collaborative-intelligence&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-bigger-picture-collaborative-intelligence&quot;&gt;&lt;/a&gt;The Bigger Picture: Collaborative Intelligence&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The A2A protocol aims to break down the silos that currently limit the
potential of AI infuse applications by providing a common language for
AI agents to discover each other‚Äôs capabilities, securely exchange
information, and coordinate complex tasks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Java now joining Python and JavaScript in the A2A ecosystem, we‚Äôre
building towards a future where intelligence is truly collaborative,
where the most sophisticated AI systems are assembled from specialized
agents, each optimized for specific tasks but unified through
standardized communication protocols.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This Java SDK launch is just the beginning. The A2A project under Linux
Foundation stewardship is positioned for rapid expansion, with
additional language implementations, enhanced security features, and
enterprise-grade tooling on the horizon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Your contributions matter&lt;/strong&gt;. Whether you‚Äôre fixing bugs, adding
features, creating examples, or building integrations with other frameworks ‚Äî every commithelps build this collaborative future.
The agent revolution is here, and with the A2A Java SDK, the entire Java
ecosystem can participate. Let‚Äôs build something amazing together! üöÄ&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Fri, 27 Jun 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/a2a-project-launches-java-sdk/
            </guid>
            
            
            
            <author>Stefano Maestri (https://twitter.com/maeste)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.24 - Dev Assistant, Hibernate ORM 7, Hibernate Validator 9...</title>
            <link>
                https://quarkus.io/blog/quarkus-3-24-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.24.
It comes with major version upgrades to major components and a brand new feature: the Dev Assistant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47756&quot;&gt;#47756&lt;/a&gt; - Introduce the Assistant&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/41310&quot;&gt;#41310&lt;/a&gt; - Upgrade to Hibernate ORM 7.0, Hibernate Reactive 3.0, and Hibernate Search 8.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/42292&quot;&gt;#42292&lt;/a&gt; - Upgrade to Hibernate Validator 9.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47108&quot;&gt;#47108&lt;/a&gt; - Upgrade to Kafka Client 4.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47830&quot;&gt;#47830&lt;/a&gt; - Add OIDC Health Check&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.24, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.24.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.24&quot;&gt;Quarkus 3.24 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dev-assistant&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dev-assistant&quot;&gt;&lt;/a&gt;Dev Assistant&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We all love Quarkus&apos; Dev UI and Quarkus 3.24 paves the way for major improvements to the Dev UI through a brand new feature: the Dev Assistant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Assistant is a new extension point to provide features assisting you in your daily coding:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Generate clients from your OpenAPI specification&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate additional test data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#8230;&amp;#8203; sky is the limit!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Assistant can offer features that are backed by AI, but isn&amp;#8217;t limited to it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have been cooking an extension leveraging the Assistant feature for a while: &lt;a href=&quot;https://github.com/quarkiverse/quarkus-chappie&quot;&gt;Quarkus Chappie&lt;/a&gt;.
You can already add it to your projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But don&amp;#8217;t see it as the end of things:
you can develop your own Assistant features in your extensions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/Q88NQp_Uul4?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hibernate-orm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hibernate-orm&quot;&gt;&lt;/a&gt;Hibernate ORM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hibernate ORM was updated to &lt;a href=&quot;https://hibernate.org/orm/releases/7.0/&quot;&gt;7.0&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a major version and it comes with new features and significant changes that are presented in more details in a &lt;a href=&quot;https://quarkus.io/blog/hibernate7-on-quarkus/&quot;&gt;dedicated blog post&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please also have a look to the dedicated section of our &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.24#jakarta-persistence-hibernate-orm&quot;&gt;migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hibernate ORM 7.0 is an implementation of &lt;a href=&quot;https://jakarta.ee/specifications/persistence/3.2/&quot;&gt;Jakarta Persistence 3.2&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hibernate-reactive&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hibernate-reactive&quot;&gt;&lt;/a&gt;Hibernate Reactive&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hibernate Validator was updated to &lt;a href=&quot;https://hibernate.org/reactive/releases/3.0/&quot;&gt;3.0&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hibernate-search&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hibernate-search&quot;&gt;&lt;/a&gt;Hibernate Search&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hibernate Search was updated to &lt;a href=&quot;https://hibernate.org/search/releases/8.0/&quot;&gt;8.0&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hibernate-validator&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hibernate-validator&quot;&gt;&lt;/a&gt;Hibernate Validator&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hibernate Validator was updated to &lt;a href=&quot;https://hibernate.org/validator/releases/9.0/&quot;&gt;9.0&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hibernate Validator 9.0 is an implementation of &lt;a href=&quot;https://jakarta.ee/specifications/bean-validation/3.1/&quot;&gt;Jakarta Validation 3.1&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;kafka-client&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kafka-client&quot;&gt;&lt;/a&gt;Kafka Client&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Kafka Client has been updated to 4.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;oidc-health-check&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#oidc-health-check&quot;&gt;&lt;/a&gt;OIDC health check&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.24 offers a health check for OIDC that allows to check your Quarkus application is able to connect to your OIDC server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been upgraded to 3.24.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.24.0.CR1&quot;&gt;3.24.0.CR1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.24.0&quot;&gt;3.24.0&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.24.1&quot;&gt;3.24.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1092 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.24 release, thanks to Alexandre Dutra, Alexey Loubyansky, appiepollo14, Ashish Ranjan, Bill Burke, Bruno Baptista, Clement Escoffier, David M. Lloyd, Davide D&amp;#8217;Alto, Erik Mattheis, Foivos Zakkak, Fouad Almalki, gbourant, George Gastaldi, Georgios Andrianakis, Guillaume Smet, Holly Cummins, Inaki Villar, JoaÃÉo Lopes, Julien Ponge, Katia Aresti, Kevin Wooten, Ladislav Thon, Lars, Lukas Schmitt, Marc Nuri, Marco Belladelli, marko-bekhta, Martin Barto≈°, Martin Kouba, Martin Panzer, Matej Novotny, melloware, Michael Edgar, Michal Mal√©≈ô, Michal Vav≈ô√≠k, Nicholas Hassan, nort3x, Ozan Gunalp, patriot1burke, Peter Palaga, Phillip Kr√ºger, Robert Stupp, Roberto Cortez, Rostislav Svoboda, Sebastian Vogl, Sergey Beryozkin, Stefan Schm√∂ller, Steve Hawkins, Stuart Douglas, St√©phane √âpardaud, Teymur Babayev, Tim van der Lippe, Vincent Potucek, Volodymyr, xstefank, Yahya Berbeche, and Yoann Rodi√®re.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 25 Jun 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-24-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Hibernate ORM 7 on Quarkus: each new version brings a better database experience</title>
            <link>
                https://quarkus.io/blog/hibernate7-on-quarkus/
            </link>
            <description>
                &lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hibernate ORM is improving at a very fast speed, and so is its integration with Quarkus, as great database access is a key part of the Quarkus experience.
The latest Quarkus 3.24 release upgrades Hibernate to version 7, a major upgrade that implies some breaking changes, and thus will require paying attention to the &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/7.0/migration-guide/migration-guide.html&quot;&gt;migration guide&lt;/a&gt; when upgrading.
Developers working on Hibernate and Quarkus are constantly collaborating, so here‚Äôs a quick peek at what happened over the past few months and at what Quarkus users might expect in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;license-and-governance-updates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#license-and-governance-updates&quot;&gt;&lt;/a&gt;License and Governance Updates&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both Quarkus and Hibernate are now projects of the &lt;a href=&quot;https://www.commonhaus.org&quot;&gt;Commonhaus Foundation&lt;/a&gt;, a non-profit organization dedicated to creating a collaborative environment for open-source libraries.
Since the upgrade to Hibernate 7, Quarkus and all Hibernate libraries now share the same open-source license: the &lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apache License Version 2.0&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hibernate-orm-7-0-updates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hibernate-orm-7-0-updates&quot;&gt;&lt;/a&gt;Hibernate ORM 7.0 Updates&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new version of Hibernate brings better performance and &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/7.0/whats-new/whats-new.html&quot;&gt;all kinds of new features&lt;/a&gt;, some of which improve the developer experience, such as &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/7.0/whats-new/whats-new.html#session-find-multiple&quot;&gt;using &lt;code&gt;findMultiple()&lt;/code&gt; and &lt;code&gt;getMultiple()&lt;/code&gt;&lt;/a&gt; to efficiently fetch entities in batches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;support-for-jakarta-data&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#support-for-jakarta-data&quot;&gt;&lt;/a&gt;Support for Jakarta Data&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://jakarta.ee/specifications/data/1.0/jakarta-data-1.0&quot;&gt;Jakarta Data&lt;/a&gt; is a simpler way to write data-accessing applications, and it‚Äôs been supported in Quarkus since &lt;a href=&quot;https://in.relation.to/2024/11/04/data-in-quarkus/&quot;&gt;November 2024&lt;/a&gt;. We suggest giving it a try, as it enables a very quick and easy implementation of the DAO/repository patterns, without any boilerplate code and in a type-safe manner. To get started, simply include the &lt;code&gt;jakarta.data:jakarta.data-api&lt;/code&gt; dependency with the latest version of Quarkus, i.e.:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
       &amp;lt;groupId&amp;gt;jakarta.data&amp;lt;/groupId&amp;gt;
       &amp;lt;artifactId&amp;gt;jakarta.data-api&amp;lt;/artifactId&amp;gt;
 &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here‚Äôs an example of how a simple repository can be written:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@Repository
public interface Library {

    @Find
    Optional&amp;lt;Book&amp;gt; byIsbn(String isbn);

    @Query(&quot;&quot;&quot;
            select b.isbn, b.title, listagg(a.name, &apos; &amp;amp; &apos;)
            from Book b join b.authors a
            group by b
            order by b.isbn
            &quot;&quot;&quot;)
    List&amp;lt;Summary&amp;gt; summarize();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This topic deserves a deeper dive, so let us know if you&amp;#8217;re interested, as we could provide more content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the meantime, you can always refer to the &lt;a href=&quot;https://quarkus.io/version/main/guides/hibernate-orm#jakarta-data-2&quot;&gt;dedicated Quarkus guide&lt;/a&gt; to get started quickly, and to the &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/7.0/repositories/html_single/Hibernate_Data_Repositories.html&quot;&gt;corresponding documentation in Hibernate ORM&lt;/a&gt; for more advanced usage.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;new-restrictions-api&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-restrictions-api&quot;&gt;&lt;/a&gt;New Restrictions API&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the deprecation of the old Hibernate Criteria API, developers were still missing its simplicity, so the Hibernate team introduced a new &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/7.0/introduction/html_single/Hibernate_Introduction.html#restrictions-and-ordering&quot;&gt;Restrictions API&lt;/a&gt; that even has new features, such as the possibility to further restrict an already-written JPQL/HQL query.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;List&amp;lt;Book&amp;gt; books =
    SelectionSpecification.create(Book.class,
        &quot;&quot;&quot;
            from Book where discontinued = false
        &quot;&quot;&quot;)
        .restrict(Restriction.startsWith(Book_.title, &quot;hibernate&quot;))
        .sort(Order.desc(Book_.title))
        .createQuery(session)
        .setPage(Page.first(50))
        .getResultList();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This feature can also be used with &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/7.0/repositories/html_single/Hibernate_Data_Repositories.html#dynamic-restrictions&quot;&gt;Hibernate Data Repositories&lt;/a&gt; (the Hibernate implementation of the Jakarta Data API), and create a repository that allows filtering without having to write any JPQL/HQL code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@Find
List&amp;lt;Book&amp;gt; books(Restriction&amp;lt;Book&amp;gt; restriction,
                 Order&amp;lt;Book&amp;gt; order);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When user will call the method, they can pass the &lt;code&gt;Restriction&lt;/code&gt; objects to filter the wanted book.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;var books =
       library.books(Restriction.contains(Book_.title, &quot;Hibernate&quot;),
                     Order.of(_Book.title.ascIgnoreCase(),
                              _Book.isbn.asc()));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hibernate-reactive-together-with-hibernate-orm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hibernate-reactive-together-with-hibernate-orm&quot;&gt;&lt;/a&gt;Hibernate Reactive together with Hibernate ORM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A long-awaited feature is the ability to &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/13425&quot;&gt;mix Hibernate ORM and Hibernate Reactive extensions&lt;/a&gt; in the same Quarkus application. Without this feature, making the two extensions coexist required workarounds that are now unnecessary: since Quarkus 3.24, it&amp;#8217;s now possible to mix the two.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hibernate Reactive is a powerful reactive data access abstraction, but its advantages vary per project. Instead of dictating usage, we now enable users to experiment easily with both Hibernate ORM and Reactive. Projects using Hibernate ORM can add the Reactive extension, create reactive resources reusing mapped entities, run tests and benchmarks, and determine if it suits their specific needs and scalability goals. While using both, it‚Äôs easier to choose the most suitable approach for different use cases. Another benefit is that it makes it easier to migrate in small steps from one to the other as necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Panache users will also have this possibility starting from &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/46096&quot;&gt;Panache 2.0&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;injection-of-the-schemamanager&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#injection-of-the-schemamanager&quot;&gt;&lt;/a&gt;Injection of the SchemaManager&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Hibernate Schema Manager is a powerful tool to generate DDL scripts out of Java objects. Its power is now available to be used in Quarkus via dependency injection. This is particularly useful when &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/7.0/introduction/html_single/Hibernate_Introduction.html#testing&quot;&gt;writing tests&lt;/a&gt; letting you programmatically control when to do schema export, schema validation, data cleanup, and schema cleanup.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-future&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-future&quot;&gt;&lt;/a&gt;The Future&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The teams have many plans for the future of these important projects: the DevUI of Quarkus will be enhanced with improvements to the developer experience, with the possibility of &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/39584&quot;&gt;executing arbitrary HQL queries&lt;/a&gt; to try out the syntax and experiment with test data and &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/43723&quot;&gt;generating migration scripts on the fly&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/hibernate7/console.gif&quot; alt=&quot;console&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We‚Äôre working on improving the Hibernate Reactive extension as well, by providing support for &lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/48007&quot;&gt;Named Data Sources and Named Persistence Units&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, as part of giving a better experience for the user, the Quarkus and Hibernate teams constantly collaborate on performance and efficiency improvements. For example, an optimization that &lt;a href=&quot;https://hibernate.atlassian.net/browse/HHH-18326&quot;&gt;avoids the need for an &lt;code&gt;IdentityHashMap&lt;/code&gt; to track persistence entities&lt;/a&gt; improved the performance by &lt;a href=&quot;https://github.com/hibernate/hibernate-orm-benchmark/pull/15&quot;&gt;8% while running a simple query of 100-1000 immutable entities&lt;/a&gt;, end even more when dealing with persistent collections.
And that&amp;#8217;s just &lt;em&gt;one&lt;/em&gt; improvement among many, and not the last one: even bigger performance improvements are expected in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/guides/update-quarkus&quot;&gt;Take a look at the new release&lt;/a&gt; and let us know what you think!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 25 Jun 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/hibernate7-on-quarkus/
            </guid>
            
            
            
            <author>Luca Molteni (https://twitter.com/volothamp)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.23.4 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-23-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.23.4, the third (we skipped 3.23.1) maintenance release for our 3.23 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.23, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.23.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.23&quot;&gt;Quarkus 3.23 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.23.4&quot;&gt;3.23.4&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-23-4-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #57 - June</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-57/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus MCP Server is blazing a trail as the first Java MCP server with Streamable HTTP support‚Äîunlocking new possibilities for developers. Read more about in the blog post &quot;Quarkus MCP Server: The First Java Server SDK to Support Streamable HTTP!&quot; by Max Rydahl Andersen. Learn how Quarkus MCP Client can use access tokens to access secure MCP servers in Sergey Beryozkin&amp;#8217;s blog post &quot;Use Quarkus MCP client to access secure MCP HTTP servers&quot;. Leverage ChatGPT and existing Maven skills, to rapidly develop and deploy a new API with Quarkus. Ease the learning curve and achieving quick validation on Heroku. See how in &quot;How To Introduce a New API Quickly Using Quarkus and ChatGPT&quot; by John Vester. Explore LLM guardrails, why they matter, and how you can effectively implement them to ensure safe and trustworthy AI interactions in &quot;Ensuring Safe and Reliable AI Interactions with LLM Guardrails&quot; by Brian Vermeer. Learn about Prasbanth&amp;#8217;s first experience to see how the Java ecosystem is adapting to the world of cloud-native applications ‚Äî and how that experience left him motivated to continue this journey in &quot;From Traditional Java to Cloud-Native with Quarkus: My First Boston Java Users Meetup Experience&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/57/&quot;&gt;Newsletter #57: June&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 12 Jun 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-57/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.23.3 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-23-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.23.3, the second (we skipped 3.23.1) maintenance release for our 3.23 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.23, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.23.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.23&quot;&gt;Quarkus 3.23 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.23.3&quot;&gt;3.23.3&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 11 Jun 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-23-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.23.2 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-23-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.23.2, the first (we skipped 3.23.1) maintenance release for our 3.23 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.23, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.23.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.23&quot;&gt;Quarkus 3.23 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.23.1&quot;&gt;3.23.1&lt;/a&gt; and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.23.2&quot;&gt;3.23.2&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-23-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.23 - Named datasources for Hibernate Reactive, OIDC bearer step up authentication</title>
            <link>
                https://quarkus.io/blog/quarkus-3-23-0-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.23.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;3.23 comes with a lot of small improvements and some bugfixes together with a couple of new features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47631&quot;&gt;#47631&lt;/a&gt; - Enable named data sources for Hibernate Reactive&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47445&quot;&gt;#47445&lt;/a&gt; - OIDC: Add bearer token step up authentication&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.23, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.23.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.23&quot;&gt;Quarkus 3.23 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;named-data-sources-for-hibernate-reactive&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#named-data-sources-for-hibernate-reactive&quot;&gt;&lt;/a&gt;Named data sources for Hibernate Reactive&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With 3.22, we started the journey of bringing the Hibernate Reactive extension up to par with the Hibernate ORM one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 3.23, it&amp;#8217;s now possible to point Hibernate Reactive to a named datasource.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next step will be to have support for multiple named persistence units for Hibernate Reactive and hopefully it will arrive in 3.24.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;oidc-bearer-step-up-authentication&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#oidc-bearer-step-up-authentication&quot;&gt;&lt;/a&gt;OIDC bearer step up authentication&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.23 introduces support for the OAuth 2.0 Step Up Authentication Challenge Protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can learn more about it in the &lt;a href=&quot;https://quarkus.io/guides/security-oidc-bearer-token-authentication#step-up-authentication&quot;&gt;dedicated section&lt;/a&gt; of the OIDC Bearer token authentication guide.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-cxf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-cxf&quot;&gt;&lt;/a&gt;Quarkus CXF&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus CXF 3.23 was released and is now available in &lt;a href=&quot;https://code.quarkus.io/?extension-search=origin:platform%20quarkus-cxf&quot;&gt;Quarkus Platform 3.23&lt;/a&gt;.
Check the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.23.0.html&quot;&gt;Quarkus CXF 3.23.0&lt;/a&gt; and &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.23.1.html&quot;&gt;3.23.1&lt;/a&gt; release notes for more information about what is new in these releases.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been upgraded to 3.23.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.23.0.CR1&quot;&gt;3.23.0.CR1&lt;/a&gt; and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.23.0&quot;&gt;3.23.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1083 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.23 release, thanks to Aditya Thakur, Alexandre Dutra, Alexey Loubyansky, Andrii Denysenko, Andy Damevin, appiepollo14, ayagmar, Bruno Baptista, Clement Escoffier, Fedor Dudinsky, Foivos Zakkak, Fouad Almalki, George Gastaldi, Georgios Andrianakis, Guillaume Smet, Holly Cummins, iedo, Ladislav Thon, Luca Molteni, luca-bassoricci, Lucien Brule, Magnus Gustafsson, Marc Nuri, mariofusco, marko-bekhta, Martin Barto≈°, Martin Kouba, Martin Panzer, Matej Novotny, Matheus Cruz, Max Rydahl Andersen, melloware, Michael Edgar, Michal Vav≈ô√≠k, Michiel Dockx, Mikhail Polivakha, Olivier V, Ozan Gunalp, Peter Palaga, Phillip Kr√ºger, Robert Stupp, Roberto Cortez, Rolfe Dlugy-Hegwer, Rostislav Svoboda, Sebastian Vogl, Sergey Beryozkin, Severin Gehwolf, shjones, Steve Hawkins, Stuart Douglas, Tamas Cservenak, and Yoann Rodi√®re.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 28 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-23-0-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus MCP Server: The First Java Server SDK to Support Streamable HTTP!</title>
            <link>
                https://quarkus.io/blog/streamable-http-mcp/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Model Context Protocol (MCP) is taking the developer world by storm, and now, with its latest spec update: Streamable HTTP support has arrived!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re thrilled to announce that Quarkus MCP Server is the very first Java-based MCP server SDK to embrace this innovation, making it easier than ever for you to build, experiment, and deploy MCP-powered solutions‚Äîwherever you need them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server/releases/tag/1.2.0&quot;&gt;Quarkus MCP Server 1.2&lt;/a&gt; now supports Streamable HTTP alongside &lt;code&gt;stdio&lt;/code&gt; and &lt;code&gt;SSE&lt;/code&gt; transports. This enables new possibilities for connecting your MCP servers to mobile apps and cloud services. While the implementation is fully functional, some advanced features like &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26/basic/transports#resumability-and-redelivery&quot;&gt;Resumability and Redelivery&lt;/a&gt; are planned for future releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-streamable-http-matters&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-streamable-http-matters&quot;&gt;&lt;/a&gt;Why Streamable HTTP Matters&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Streamable HTTP is the approach MCP spec have taken for real-time, efficient, and scalable communication between clients and servers. It opens the door to new integrations and user experiences, especially for platforms and devices where traditional transports like SSE or stdio aren&amp;#8217;t ideal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And now, thanks to Quarkus MCP Server, Java developers are at the forefront of this evolution. Whether you&amp;#8217;re building AI assistants, developer tools, or next-gen chatbots, Streamable HTTP gives you the flexibility to reach more users, faster.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;easy-upgrade&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#easy-upgrade&quot;&gt;&lt;/a&gt;Easy upgrade&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ready to try it out? Just update your Maven dependency to the latest Quarkus MCP Server SSE transport:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.mcp&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-mcp-server-sse&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s it! You&amp;#8217;re now equipped to serve Streamable HTTP from your Java MCP server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to see how to write your own MCP server? Check out our previous post: &lt;a href=&quot;https://quarkus.io/blog/mcp-server/&quot;&gt;Introducing MCP Servers&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;quarkus-mcp-servers-power-and-simplicity&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-mcp-servers-power-and-simplicity&quot;&gt;&lt;/a&gt;Quarkus MCP Servers: Power and Simplicity&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-servers&quot;&gt;Quarkus MCP Servers project&lt;/a&gt; brings a suite of ready-to-use MCP servers, all built on Quarkus. With version 1.0.0.CR4, streamable HTTP support is baked in‚Äîno extra configuration required. We just updated the dependency, and it was ready to go!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To enable Streamable HTTP, simply launch any server in Quarkus MCP Servers with the &lt;code&gt;--sse&lt;/code&gt; flag:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;jbang jvminsight@mcp-java --sse&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;connecting-clients&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#connecting-clients&quot;&gt;&lt;/a&gt;Connecting Clients&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The default URL for Streamable HTTP is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;http://&amp;lt;your-ip&amp;gt;:8080/mcp/&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(For SSE, use &lt;code&gt;&lt;a href=&quot;http://&amp;lt;your-ip&amp;gt;:8080/mcp/sse&quot; class=&quot;bare&quot;&gt;http://&amp;lt;your-ip&amp;gt;:8080/mcp/sse&lt;/a&gt;&lt;/code&gt; as before.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While Streamable HTTP is still new, some pioneering clients already support it. Notably, the open source iOS app &lt;a href=&quot;https://github.com/daodao97/chatmcp&quot;&quot;&gt;ChatMCP&lt;/a&gt; (available on &lt;a href=&quot;https://testflight.apple.com/join/dCXksFJV&quot;&gt;TestFlight&lt;/a&gt;) and a non-open source version on the &lt;a href=&quot;https://apps.apple.com/dk/app/chatmcp/id6745196560&quot;&gt;iOS App Store&lt;/a&gt; both work seamlessly with MCP and support or even require Streamable HTTP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a quick demo of ChatMCP in action with the jvminsight server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;360&quot; height=&quot;640&quot; src=&quot;https://www.youtube.com/embed/6GomKEMucYs?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;kotlin-lightweight-and-fun&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kotlin-lightweight-and-fun&quot;&gt;&lt;/a&gt;Kotlin: Lightweight and Fun&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus supports both Java and Kotlin, giving you flexibility in how you build your MCP servers. Want to experiment? Here&amp;#8217;s a playful example of a Kotlin MCP server you can run instantly with JBang. It fetches a random image from &lt;a href=&quot;https://picsum.photos/&quot; class=&quot;bare&quot;&gt;https://picsum.photos/&lt;/a&gt; and returns it as a base64-encoded image, as the MCP spec requires.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-kotlin hljs&quot; data-lang=&quot;kotlin&quot;&gt;///usr/bin/env jbang &quot;$0&quot; &quot;$@&quot; ; exit $?

//KOTLIN
//DEPS io.quarkus:quarkus-bom:${quarkus.version:3.20.0}@pom
//DEPS io.quarkiverse.mcp.servers:mcp-server-shared:1.0.0.CR4

import io.quarkiverse.mcp.server.*
import java.net.URL
import java.util.Base64.getEncoder
import kotlin.io.readBytes

class demo {

   @Tool(description = &quot;Get a random picture&quot;)
   fun randomimage(@ToolArg(description = &quot;seed for randomness&quot;) seed: String,
                   @ToolArg(description = &quot;width&quot;, defaultValue = &quot;300&quot;) width: Int,
                   @ToolArg(description = &quot;height&quot;, defaultValue = &quot;300&quot;) height : Int): ImageContent {

      val image = URL(&quot;https://picsum.photos/seed/$seed/$width/$height&quot;).readBytes()

      return ImageContent(
         getEncoder().encodeToString(image),
         &quot;image/jpeg&quot;
      )
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Save this as &lt;code&gt;demo.kt&lt;/code&gt; and run it with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;jbang demo.kt --sse&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now use the &lt;code&gt;randomimage&lt;/code&gt; tool in ChatMCP or any other MCP client that supports Streamable HTTP. It&amp;#8217;s that easy‚Äîand a great way to start experimenting!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Streamable HTTP is an important step for the MCP ecosystem, and Quarkus MCP Server is putting Java developers in the driver&amp;#8217;s seat. Whether you&amp;#8217;re building tools, bots, or entirely new experiences, now&amp;#8217;s the perfect time to dive in and see what you can create.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can&amp;#8217;t wait to see what you build. Try it out, share your feedback, and help shape the future of MCP ‚Äî powered by Quarkus!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Fri, 23 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/streamable-http-mcp/
            </guid>
            
            
            
            <author>Max Rydahl Andersen (https://twitter.com/maxandersen)</author>
            
        </item>
        
        <item>
            <title>Use Quarkus MCP client to access secure MCP HTTP servers</title>
            <link>
                https://quarkus.io/blog/secure-mcp-client/
            </link>
            <description>
                &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MCP servers that use the &lt;em&gt;Streamable HTTP&lt;/em&gt; or HTTP/SSE transports may require MCP client authentication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/&quot;&gt;Getting ready for secure MCP with Quarkus MCP Server&lt;/a&gt; blog post, we explained how to enforce MCP client authentication with the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server&quot;&gt;Quarkus MCP Server&lt;/a&gt; and demonstrated how &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/#mcp-server-devui&quot;&gt;MCP Server DevUI&lt;/a&gt; can use Keycloak access tokens to access the MCP server in dev mode and how &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/#mcp-inspector&quot;&gt;MCP Inspector&lt;/a&gt; and &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/#use-curl-to-access-the-mcp-server&quot;&gt;curl&lt;/a&gt; can use GitHub access tokens to access the MCP server in prod mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, we will explain how &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html&quot;&gt;Quarkus MCP Client&lt;/a&gt; can use access tokens to access secure MCP servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will show how to log in to Quarkus LangChain4j AI &lt;code&gt;Poem Service&lt;/code&gt; application with GitHub OAuth2 and have Google AI Gemini use tools with the help from Quarkus MCP Client that can propagate the GitHub access token to the secure Quarkus MCP Server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;demo-architecture&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#demo-architecture&quot;&gt;&lt;/a&gt;Demo architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_client/poem_service_architecture.png&quot; alt=&quot;Poem Service Architecture&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see in the diagram above, the user logs in into the Quarkus REST &lt;code&gt;Poem Service&lt;/code&gt; application endpoint. To support the user request to create a poem, the &lt;code&gt;Poem Service&lt;/code&gt; uses &lt;code&gt;AI Gemini&lt;/code&gt; and requests &lt;code&gt;MCP Client&lt;/code&gt; to complete a tool call to help &lt;code&gt;AI Gemini&lt;/code&gt; to find out the name of the logged-in user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An essential point is that both &lt;code&gt;Poem Service&lt;/code&gt; and &lt;code&gt;MCP Client&lt;/code&gt; are part of the same single Quarkus REST application that only users who logged in with GitHub can access. The users do not login to &lt;code&gt;MCP Client&lt;/code&gt;, they login to the &lt;code&gt;Poem Service&lt;/code&gt; application, using the &lt;code&gt;MCP client&lt;/code&gt; is an implementation detail of how this application completes the user request.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, this demo does not demonstrate an implementation of the &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization&quot;&gt;MCP Authorization&lt;/a&gt; flow which is primarily of interest to public MCP clients implemented as Single-page applications (SPA), such as as Anthropic Claude, that will be able to initiate a user login into an imported MCP server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This demo shows a typical &lt;code&gt;OAuth2&lt;/code&gt; authorization code flow where a user logs-in to a REST endpoint and authorizes it to access another service on the user&amp;#8217;s behalf. It also strengthens the message about the &lt;a href=&quot;https://quarkus.io/blog/gemini-personal-assistant/#integrated-ai-security&quot;&gt;AI security being an integral part of your application security&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, let&amp;#8217;s temporarily update the diagram by removing the &lt;code&gt;AI Gemini&lt;/code&gt;, replacing &lt;code&gt;MCP Client&lt;/code&gt; with &lt;code&gt;REST Client&lt;/code&gt;, &lt;code&gt;MCP Server&lt;/code&gt; with &lt;code&gt;Poem Creator service&lt;/code&gt; and &lt;code&gt;GitHub&lt;/code&gt; with &lt;code&gt;OAuth2&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_client/typical_oauth2_authorization.png&quot; alt=&quot;Typical OAuth2 Authorization&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will very likely find similarities between this diagram and what you do in your projects. It is the OAuth2 authorization code flow in action: the user logs in to the application and authorizes it to access another service offering a poem creation on the user&amp;#8217;s behalf.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The demo shows that Quarkus MCP Client can work effectively in such architectures by being able to use access tokens acquired during the user login, without you having to write any custom code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are now ready to start working on the &lt;code&gt;Secure MCP Client Server&lt;/code&gt; demo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find the complete project source in the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-sse-client-server&quot;&gt;Quarkus LangChain4j Secure MCP Client Server sample&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-mcp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-mcp-server&quot;&gt;&lt;/a&gt;Step 1 - Create and start MCP server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let&amp;#8217;s create a secure Quarkus MCP SSE server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you already created the MCP server &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/#initial-mcp-server&quot;&gt;as described&lt;/a&gt; in the the &lt;a href=&quot;https://quarkus.io/blog/secure-mcp-sse-server/&quot;&gt;Getting ready for secure MCP with Quarkus MCP Server&lt;/a&gt; blog post, then you will find instructions below familiar and should be able to reuse the project you created earlier with minor updates.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MCP server requires authentication to establish Server-Sent Events (SSE) connection and also when invoking the tools. Additionally, the MCP server endpoint that provides access to tools requires that the security identity has a &lt;code&gt;read:name&lt;/code&gt; permission.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-dependencies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-dependencies&quot;&gt;&lt;/a&gt;MCP server maven dependencies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the following dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.mcp&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-mcp-server-sse&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &amp;lt;version&amp;gt;1.1.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-oidc&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-hibernate-orm-panache&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-jdbc-postgresql&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-mcp-server-sse&lt;/code&gt; is required to support MCP SSE transport.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-oidc&lt;/code&gt; is required to secure access to MCP SSE endpoints. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-hibernate-orm-panache&lt;/code&gt; and &lt;code&gt;quarkus-jdbc-postgresql&lt;/code&gt; are required to support the &lt;a href=&quot;#security-identity-augmentation&quot;&gt;Security Identity Augmentation&lt;/a&gt;. Their versions are defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-tool&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-tool&quot;&gt;&lt;/a&gt;MCP server tool&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s create a tool that can return the name of the currently logged-in user. It can be invoked only if the current MCP request is authenticated but also if the security identity has a &lt;code&gt;read:name&lt;/code&gt; permission:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import io.quarkiverse.mcp.server.TextContent;
import io.quarkiverse.mcp.server.Tool;
import io.quarkus.security.PermissionsAllowed;
import io.quarkus.security.identity.SecurityIdentity;
import jakarta.inject.Inject;

public class UserNameProvider {

    @Inject
    SecurityIdentity securityIdentity;

    @Tool(name = &quot;user-name-provider&quot;, description = &quot;Provides a name of the currently logged-in user&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    @PermissionsAllowed(&quot;read:name&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    TextContent provideUserName() {
        return new TextContent(securityIdentity.getPrincipal().getName()); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Provide a tool that can return the name of the current user.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Require authenticated tool access with an additional authorization &lt;code&gt;read:name&lt;/code&gt; permission constraint - yes, the only difference with an unauthenticated MCP server tool is &lt;code&gt;@PermissionsAllowed(&quot;read:name&quot;)&lt;/code&gt;, that&amp;#8217;s it!
See also how the main MCP SSE endpoint is secured in the &lt;a href=&quot;#mcp-server-configuration&quot;&gt;MCP Server Configuration&lt;/a&gt; section below.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use the injected &lt;code&gt;SecurityIdentity&lt;/code&gt; to return the current user&amp;#8217;s name. Alternatively, it can be acquired from the injected &lt;code&gt;quarkus.oidc.UserInfo&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;security-identity-augmentation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#security-identity-augmentation&quot;&gt;&lt;/a&gt;Security Identity Augmentation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To meet the &lt;code&gt;@PermissionsAllowed(&quot;read:name&quot;)&lt;/code&gt; authorization constraint, the security identity created after verifying the GitHub access token must be augmented to have a &lt;code&gt;read:name&lt;/code&gt; permission.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The demo expects that a database has a record with a GitHub account name and the assigned permission. The security identity augmentor uses the identity name to retrieve this record and enhance the identity with the discovered permission.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s see how this rather complex task can be easily achieved in Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, we create a Panache entity that keeps the account name and permission values:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import io.quarkus.hibernate.orm.panache.PanacheEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;

@Entity
public class Identity extends PanacheEntity {
    @Column(unique = true)
    public String name;
    public String permission;

    public static Identity findByName(String name) { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        return find(&quot;name&quot;, name).firstResult();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Utility method to find an identity record with a matching GitHub account name.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Second, we create an &lt;code&gt;import.sql&lt;/code&gt; script to have a demo record added to the database:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;INSERT INTO identity(id, name, permission) VALUES (1, &apos;${user.name}&apos;, &apos;read:name&apos;); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Insert a demo record. You will provide your GitHub account name when starting MCP server.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, we create a security identity augmentor:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import io.quarkus.security.identity.AuthenticationRequestContext;
import io.quarkus.security.identity.SecurityIdentity;
import io.quarkus.security.identity.SecurityIdentityAugmentor;
import io.quarkus.security.runtime.QuarkusSecurityIdentity;
import io.smallrye.mutiny.Uni;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.context.control.ActivateRequestContext;
import jakarta.inject.Inject;

@ApplicationScoped
public class SecurityIdentityPermissionAugmentor implements SecurityIdentityAugmentor { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    @Inject
    HibernateBlockingAugmentor hibernateBlockingAugmentor;

    @Override
    public Uni&amp;lt;SecurityIdentity&amp;gt; augment(SecurityIdentity identity, AuthenticationRequestContext context) {
        return context.runBlocking(() -&amp;gt; hibernateBlockingAugmentor.augment(identity)); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    }

    @ApplicationScoped
    static class HibernateBlockingAugmentor {

        @ActivateRequestContext
        public SecurityIdentity augment(SecurityIdentity securityIdentity) {
            Identity identity = Identity.findByName(securityIdentity.getPrincipal().getName()); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;

            QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder(securityIdentity); &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
            return builder.addPermissionAsString(identity.permission).build(); &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Custom &lt;code&gt;SecurityIdentityAugmentor&lt;/code&gt; can augment the already verified security identity.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Run the augmentation in a blocking mode because it requires access to the database.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Find the recorded &lt;code&gt;Identity&lt;/code&gt; matching the current user&amp;#8217;s name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Initialize a security identity builder from the current identity.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add the permission allocated to this user and create an updated &lt;code&gt;SecurityIdentity&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is all, the augmentation step is done with a few lines of code only.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-configuration&quot;&gt;&lt;/a&gt;MCP Server Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s configure our secure MCP server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.mcp.server.traffic-logging.enabled=true &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
quarkus.mcp.server.traffic-logging.text-limit=1000

quarkus.http.auth.permission.authenticated.paths=/mcp/sse &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
quarkus.http.auth.permission.authenticated.policy=authenticated

quarkus.oidc.provider=github &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
quarkus.oidc.application-type=service &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

quarkus.hibernate-orm.database.generation=drop-and-create &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.sql-load-script=import.sql

quarkus.http.port=8081 &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enable MCP server traffic logging&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enforce an authenticated access to the main MCP SSE endpoint during the initial handshake. See also how the tool is secured with an annotation in the &lt;a href=&quot;#mcp-server-tool&quot;&gt;MCP server tool&lt;/a&gt; section above, though you can also secure access to the tool by listing both main and tools endpoints in the configuration, for example: &lt;code&gt;quarkus.http.auth.permission.authenticated.paths=/mcp/sse,/mcp/messages/*&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Requires that only GitHub access tokens can be used to access MCP server.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;By default, &lt;code&gt;quarkus.oidc.provider=github&lt;/code&gt; supports an authorization code flow only. &lt;code&gt;quarkus.oidc.application-type=service&lt;/code&gt; overrides it and requires the use of bearer tokens.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Database that keeps the identity records is supported by the PostgreSQL DevService.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Start MCP server on port &lt;code&gt;8081&lt;/code&gt; - this is done for the Quarkus LangChain4j &lt;code&gt;Poem Service&lt;/code&gt; application that uses an MCP client to be able to start on the default &lt;code&gt;8080&lt;/code&gt; port.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;start-mcp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#start-mcp-server&quot;&gt;&lt;/a&gt;Start the MCP server in dev mode&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;mvn quarkus:dev -Duser.name=&quot;Your GitHub account name&quot; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use your GitHub account name, for example, &lt;code&gt;mvn quarkus:dev -Duser.name=&quot;John Doe&quot;&lt;/code&gt;. It is required to correctly import the user name and permission data to the database.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MCP server&amp;#8217;s security-related configuration remains exactly the same in prod mode, therefore we are not going to talk about running the MCP server in prod to save some blog post space. Please check the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-sse-client-server&quot;&gt;Quarkus LangChain4j Secure MCP Client Server sample&lt;/a&gt; if you would like to run MCP server in prod mode - you will only need to make sure PostresSQL is available in prod mode too.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-poem-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-poem-service&quot;&gt;&lt;/a&gt;Step 2 - Create and start Poem Service that uses AI Gemini and MCP client&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MCP server is now running and ready to accept tool calls. Let&amp;#8217;s create an AI &lt;code&gt;Poem Service&lt;/code&gt; that will work with AI Gemini and use an MCP client to complete tool calls.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;poem-service-maven-dependencies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#poem-service-maven-dependencies&quot;&gt;&lt;/a&gt;Poem Service Maven dependencies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the following dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-langchain4j-ai-gemini&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-langchain4j-mcp&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-langchain4j-oidc-mcp-auth-provider&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-oidc&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-rest-qute&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-langchain4j-ai-gemini&lt;/code&gt; brings support for AI Gemini.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-langchain4j-mcp&lt;/code&gt; provides core MCP Client support.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-langchain4j-oidc-mcp-auth-provider&lt;/code&gt; provides an implementation of &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html#_authorization&quot;&gt;McpClientAuthProvider&lt;/a&gt; that can supply access tokens acquired during the GitHub OAuth2 authorization code flow.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-oidc&lt;/code&gt; supports GitHub OAuth2 login to secure access to &lt;code&gt;Poem Service&lt;/code&gt;. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-rest-qute&lt;/code&gt; generates an HTML page to welcome the logged-in user. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;register-github-application&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#register-github-application&quot;&gt;&lt;/a&gt;Register GitHub OAuth2 application&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Register a GitHub OAuth2 application that you will authorize when logging in to the &lt;code&gt;Poem Service&lt;/code&gt; application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Follow the &lt;a href=&quot;https://quarkus.io/guides/security-openid-connect-providers#github&quot;&gt;GitHub OAuth2 registration&lt;/a&gt; process, and make sure to register the &lt;code&gt;&lt;a href=&quot;http://localhost:8080/login&quot; class=&quot;bare&quot;&gt;http://localhost:8080/login&lt;/a&gt;&lt;/code&gt; callback URL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use the generated GitHub client id and secret to either set &lt;code&gt;GITHUB_CLIENT_ID&lt;/code&gt; and &lt;code&gt;GITHUB_CLIENT_SECRET&lt;/code&gt; environment properties or update the &lt;code&gt;quarkus.oidc.client-id=${github_client_id}&lt;/code&gt; and &lt;code&gt;quarkus.oidc.credentials.secret=${github_client_secret}&lt;/code&gt; properties in application.properties by replacing &lt;code&gt;${github_client_id}&lt;/code&gt; with the generated client id and &lt;code&gt;${github_client_secret}&lt;/code&gt; with the generated client secret.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, Quarkus GitHub provider submits the client id and secret in the HTTP Authorization header. However, GitHub may require that both client id and secret are submitted as form parameters instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you get HTTP 401 error after logging in to GitHub and being redirected back to Quarkus MCP server, try to replace &lt;code&gt;quarkus.oidc.credentials.secret=${github.client.secret}&lt;/code&gt; property with the following two properties instead:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.oidc.credentials.client-secret.method=post
quarkus.oidc.credentials.client-secret.value=${github.client.secret}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;ai-gemini-key&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ai-gemini-key&quot;&gt;&lt;/a&gt;AI Gemini API key&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Poem Service&lt;/code&gt; relies on AI Gemini to create a poem for the logged-in user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Get &lt;a href=&quot;https://aistudio.google.com/app/apikey&quot;&gt;AI Gemini API key&lt;/a&gt; and either set an &lt;code&gt;AI_GEMINI_API_KEY&lt;/code&gt; environment property or update the &lt;code&gt;quarkus.langchain4j.ai.gemini.api-key=${ai_gemini_api_key}&lt;/code&gt; property in &lt;code&gt;application.properties&lt;/code&gt; by replacing &lt;code&gt;${ai_gemini_api_key}&lt;/code&gt; with the API key value.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;github-login-endpoint&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#github-login-endpoint&quot;&gt;&lt;/a&gt;GitHub Login Endpoint&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Poem Service&lt;/code&gt; needs to have an endpoint that manages a GitHub OAuth2 login. Typically, such an endpoint welcomes the logged-in user and offers links for the user to navigate to the rest of the secured application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s implement this login endpoint:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import io.quarkus.qute.Template;
import io.quarkus.qute.TemplateInstance;
import io.quarkus.oidc.UserInfo;
import io.quarkus.security.Authenticated;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;

/**
 * Login resource which returns a poem welcome page to the authenticated user
 */
@Path(&quot;/login&quot;)
@Authenticated &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
public class LoginResource {

    @Inject
    UserInfo userInfo; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

    @Inject
    Template poem;

    @GET
    @Produces(&quot;text/html&quot;)
    public TemplateInstance poem() {
        return poem.data(&quot;name&quot;, userInfo.getName()); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Require an authenticated access. It forces an authorization code flow for users who did not login with GitHub yet and a session verification for the already authenticated users.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;GitHub access tokens are binary and Quarkus OIDC indirectly verifies them by using them to request GitHub specific &lt;code&gt;UserInfo&lt;/code&gt; representation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;After the user logs in to GitHub and is redirected to this endpoint, an HTML page with a user name and a link to the &lt;a href=&quot;#jaxrs-poem-resource&quot;&gt;Poem Resource endpoint&lt;/a&gt; is generated with a simple &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j/blob/main/samples/secure-mcp-sse-client-server/secure-mcp-client/src/main/resources/templates/poem.html&quot;&gt;Qute template&lt;/a&gt; and returned to the user.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jaxrs-poem-resource&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jaxrs-poem-resource&quot;&gt;&lt;/a&gt;Create Poem Resource endpoint&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Poem Resource&lt;/code&gt; endpoint accepts poem requests from authenticated users and delegates these requests to AI &lt;code&gt;Poem Service&lt;/code&gt; that uses &lt;code&gt;AI Gemini&lt;/code&gt;. &lt;code&gt;AI Gemini&lt;/code&gt; relies on the MCP client to get the name of the logged-in user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import dev.langchain4j.agent.tool.Tool;
import dev.langchain4j.service.UserMessage;
import io.quarkiverse.langchain4j.RegisterAiService;
import io.quarkiverse.langchain4j.mcp.runtime.McpToolBox;
import io.quarkus.security.Authenticated;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path(&quot;/poem&quot;)
@Authenticated &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
public class PoemResource {

    static final String USER_MESSAGE = &quot;&quot;&quot;
            Write a short 1 paragraph poem about a Java programming language.
            Please start by greeting the currently logged in user by name and asking to enjoy reading the poem.&quot;&quot;&quot;;

    @RegisterAiService
    public interface PoemService { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        @UserMessage(USER_MESSAGE)
        @McpToolBox(&quot;user-name&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        String writePoem();
    }

    @Inject
    PoemService poemService;

    @GET
    public String getPoem() {
        return poemService.writePoem(); &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Require authenticated poem requests.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;AI Poem Service interface.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Refer to the MCP client &lt;code&gt;user-name&lt;/code&gt; configuration, see the &lt;a href=&quot;#poem-service-configuration&quot;&gt;Poem Service Configuration&lt;/a&gt; section below.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;poem-service-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#poem-service-configuration&quot;&gt;&lt;/a&gt;Poem Service Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s see how the &lt;code&gt;Poem Service&lt;/code&gt; configuration looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.langchain4j.mcp.user-name.transport-type=http &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
quarkus.langchain4j.mcp.user-name.url=http://localhost:8081/mcp/sse/ &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

quarkus.oidc.provider=github &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
quarkus.oidc.client-id=${github_client_id} &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
quarkus.oidc.credentials.secret=${github_client_secret} &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

quarkus.langchain4j.ai.gemini.api-key=${ai_gemini_api_key} &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
quarkus.langchain4j.ai.gemini.log-requests=true &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
quarkus.langchain4j.ai.gemini.log-responses=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enable MCP client HTTP transport. In this demo we use SSE, with &lt;code&gt;Streamable HTTP&lt;/code&gt; to be supported in the future.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Point to the Quarkus MCP server endpoint that you started in the &lt;a href=&quot;#start-mcp-server&quot;&gt;Start the MCP server in dev mode&lt;/a&gt; step.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Require GitHub OAuth2 login.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;GitHub client id and secret that were generated during the &lt;a href=&quot;#register-github-application&quot;&gt;Register GitHub OAuth2 application&lt;/a&gt; step.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;AI Gemini key that you acquired during the &lt;a href=&quot;#ai-gemini-key&quot;&gt;AI Gemini API key&lt;/a&gt; step.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enable AI Gemini request and response logging&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please pay attention to the fact that the MCP client configuration has a &lt;code&gt;user-name&lt;/code&gt; name. You referred to this configuration with the &lt;code&gt;@McpToolBox(&quot;user-name&quot;)&lt;/code&gt; annotation in the &lt;a href=&quot;#jaxrs-poem-resource&quot;&gt;Create Poem Resource endpoint&lt;/a&gt; step.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;start-poem-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#start-poem-service&quot;&gt;&lt;/a&gt;Start Poem Service in dev mode&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;mvn quarkus:dev&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All the Poem Service configuration remains exactly the same in prod mode, therefore we are not going to talk about running it in prod to save some blog post space. Please check the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-sse-client-server&quot;&gt;Quarkus LangChain4j Secure MCP Client Server sample&lt;/a&gt; if you would like to run it in prod mode.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are ready to test our AI &lt;code&gt;Poem Service&lt;/code&gt; application.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step-3-test-poem-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-3-test-poem-service&quot;&gt;&lt;/a&gt;Step 3 - Test Poem Service&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Access &lt;a href=&quot;http://localhost:8080&quot; class=&quot;bare&quot;&gt;http://localhost:8080&lt;/a&gt; and login to &lt;code&gt;Poem Service&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_client/login_to_poem_service.png&quot; alt=&quot;Login to Poem Service&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should get a response with your name and a link to the &lt;code&gt;Poem Service&lt;/code&gt; endpoint:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_client/poem_service_welcome_page.png&quot; alt=&quot;Poem Service Welcome Page&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, Quarkus MCP Client was not involved in getting your name produced, it was done by the &lt;a href=&quot;#github-login-endpoint&quot;&gt;GitHub Login Endpoint&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on the link to get a poem created and have AI Gemini producing a poem about Java for you:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_client/poem_service_response.png&quot; alt=&quot;Poem Service Response&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time, Quarkus MCP Client helped AI Gemini to get your name from the secure Quarkus MCP server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;access-token-delegation-considerations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#access-token-delegation-considerations&quot;&gt;&lt;/a&gt;Access token delegation considerations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In general, access tokens issued by social providers such as GitHub are not designed to be used in your distributed application architecture, with a service such as &lt;code&gt;Poem Service&lt;/code&gt; accessing GitHub API indirectly through another service such as &lt;code&gt;Quarkus MCP server&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus REST service that has users logged in with GitHub can access GitHub API directly. For example, &lt;code&gt;Poem Service&lt;/code&gt; can use a great Quarkus LangChain4j capability to mark REST Clients as tools to access GitHub API. See how &lt;a href=&quot;https://quarkus.io/blog/gemini-personal-assistant/#implementation&quot;&gt;it was done with the Google Calendar service&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this demo, we show the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html&quot;&gt;Quarkus MCP Client&lt;/a&gt;&apos;s capability to interoperate with MCP servers and use access tokens to access secure MCP servers. We use GitHub OAuth2 because it is easily accessible to most developers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Providers such as &lt;code&gt;Keycloak&lt;/code&gt; and &lt;code&gt;Auth0&lt;/code&gt; can create access tokens that are meant to be propagated from one service to another one. You will quite likely have your Quarkus MCP server implementations dealing with such tokens in the enterprise. Alternatively, when possible, the AI service application which accepts an authenticated user can request the token issuer to exchange its access token for another token that will be used to access the downstream MCP Server instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus AI Service applications may have to and can support a delegation flow such as &lt;code&gt;GitHub access token &amp;#8594; Poem Service &amp;#8594; MCP Client &amp;#8594; MCP Server tool &amp;#8594; GitHub API&lt;/code&gt; with additional security measures that the Quarkus team wil discuss in the future blog posts and the identity augmentation like the one shown in this demo.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, we demonstrated how &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html&quot;&gt;Quarkus MCP Client&lt;/a&gt; can access secure MCP servers by propagating access tokens available to the Quarkus LangChain4j AI Service application after the OAuth2 authorization code flow is complete.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stay tuned for more upcoming blog posts about using MCP securely with Quarkus MCP client and MCP Server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/secure-mcp-client/
            </guid>
            
            
            
            <author>Sergey Beryozkin (https://twitter.com/sberyozkin)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.20.1 released - LTS maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-20-1-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.20.1, our first maintenance release for the 3.20 LTS stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.20.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.20, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update --stream=3.20&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.20.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.20.1&quot;&gt;the full changelog of 3.20.1 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 20 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-20-1-released/
            </guid>
            
            
            
            <author>Jan Marti≈°ka (https://twitter.com/janmartiska)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.15.5 released - LTS maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-15-5-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.15.5, our next maintenance release for the 3.15 LTS stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.15.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.15, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update --stream=3.15&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.15.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.15.5&quot;&gt;the full changelog of 3.15.5 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 20 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-15-5-released/
            </guid>
            
            
            
            <author>Jan Marti≈°ka (https://twitter.com/janmartiska)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.22.3 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-22-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.22.3, the second (we skipped 3.22.0) maintenance release for our 3.22 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.22, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.22.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.22&quot;&gt;Quarkus 3.22 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.22.3&quot;&gt;3.22.3&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 15 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-22-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #56 - May</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-56/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Read &quot;AI-Powered Form Wizards: Chat, Click, Done&quot; By Lo√Øc Magnette to discover how Conversational AI Forms transform static forms into dynamic, guided experiences that boost data quality and ease of use. Learn how MCP clients can access Quarkus MCP SSE servers with access tokens in &quot;Getting ready for secure MCP with Quarkus MCP Server&quot; by Sergey Beryozkin. Markus Eisele&amp;#8217;s &quot;Deploy Java Like a Pro: Your First Quarkus App on OpenShift in Minutes&quot; is a fun, hands-on guide for Java developers to build a REST API with Quarkus, PostgreSQL, and deploy it to OpenShift Developer Sandbox with no Kubernetes expertise required. Check out &quot;Quarkus 3 application on AWS Lambda- Part 1&quot; by Vadym Kazulkin for an introduction to the sample application and first Lambda performance measurements. Take a look back to see the way forward in &quot;Why Standards Matter More Today: From Fear of Lock-In to Foundations for Choice&quot; by Markus Eisele.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/56/&quot;&gt;Newsletter #56: May&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 13 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-56/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Agentic AI with Quarkus - part 3</title>
            <link>
                https://quarkus.io/blog/agentic-ai-with-quarkus-p3/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://quarkus.io/blog/agentic-ai-with-quarkus/&quot;&gt;first part&lt;/a&gt; of this blog post series briefly introduced agentic AI and discussed workflow patterns. Subsequently, the &lt;a href=&quot;https://quarkus.io/blog/agentic-ai-with-quarkus-p2/&quot;&gt;second installment&lt;/a&gt; explored the proper agentic patterns, showing how to implement them using Quarkus and its LangChain4j extension.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This third article aims to clarify the differences between these two approaches, discuss their pros and cons, and demonstrate with a practical example how to migrate an AI-infused service using a workflow pattern to a pure agentic implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In essence, the most relevant difference between the two is that workflow patterns are programmatically orchestrated through handcrafted code paths, while agents autonomously decide their own processes and tool usage, maintaining control over how they execute tasks. This makes them more flexible and adaptable to various scenarios, but it also makes them less predictable and, in some cases, more prone to hallucinations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/agentic/wrokflowVsAgents.png&quot; alt=&quot;AI Workflow Vs. Pure Agentic AI&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. AI Workflow Vs. Pure Agentic AI&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;from-workflow-to-agents&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#from-workflow-to-agents&quot;&gt;&lt;/a&gt;From Workflow to Agents&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/agentic-ai-with-quarkus/#routing&quot;&gt;Routing&lt;/a&gt; is one of the workflow patterns presented in the first article of this series. There, we used a first LLM service to categorize the user request and then used that category to programmatically reroute that request to one of three other LLMs acting as medical, legal, or technical experts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/agentic/routing-pattern.png&quot; alt=&quot;Routing pattern&quot; width=&quot;70%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Routing pattern&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In that example, each expert was implemented as a separate and independent LLM service, and the routing to one of them was performed programmatically by the application code. Tracing the execution of a request like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl http://localhost:8080/expert/request/I%20broke%20my%20leg%20what%20should%20I%20do&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The resulting traces show the sequence of steps performed to fulfill the user request: first, the relatively fast, less than 2 seconds, classification phase conducted by the Router Agent, then the more expensive invocation of the selected expert service, which took almost 25 seconds to generate its answer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/agentic/routing-workflow-trace.png&quot; alt=&quot;Tracing routing workflow pattern execution&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Tracing routing workflow pattern execution&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this example, we use the same model to classify and generate the response. However, it is possible to use specialized models for the classification and each experts.
Now, let‚Äôs see how we can transform this workflow approach into a more agentic one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus integration makes it straightforward to turn these AI ‚Äúexpert‚Äù services into &lt;em&gt;tools&lt;/em&gt; that another AI service can invoke. You only need to annotate the AI service methods with &lt;code&gt;@Tool&lt;/code&gt; and configure the caller AI service with &lt;code&gt;@Toolbox&lt;/code&gt;. This approach preserves the possibility of also invoking the single expert directly as an independent LLM service, and also using specialized models for each expert. Note that this &lt;code&gt;@Tool&lt;/code&gt; annotation is not related with the presence of any MCP server and has the purpose of exposing the AI service also as a tool for other AI services. It is planned to discuss MCP in the next blog post of this series.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public interface MedicalExpert {

    @UserMessage(&quot;&quot;&quot;
            You are a medical expert.
            Analyze the following user request under a medical point of view and provide the best possible answer.
            The user request is {request}.
            &quot;&quot;&quot;)
    @Tool(&quot;A medical expert&quot;) // &amp;lt;-- Allows to use this LLM also as a tool for other LLMs
    String medicalRequest(String request);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This way, it is possible to provide a second alternative implementation of the same expert interrogation service, this time using a pure agentic approach. The Router Agent is replaced by a single LLM, having the three experts as &lt;em&gt;tools&lt;/em&gt;, that can autonomously decide to which expert the question must be delegated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@RegisterAiService(modelName = &quot;tool-use&quot;)
@ApplicationScoped
public interface ExpertsSelectorAgent {

    @UserMessage(&quot;&quot;&quot;
            Analyze the following user request and categorize it as &apos;legal&apos;, &apos;medical&apos; or &apos;technical&apos;,
            then forward the request as it is to the corresponding expert provided as a tool.
            Finally return the answer that you received from the expert without any modification.

            The user request is: &apos;{request}&apos;.
            &quot;&quot;&quot;)
    @ToolBox({MedicalExpert.class, LegalExpert.class, TechnicalExpert.class})
    String askToExpert(String request);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@ToolBox&lt;/code&gt; annotation is used to specify the list of tools the agent can use, in this case, the three experts. Note that, similarly to what has been done for other agentic examples in the previous post of this series, this AI service has been configured to use a model capable of reasoning and requesting tool invocations. In our example, the model is configured in the &lt;code&gt;application.properties&lt;/code&gt; file and is using  &lt;code&gt;qwen2.5&lt;/code&gt; with 7 billion parameters. In addition, the &lt;code&gt;temperature&lt;/code&gt; is set to 0 to make the classification more predictable and minimize the possibility of hallucinations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.langchain4j.ollama.tool-use.chat-model.model-id=qwen2.5:7b
quarkus.langchain4j.ollama.tool-use.chat-model.temperature=0
quarkus.langchain4j.ollama.tool-use.timeout=180s&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, the agentic implementation of this expert interrogation service is also ready and can be exposed with a different REST endpoint, making it possible to use and compare these two alternative solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@GET
@Produces(MediaType.TEXT_PLAIN)
@Path(&quot;request-agentic/{request}&quot;)
public String requestAgentic(String request) {
    Log.infof(&quot;User request is: %s&quot;, request);
    return expertsSelectorAgent.askToExpert(request);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;comparing-the-workflow-and-agentic-approaches&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#comparing-the-workflow-and-agentic-approaches&quot;&gt;&lt;/a&gt;Comparing the workflow and agentic approaches&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The two approaches are equivalent in terms of functionality, but they differ in how they are implemented and the levels of control and flexibility they offer. In particular, the pure agentic solution is much simpler and more elegant, as it does not require additional code to route the request to the right expert. The agent can do that by itself. It could also use more than one expert for a single query if needed, which would be impossible with the workflow approach, where the routing is hardcoded in the application code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other hand, the workflow approach is more predictable and easier to debug, as the routing logic is explicit and can be easily traced. It can also be tested and controlled separately. For instance, the behavior of the Router Agent alone could be controlled and corrected with an output guardrail. Moreover, it also allows for more complex workflows, where the routing decision can depend on multiple factors and not just the user‚Äôs request.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, as evidenced by tracing of the agentic execution, its current implementation has a significant drawback: the overall time to fulfill the user request is significantly increased.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/agentic/routing-agentic-trace.png&quot; alt=&quot;Tracing agentic routing execution&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Tracing agentic routing execution&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This depends on how the agent uses the LLM expert as a tool: even though it has been explicitly required to forward the expert‚Äôs response as it is and without any modification, it seems to ignore this instruction. It can&amp;#8217;t avoid wasting significant time reprocessing the expert&amp;#8217;s answer before returning it. In other words, this is a side-effect of the fact that the agent is in complete control of the execution, and there is no way to forward this control to a different LLM, as it would be convenient in this case.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/agentic-ai-with-quarkus-p3/
            </guid>
            
            
            
            <author>Mario Fusco (https://twitter.com/mariofusco)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.22.2 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-22-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.22.2, the first (we skipped 3.22.0) maintenance release for our 3.22 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.22, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.22.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.22&quot;&gt;Quarkus 3.22 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.22.2&quot;&gt;3.22.2&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 07 May 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-22-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>The internals (and a few externals) of Quarkus test classloading have changed</title>
            <link>
                https://quarkus.io/blog/test-classloading-rewrite/
            </link>
            <description>
                &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-changing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-changing&quot;&gt;&lt;/a&gt;What&amp;#8217;s changing?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The internals of Quarkus test classloading have been rewritten in 3.22.
It does not affect production and dev modes, or some Quarkus test modes, such as &lt;code&gt;@QuarkusIntegrationTest&lt;/code&gt;, &lt;code&gt;@QuarkusComponentTest&lt;/code&gt;.
However, &lt;code&gt;@QuarkusTest&lt;/code&gt; has changed.
This change should make Quarkus testing work better, and it allowed us to fix a pile of longstanding bugs.
It will also allow us to improve the integration with test frameworks such as Pact.
However, it did introduce a few bugs we know about, and most likely also some bugs we don&amp;#8217;t yet know about.
We&amp;#8217;re keen to get feedback from the community so that we can get fixing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why&quot;&gt;&lt;/a&gt;Why?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In previous versions, Quarkus tests were invoked using the default JUnit classloader, and then executed in a different, Quarkus-aware, classloader.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This mostly worked very well, and meant that &lt;code&gt;QuarkusTest&lt;/code&gt; tests mostly behaved as if they were part of the same application as the code under test.
The Quarkus test framework could start and stop Quarkus instances at the right point in the test lifecycle, inject CDI dependencies, and do other useful Quarkus bytecode manipulation.
However, some use cases didn&amp;#8217;t work. Tests using advanced JUnit 5 features like &lt;code&gt;@TestTemplate&lt;/code&gt; and &lt;code&gt;@ParameterizedTest&lt;/code&gt; sometimes found that the same test code might appear to run in several classloaders in a single test, or that injected dependencies weren&amp;#8217;t always available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While Quarkus extensions can do all sorts of marvellous bytecode manipulation to improve the developer experience, they cannot manipulate test classes with the same freedom that they do normal application classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over time, test-related defects were building up that couldn&amp;#8217;t be changed without a fundamental rewrite of how Quarkus loads and executes tests.
The Quarkus test code itself was also growing ever-more complex as it tried to work around various JUnit edge cases. Moving test instances from one classloader to another involved serializing and deserialization, which is harder to implement on newer JVM versions with tighter class security. For example, Quarkus used to use XStream as the serialization provider, but XStream no longer works with Java 17 and higher, because of reflection restrictions in the newer JVMs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What if, instead, Quarkus tests were simply run in the same classloader used to to load them?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-you-need-to-do&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-you-need-to-do&quot;&gt;&lt;/a&gt;What you need to do&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From Quarkus 3.22 onwards, this is exactly how &lt;code&gt;@QuarkusTest&lt;/code&gt; classloading works.
What do your tests need to change in order to work with the new architecture?
&lt;strong&gt;Nothing&lt;/strong&gt; (hopefully!).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the goals of this change was that the rewrite didn&amp;#8217;t touch any tests in our test suite, to make sure they&amp;#8217;d all continue working without updates.
In practice, there have been a few hiccups and we&amp;#8217;ve also discovered some edge cases in the broader ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;known-regressions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#known-regressions&quot;&gt;&lt;/a&gt;Known regressions&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;All dev services now start in the JUnit discovery phase&lt;/strong&gt;. &lt;a href=&quot;https://quarkus.io/guides/dev-services&quot;&gt;Quarkus Dev Services&lt;/a&gt; are currently started during &lt;a href=&quot;https://quarkus.io/guides/reaugmentation#what-is-augmentation&quot;&gt;the augmentation phase&lt;/a&gt;, along with bytecode manipulation and other application initialization steps. With the new testing design, all augmentation happens at the beginning of the test run, during the JUnit discovery phase. This means all Dev Services also start at the beginning of the test run. If several test classes with different Dev Service configuration are augmented before any tests are run, multiple differently-configured Dev Services may be running at the same time. This can cause port conflicts and cross-talk on configuration values. We&amp;#8217;re hoping to have a &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/45785&quot;&gt;fix&lt;/a&gt; for this in the next release. As a workaround, splitting conflicting tests into separate projects should fix symptoms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Config access from JUnit conditions&lt;/strong&gt;. Using a &lt;code&gt;ConfigProvider&lt;/code&gt; from a custom JUnit condition will &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/47081&quot;&gt;trigger a &lt;code&gt;ServiceConfigurationError&lt;/code&gt;&lt;/a&gt;. The workaround is to set the thread context classloader to &lt;code&gt;this.getClass().getClassLoader()&lt;/code&gt; before reading config, and then set it back afterwards. This is fixed in 3.23.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Nested test issues&lt;/strong&gt;. If nested &lt;code&gt;@QuarkusTest&lt;/code&gt; tests are mixed in the same project with plain tests, the plain tests &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/47657&quot;&gt;will not be able to access Quarkus config&lt;/a&gt;, because the thread context classloader does not get correctly reset. As a workaround, you can manually set the thread context classloader to the system classloader in the plain tests. The nested tests also &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/47671&quot;&gt;have problems in dev mode&lt;/a&gt;. Most of these issues are fixed in 3.23, and the remaining cases are sorted out in 3.24.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;junit-platform.properties&lt;/strong&gt; Including a &lt;code&gt;junit-platform.properties&lt;/code&gt; in a project &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/47646&quot;&gt;causes problems&lt;/a&gt; for tests using &lt;code&gt;@QuarkusTest&lt;/code&gt;. This is fixed in 3.24, but note that &lt;code&gt;junit-platform.properties&lt;/code&gt; files can also &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/48125&quot;&gt;interfere with multi-profile tests&lt;/a&gt;. To register a class orderer, it is best to &lt;a href=&quot;https://quarkus.io/guides/getting-started-testing#testing_different_profiles&quot;&gt;configure the orderer&lt;/a&gt; in the Quarkus application properties.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Gradle source sets&lt;/strong&gt;. In some cases classes in one gradle source set &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/47760&quot;&gt;cannot access package-private fields and classes in a different source set&lt;/a&gt;. This causes an &lt;code&gt;IllegalAccessError&lt;/code&gt;. The workaround is to switch from package-private to public. This is fixed in 3.24.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;IDE support&lt;/strong&gt;. Running &lt;code&gt;QuarkusTest&lt;/code&gt; tests from the Eclipse IDE is &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/47656&quot;&gt;more challenging&lt;/a&gt;. Running a class as a JUnit test gives an error. To workaround, you can individual test methods, or run a whole package also works, or add &lt;code&gt;-uniqueId [engine:junit-jupiter]/[class:&amp;lt;your.class.name.here&amp;gt;]&lt;/code&gt; to the program arguments in the run configuration. This is fixed in Eclipse 4.37. Similar, in Visual Studio Code, running all tests in a class or package &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/48014&quot;&gt;will fail&lt;/a&gt;, but running individual test methods will work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Increased memory footprint running tests.&lt;/strong&gt; For suites using multiple profiles and resources, more heap or metaspace may be needed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;things-to-watch-out-for&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#things-to-watch-out-for&quot;&gt;&lt;/a&gt;Things to watch out for&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Test order change&lt;/strong&gt;. As part of the rewrite, the execution order of some tests has swapped around. Of course, we all know tests should not depend on execution order if they don&amp;#8217;t set an order explicitly. However, it&amp;#8217;s easy to not notice that a test requires a certain order&amp;#8230;&amp;#8203; until the order changes. We discovered some tests in our own suite that were sensitive to the execution order, and other people may make similar discoveries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Test timing change&lt;/strong&gt;. We also discovered that the rewrite exposed some timing issues in tests. Because classloading is frontloaded at the beginning of the test run, rather than between test executions, there&amp;#8217;s less time for asynchronous operations to finish between tests. For example, there may no longer be time for external state to &apos;reset&apos; before the next test starts. This might expose some heisenbugs in test suites.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dropped-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dropped-support&quot;&gt;&lt;/a&gt;Dropped support&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;@TestProfile&lt;/code&gt; on &lt;code&gt;@Nested&lt;/code&gt; tests.&lt;/strong&gt; Mixing different test profiles and test resources on &lt;code&gt;@Nested&lt;/code&gt; tests is no longer supported. By definition, every &lt;code&gt;@TestProfile&lt;/code&gt; must get its own Quarkus application and classloader. Having multiple classloaders execute one test isn&amp;#8217;t compatible with loading the test with the classloader used to run it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Version 2.x of the Maven Surefire plugin&lt;/strong&gt;. Versions below 3.x of the Maven Surefire plugin will no longer work with &lt;code&gt;@QuarkusTest&lt;/code&gt;. Version 3 of the Surefire plugin was released in 2023, so version 2 is now rather old.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Parallel test execution.&lt;/strong&gt; Running Quarkus tests in parallel has &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues/42296&quot;&gt;never been supported&lt;/a&gt;, but it would work in some circumstances. It is now less likely to work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#next-steps&quot;&gt;&lt;/a&gt;Next steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main work of the test classloading rewrite has been delivered in 3.22, and has unlocked a bunch of possible improvements.
Some test defects weren&amp;#8217;t directly fixed by the main change, but the architecture is now in place to enable a fix.
More excitingly, test-related extensions, like the Pact extensions, can now add new features to reduce test boilerplate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As always, if you spot issues or oddities, please let us know on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;zulip&lt;/a&gt; or &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;raise an issue&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/orgs/quarkusio/projects/30&quot;&gt;working group for test classloading&lt;/a&gt; is still underway, and welcomes contributions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 30 Apr 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/test-classloading-rewrite/
            </guid>
            
            
            
            <author>Holly Cummins (https://twitter.com/holly_cummins)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.22 - Compose Dev Services, improved test class loading infrastructure...</title>
            <link>
                https://quarkus.io/blog/quarkus-3-22-1-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.22.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It comes with several important features, together with some infrastructure improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/46848&quot;&gt;#46848&lt;/a&gt; - Compose Dev Services&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/34681&quot;&gt;#34681&lt;/a&gt; - Improved testing class loader infrastructure&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/44473&quot;&gt;#44473&lt;/a&gt; - Allow Hibernate ORM and Hibernate Reactive to be used in the same application&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/46398&quot;&gt;#46398&lt;/a&gt; - Apply validation modes to the Hibernate Reactive session factory config / Add tests for Reactive + Validator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/46728&quot;&gt;#46728&lt;/a&gt; - Dedicated Dev UI interface to execute HQL (Hibernate ORM) queries&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47012&quot;&gt;#47012&lt;/a&gt; - Add Jakarta Data documentation, dependency management and tests&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/46864&quot;&gt;#46864&lt;/a&gt; - Allow setting Clear-Site-Data on OIDC logout&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47254&quot;&gt;#47254&lt;/a&gt; - Add OIDC expanded configuration reference&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47127&quot;&gt;#47127&lt;/a&gt; - Support customization of gRPC server building&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/47435&quot;&gt;#47435&lt;/a&gt; - Make Stork optional for REST Client&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.22, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.22.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.22&quot;&gt;Quarkus 3.22 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;compose-dev-services&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#compose-dev-services&quot;&gt;&lt;/a&gt;Compose Dev Services&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dev Services is one of the key developer joy feature of Quarkus.
It has been around for quite some time and is very handy to get simple containers started in dev and test modes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.22 introduces the ability to compose and orchestrate complex container setups as Dev Services,
by leveraging the Compose approach offered by Docker and Podman.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can learn all about it in the &lt;a href=&quot;https://quarkus.io/guides/compose-dev-services&quot;&gt;dedicated guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;improved-testing-class-loader-infrastructure&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#improved-testing-class-loader-infrastructure&quot;&gt;&lt;/a&gt;Improved testing class loader infrastructure&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This one has been in the works for quite some time and we are pleased to announce a new testing class loader infrastructure.
It fixes a lot of issues but might also introduce some issues - even if we tried hard to squash all of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can learn (a lot!) more about it in &lt;a href=&quot;https://quarkus.io/blog/test-classloading-rewrite/&quot;&gt;Holly&amp;#8217;s blog post presenting this work&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you encounter any weird class loading issues in your tests, please report back!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hibernate-orm-and-hibernate-reactive&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hibernate-orm-and-hibernate-reactive&quot;&gt;&lt;/a&gt;Hibernate ORM and Hibernate Reactive&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We used to not be able to mix Hibernate ORM and Hibernate Reactive in the same application.
This limitation has now been lifted and you can leverage the strengths of both extensions in the same app.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, Hibernate Validator is now properly integrated with Hibernate Reactive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, Quarkus 3.22 includes a new Dev UI feature:
you can execute HQL queries (as in Hibernate Query Language) directly in the Dev UI,
allowing you to very easily test your HQL queries and iterate on them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jakarta-data&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jakarta-data&quot;&gt;&lt;/a&gt;Jakarta Data&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jakarta Data has been supported by Quarkus since its inception but it wasn&amp;#8217;t properly documented.
It has now a &lt;a href=&quot;https://quarkus.io/guides/hibernate-orm#jakarta-data&quot;&gt;dedicated section&lt;/a&gt; in the Hibernate ORM guide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jakarta Data dependencies have been added to our BOM.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;oidc&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#oidc&quot;&gt;&lt;/a&gt;OIDC&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting with 3.22, on OIDC logout, you have the ability to set &lt;code&gt;Clear-Site-Data&lt;/code&gt; header by using the &lt;code&gt;quarkus.oidc.logout.clear-site-data&lt;/code&gt; configuration property.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also added a &lt;a href=&quot;https://quarkus.io/guides/security-oidc-expanded-configuration&quot;&gt;brand new guide&lt;/a&gt; with extensive coverage of the OIDC configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;grpc&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#grpc&quot;&gt;&lt;/a&gt;gRPC&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is now possible to customize the gRPC server building by implementing the &lt;code&gt;ServerBuilderCustomizer&lt;/code&gt; interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find out more about in the &lt;a href=&quot;https://quarkus.io/guides/grpc-service-implementation#custom-server-building&quot;&gt;new section&lt;/a&gt; added to the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;stork&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#stork&quot;&gt;&lt;/a&gt;Stork&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To avoid having to initialize Stork even if not needed, Stork is no longer a hard dependency of the REST Client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to leverage Stork with the REST Client, you need to add the Stork extension to your build file.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-cxf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-cxf&quot;&gt;&lt;/a&gt;Quarkus CXF&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus CXF 3.22 was released and is now available in &lt;a href=&quot;https://code.quarkus.io/?extension-search=origin:platform%20quarkus-cxf&quot;&gt;Quarkus Platform 3.22&lt;/a&gt;.
Check the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.22.0.html&quot;&gt;Quarkus CXF 3.22.0&lt;/a&gt; release notes for more information about what is new in this release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been upgraded to 3.22.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;amazon-services&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#amazon-services&quot;&gt;&lt;/a&gt;Amazon Services&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Amazon Services extensions have been upgraded to version 3.5.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.22.0.CR1&quot;&gt;3.22.0.CR1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.22.0&quot;&gt;3.22.0&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.22.1&quot;&gt;3.22.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1075 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.22 release, thanks to Aixi-dev, Ales Justin, Alexey Loubyansky, Andreas Eberle, Andy Damevin, Antonio Musarra, Auri Munoz, Barry LaFond, Bruno Baptista, Clemens Classen, Clement Escoffier, Davide D&amp;#8217;Alto, Digvijay Singh, elmodeer, Eric Deandrea, Esben Nedergaard, Fabian, Fabian Senn, feibl, Foivos Zakkak, franz1981, George Gastaldi, Georgios Andrianakis, Giancarlo Calder√≥n C√°rdenas, Guillaume Smet, Harry Chan, Holly Cummins, holomekc, Inaki Villar, ineednousername, Jan Martiska, Jeremie Bresson, Johnathan Gilday, Juan Antonio Bre√±a Moral, Julien Ponge, Junes, Karm Michal Babacek, Katia Aresti, Ladislav Thon, Lo√Øc Mathieu, Luca Basso Ricci, Luca Molteni, Marco Belladelli, mariofusco, marko-bekhta, Martin Barto≈°, Martin Kouba, Martin Panzer, Matej Novotny, Matheus Cruz, Matheus Oliveira da Silva, Maximilian Zellhofer, Michael Edgar, Michael Musgrove, Michal Vav≈ô√≠k, Michiel Dockx, Mikhail Polivakha, Ozan Gunalp, Ozzy, Paulo Casaes, Peter Palaga, Phillip Kr√ºger, Roberto Balarezo, Roberto Cortez, Rod Cheater, Rostislav Svoboda, R√ºdiger zu Dohna, Sergey Beryozkin, shjones, Stuart Douglas, St√©phane √âpardaud, Tamas Cservenak, Vardhman, w0pp, Yassine Haouzane, Yoann Rodi√®re, and Yoshikazu Nojima.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 30 Apr 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-22-1-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Getting ready for secure MCP with Quarkus MCP Server</title>
            <link>
                https://quarkus.io/blog/secure-mcp-sse-server/
            </link>
            <description>
                &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26&quot;&gt;The latest version of the Model Context Protocol (MCP) specification&lt;/a&gt; introduces an &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization&quot;&gt;authorization&lt;/a&gt; flow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While it will take a bit of time for the new MCP specification to be widely supported, you can already add authentication to client and server following the &lt;a href=&quot;https://modelcontextprotocol.io/specification/2024-11-05&quot;&gt;previous MCP version&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You only need an MCP client that can receive an access token and pass it to the MCP server and, obviously, an MCP server that verifies the token.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post, we will detail how you can enforce authentication with the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server&quot;&gt;Quarkus MCP SSE Server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will first use Keycloak as an OpenID Connect (OIDC) provider to login and use a Keycloak JWT access token to access the server with &lt;code&gt;Quarkus MCP SSE Server Dev UI&lt;/code&gt; in dev mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Secondly, we will show how to log in using GitHub OAuth2 and use a GitHub binary access token to access the server in prod mode with both &lt;a href=&quot;https://modelcontextprotocol.io/docs/tools/inspector&quot;&gt;MCP inspector&lt;/a&gt; and the &lt;code&gt;curl&lt;/code&gt; tools.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;initial-mcp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#initial-mcp-server&quot;&gt;&lt;/a&gt;Step 1 - Create an MCP server using the SSE transport&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let&amp;#8217;s create a secure Quarkus MCP SSE server that requires authentication to establish Server-Sent Events (SSE) connection and also when invoking the tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find the complete project source in the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server/tree/main/samples/secure-mcp-sse-server&quot;&gt;Quarkus MCP SSE Server samples&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;initial-dependencies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#initial-dependencies&quot;&gt;&lt;/a&gt;Maven dependencies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the following dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.mcp&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-mcp-server-sse&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &amp;lt;version&amp;gt;1.1.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;

&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-oidc&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-mcp-server-sse&lt;/code&gt; is required to support MCP SSE transport.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-oidc&lt;/code&gt; is required to secure access to MCP SSE endpoints. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tool&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tool&quot;&gt;&lt;/a&gt;Tool&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s create a tool that can be invoked only if the current MCP request is authenticated:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package org.acme;

import io.quarkiverse.mcp.server.TextContent;
import io.quarkiverse.mcp.server.Tool;
import io.quarkus.security.Authenticated;
import io.quarkus.security.identity.SecurityIdentity;
import jakarta.inject.Inject;

public class ServerFeatures {

    @Inject
    SecurityIdentity identity;

    @Tool(name = &quot;user-name-provider&quot;, description = &quot;Provides a name of the current user&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    @Authenticated &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    TextContent provideUserName() {
        return new TextContent(identity.getPrincipal().getName()); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Provide a tool that can return a name of the current user. Note the &lt;code&gt;user-name-provider&lt;/code&gt; tool name, you will use it later for a tool call.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Require authenticated tool access - yes, the only difference with an unauthenticated MCP server tool is &lt;code&gt;@Authenticated&lt;/code&gt;, that&amp;#8217;s it!
See also how the main MCP SSE endpoint is secured in the &lt;a href=&quot;#initial-configuration&quot;&gt;Configuration&lt;/a&gt; section below.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use the injected &lt;code&gt;SecurityIdentity&lt;/code&gt; to return the current user&amp;#8217;s name.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;initial-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#initial-configuration&quot;&gt;&lt;/a&gt;Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, let&amp;#8217;s configure our secure MCP server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.http.auth.permission.authenticated.paths=/mcp/sse &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
quarkus.http.auth.permission.authenticated.policy=authenticated&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enforce an authenticated access to the main MCP SSE endpoint during the initial handshake. See also how the tool is secured with an annotation in the &lt;a href=&quot;#tool&quot;&gt;Tool&lt;/a&gt; section above, though you can also secure access to the tool by listing both main and tools endpoints in the configuration, for example: &lt;code&gt;quarkus.http.auth.permission.authenticated.paths=/mcp/sse,/mcp/messages/*&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are ready to test our secure MCP server in dev mode.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step-2-access-the-mcp-server-in-dev-mode&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-2-access-the-mcp-server-in-dev-mode&quot;&gt;&lt;/a&gt;Step 2 - Access the MCP server in dev mode&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;start-the-mcp-server-in-dev-mode&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#start-the-mcp-server-in-dev-mode&quot;&gt;&lt;/a&gt;Start the MCP server in dev mode&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;mvn quarkus:dev&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The configuration properties that we set in the &lt;a href=&quot;#initial-configuration&quot;&gt;Configuration&lt;/a&gt; section above are sufficient to start the application in dev mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The OIDC configuration is provided in dev mode automatically by &lt;a href=&quot;https://quarkus.io/guides/security-openid-connect-dev-services&quot;&gt;Dev Services for Keycloak&lt;/a&gt;. It creates a default realm, client and adds two users, &lt;code&gt;alice&lt;/code&gt; and &lt;code&gt;bob&lt;/code&gt;, for you to get started with OIDC immediately. You can also register a custom Keycloak realm to work with the existing realm, client and user registrations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also login to other OIDC and OAuth2 providers in OIDC Dev UI, see the &lt;a href=&quot;#mcp-server-devui&quot;&gt;Use Quarkus MCP Server Dev UI to access the MCP server&lt;/a&gt; section for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;oidc-devui&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#oidc-devui&quot;&gt;&lt;/a&gt;Use OIDC Dev UI to login and copy access token&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to &lt;a href=&quot;http://localhost:8080/q/dev&quot;&gt;Dev UI&lt;/a&gt;, find the OpenId Connect card:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_sse_server/oidc_devui.png&quot; alt=&quot;OIDC in DevUI&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Follow the &lt;code&gt;Keycloak Provider&lt;/code&gt; link and &lt;a href=&quot;https://quarkus.io/guides/security-openid-connect-dev-services#develop-service-applications&quot;&gt;login to Keycloak&lt;/a&gt; using an &lt;code&gt;alice&lt;/code&gt; name and an &lt;code&gt;alice&lt;/code&gt; password.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can login to other providers such as &lt;code&gt;Auth0&lt;/code&gt; or &lt;a href=&quot;https://quarkus.io/guides/security-openid-connect-providers#github&quot;&gt;GitHub&lt;/a&gt; from OIDC DevUI as well. The only requirement is to update your application registration to allow callbacks to DevUI. For example, see how you can &lt;a href=&quot;https://quarkus.io/guides/security-oidc-auth0-tutorial#looking-at-auth0-tokens-in-the-oidc-dev-ui&quot;&gt;login to Auth0 from Dev UI&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After logging in with &lt;code&gt;Keycloak&lt;/code&gt; as &lt;code&gt;alice&lt;/code&gt;, copy the acquired access token using a provided copy button:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_sse_server/login_and_copy_access_token.png&quot; alt=&quot;Login and copy access token&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-server-devui&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-server-devui&quot;&gt;&lt;/a&gt;Use Quarkus MCP Server Dev UI to access the MCP server&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Make sure to login and copy the access token as explained in the &lt;a href=&quot;#oidc-devui&quot;&gt;Use OIDC Dev UI to login and copy access token&lt;/a&gt; section above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to &lt;a href=&quot;http://localhost:8080/q/dev&quot;&gt;Dev UI&lt;/a&gt;, find the MCP Server card:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_sse_server/mcp_server_devui.png&quot; alt=&quot;MCP Server in DevUI&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Select its &lt;code&gt;Tools&lt;/code&gt; option and choose to &lt;code&gt;Call&lt;/code&gt; the &lt;code&gt;user-name-provider&lt;/code&gt; tool:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_sse_server/mcp_server_choose_tool.png&quot; alt=&quot;Choose MCP Server tool&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Paste the copied Keycloak access token into the Tool&amp;#8217;s &lt;code&gt;Bearer token&lt;/code&gt; field, and request a new MCP SSE session:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_sse_server/mcp_server_bearer_token.png&quot; alt=&quot;MCP Server Bearer token&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Make a tool call and get a response which contains the &lt;code&gt;alice&lt;/code&gt; user name:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_sse_server/mcp_server_tool_response.png&quot; alt=&quot;MCP Server tool response&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All is good in dev mode; it is time to see how it will work in prod mode.
Before that, stop the MCP server, which runs in dev mode.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step-3-access-the-mcp-server-in-prod-mode&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-3-access-the-mcp-server-in-prod-mode&quot;&gt;&lt;/a&gt;Step 3 - Access the MCP server in prod mode&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;register-github-application&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#register-github-application&quot;&gt;&lt;/a&gt;Register GitHub OAuth2 application&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before it was all in dev mode - using Quarkus devservices to try things out. Now, let&amp;#8217;s move to prod mode. If you already have a Keycloak instance running then you can use it. But to illustrate how OAuth2 works with more than just Keycloak, we will switch to GitHub OAuth2 when the application runs in &lt;em&gt;prod mode&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, start with registering a GitHub OAuth2 application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Follow the &lt;a href=&quot;https://quarkus.io/guides/security-openid-connect-providers#github&quot;&gt;GitHub OAuth2 registration&lt;/a&gt; process, and make sure to register the &lt;code&gt;&lt;a href=&quot;http://localhost:8080/login&quot; class=&quot;bare&quot;&gt;http://localhost:8080/login&lt;/a&gt;&lt;/code&gt; callback URL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, use the client id and secret generated during the GitHub OAuth2 application registration to &lt;a href=&quot;#update-config-to-support-github&quot;&gt;update the configuration to support GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;update-config-to-support-github&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update-config-to-support-github&quot;&gt;&lt;/a&gt;Update the configuration to support GitHub&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;#initial-configuration&quot;&gt;configuration&lt;/a&gt; that was used to run the MCP server in dev mode was suffient because Keycloak Dev Service was supporting the OIDC login.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To work with GitHub in prod mode, we update the configuration as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.http.auth.permission.authenticated.paths=/mcp/sse &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
quarkus.http.auth.permission.authenticated.policy=authenticated

%prod.quarkus.oidc.provider=github &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
%prod.quarkus.oidc.application-type=service &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;

%prod.quarkus.oidc.login.provider=github &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
%prod.quarkus.oidc.login.client-id=github-application-client-id &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
%prod.quarkus.oidc.login.credentials.secret=github-application-client-secret &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Enforce an authenticated access to the main MCP SSE endpoint during the initial handshake. See also how the tool is secured with an annotation in the &lt;a href=&quot;#tool&quot;&gt;Tool&lt;/a&gt; section above.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Default Quarkus OIDC configuration requires that only GitHub access tokens can be used to access MCP SSE server.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;By default, &lt;code&gt;quarkus.oidc.provider=github&lt;/code&gt; supports an authorization code flow only. &lt;code&gt;quarkus.oidc.application-type=service&lt;/code&gt; overrides it and requires the use of bearer tokens.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use GitHub authorization code flow to support the login endpoint with a dedicated Quarkus OIDC &lt;code&gt;login&lt;/code&gt; &lt;a href=&quot;https://quarkus.io/guides/security-openid-connect-multitenancy&quot;&gt;tenant&lt;/a&gt; configuration.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use the client id and secret generated in the &lt;a href=&quot;#register-github-application&quot;&gt;Register GitHub OAuth2 application&lt;/a&gt; section.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note the use of the &lt;code&gt;%prod.&lt;/code&gt; prefixes. It ensures the configuration properties prefixed with &lt;code&gt;%prod.&lt;/code&gt; are only effective in prod mode and do not interfere with dev mode.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;implement-login-endpoint&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#implement-login-endpoint&quot;&gt;&lt;/a&gt;Implement Login endpoint&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently, MCP clients can not use the authorization code flow themselves. Therefore, we implement an OAuth2 login endpoint that will return a GitHub token for the user to use with MCP clients, which can work with bearer tokens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add another dependency to support Qute templates:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-rest-qute&amp;lt;/artifactId&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quarkus-rest-qute&lt;/code&gt; is required to generate HTML pages. Its version is defined in the Quarkus BOM.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and implement the login endpoint:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package org.acme;

import io.quarkus.oidc.AccessTokenCredential;
import io.quarkus.oidc.UserInfo;
import io.quarkus.qute.Template;
import io.quarkus.qute.TemplateInstance;
import io.quarkus.security.Authenticated;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;

@Path(&quot;/login&quot;)
@Authenticated
public class LoginResource {

    @Inject
    UserInfo userInfo; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    @Inject
    AccessTokenCredential accessToken; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

    @Inject
    Template accessTokenPage;

    @GET
    @Produces(&quot;text/html&quot;)
    public TemplateInstance poem() {
        return accessTokenPage
           .data(&quot;name&quot;, userInfo.getName())
           .data(&quot;accessToken&quot;, accessToken.getToken()); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;GitHub access tokens are binary and Quarkus OIDC indirectly verifies them by using them to request GitHub specific &lt;code&gt;UserInfo&lt;/code&gt; representation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AccessTokenCredential&lt;/code&gt; is used to capture a binary GitHub access token.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;After the user logs in to GitHub and is redirected to this endpoint, the access token will be returned to the user in an HTML page generated with a simple &lt;a href=&quot;https://github.com/quarkiverse/quarkus-mcp-server/tree/main/samples/secure-mcp-sse-server/src/main/resources/templates/accessTokenPage.html&quot;&gt;Qute template&lt;/a&gt;.
Of course, you would not do that in a real application. It is just an example to demonstrate the capability.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;package-and-run-the-mcp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#package-and-run-the-mcp-server&quot;&gt;&lt;/a&gt;Package and run the MCP Server&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Package the MCP server application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;mvn package&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;java -jar target/quarkus-app/quarkus-run.jar&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also run the MCP server from its Maven coordinates directly with &lt;code&gt;jbang&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;mvn install
jbang org.acme:secure-mcp-sse-server:1.0.0-SNAPSHOT:runner&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;login-to-github-and-copy-the-access-token&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#login-to-github-and-copy-the-access-token&quot;&gt;&lt;/a&gt;Login to GitHub and copy the access token&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Access &lt;code&gt;&lt;a href=&quot;http://localhost:8080/login&quot; class=&quot;bare&quot;&gt;http://localhost:8080/login&lt;/a&gt;&lt;/code&gt;, login to GitHub, and copy the returned access token:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_sse_server/github_access_token.png&quot; alt=&quot;GitHub access token&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, Quarkus GitHub provider submits the client id and secret in the HTTP Authorization header.
However, GitHub may require that both client id and secret are submitted as form parameters instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you get HTTP 401 error after logging in to GitHub and being redirected back to Quarkus MCP server,
try to replace &lt;code&gt;%prod.quarkus.oidc.login.credentials.secret=${github.client.secret}&lt;/code&gt; property
with the following two properties instead:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;%prod.quarkus.oidc.login.credentials.client-secret.method=post
%prod.quarkus.oidc.login.credentials.client-secret.value=${github.client.secret}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mcp-inspector&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mcp-inspector&quot;&gt;&lt;/a&gt;Use MCP Inspector to access the MCP server&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://modelcontextprotocol.io/docs/tools/inspector&quot;&gt;MCP Inspector&lt;/a&gt; is an interactive developer tool for testing and debugging MCP servers. Let&amp;#8217;s use it to invoke our MCP server with the authentication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Launch &lt;a href=&quot;https://modelcontextprotocol.io/docs/tools/inspector&quot;&gt;MCP inspector&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;npx @modelcontextprotocol/inspector&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensure that you have &lt;a href=&quot;https://github.com/modelcontextprotocol/inspector/releases/tag/0.6.0&quot;&gt;modelcontextprotocol/inspector&lt;/a&gt; version 0.6.0 or later installed as it adds support for specifying bearer token authentication.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Navigate to the URL provided into a browser.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Change the &lt;em&gt;Transport Type&lt;/em&gt; dropdown to &lt;code&gt;SSE&lt;/code&gt; and the &lt;em&gt;URL&lt;/em&gt; to &lt;code&gt;&lt;a href=&quot;http://localhost:8080/mcp/sse&quot; class=&quot;bare&quot;&gt;http://localhost:8080/mcp/sse&lt;/a&gt;&lt;/code&gt; so that it targets the running Quarkus MCP Server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Select the &lt;em&gt;Authorization&lt;/em&gt; button and paste the copied GitHub access token from the browser to the &lt;code&gt;Bearer Token&lt;/code&gt; field and connect to the Quarkus MCP SSE server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_sse_server/mcp_inspector_connect.png&quot; alt=&quot;MCP Inspector Connect&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, make a &lt;code&gt;user-name-provider&lt;/code&gt; tool call:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/secure_mcp_sse_server/mcp_inspector_tool_call.png&quot; alt=&quot;MCP Inspector Tool Call&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will see the name from your GitHub account returned.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;use-curl-to-access-the-mcp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#use-curl-to-access-the-mcp-server&quot;&gt;&lt;/a&gt;Use curl to access the MCP server&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, let&amp;#8217;s use &lt;code&gt;curl&lt;/code&gt; and also learn a little bit how both the MCP protocol and MCP SSE transport work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, open a new terminal window and access the main SSE endpoint without the GitHub access token:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl -v localhost:8080/mcp/sse&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will get HTTP 401 error.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use the access token that was obtained previously to access MCP server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell script hljs&quot; data-lang=&quot;shell script&quot;&gt;curl -v -H &quot;Authorization: Bearer gho_...&quot; localhost:8080/mcp/sse&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and get an SSE response such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;&amp;lt; content-type: text/event-stream
&amp;lt;
event: endpoint
data: /messages/ZTZjZDE5MzItZDE1ZC00NzBjLTk0ZmYtYThiYTgwNzI1MGJ&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The SSE connection is created.  Note the unique path in the received &lt;code&gt;data&lt;/code&gt;, we need this path to invoke the tools.
We cannot invoke the tool directly, we first need to follow the MCP handshake protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Open another terminal window and use the same GitHub access token to initialize the curl as MCP client, and access the tool, using the value of the &lt;code&gt;data&lt;/code&gt; property to build the target URL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Send the client initialization request:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl -v -H &quot;Authorization: Bearer gho_...&quot; -H &quot;Content-Type: application/json&quot; --data @initialize.json http://localhost:8080/mcp/messages/ZTZjZDE5MzItZDE1ZC00NzBjLTk0ZmYtYThiYTgwNzI1MGJ&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;where the &lt;code&gt;initialize.json&lt;/code&gt; file has a content like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-json hljs&quot; data-lang=&quot;json&quot;&gt;{
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;id&quot;: 1,
  &quot;method&quot;: &quot;initialize&quot;,
  &quot;params&quot;: {
    &quot;protocolVersion&quot;: &quot;2024-11-05&quot;,
    &quot;capabilities&quot;: {
      &quot;roots&quot;: {
        &quot;listChanged&quot;: true
      },
      &quot;sampling&quot;: {}
    },
    &quot;clientInfo&quot;: {
      &quot;name&quot;: &quot;CurlClient&quot;,
      &quot;version&quot;: &quot;1.0.0&quot;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Send the client initialization confirmation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl -v -H &quot;Authorization: Bearer gho_...&quot; -H &quot;Content-Type: application/json&quot; --data @initialized.json http://localhost:8080/mcp/messages/ZTZjZDE5MzItZDE1ZC00NzBjLTk0ZmYtYThiYTgwNzI1MGJ&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;where the &lt;code&gt;initialized.json&lt;/code&gt; file has a content like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-json hljs&quot; data-lang=&quot;json&quot;&gt;{
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;method&quot;: &quot;notifications/initialized&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, send the request that will invoke the tool:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;curl -v -H &quot;Authorization: Bearer gho_...&quot; -H &quot;Content-Type: application/json&quot; --data @call.json http://localhost:8080/mcp/messages/ZTZjZDE5MzItZDE1ZC00NzBjLTk0ZmYtYThiYTgwNzI1MGJ&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;where the &lt;code&gt;call.json&lt;/code&gt; file has a content like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-json hljs&quot; data-lang=&quot;json&quot;&gt;{
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;id&quot;: 2,
  &quot;method&quot;: &quot;tools/call&quot;,
  &quot;params&quot;: {
    &quot;name&quot;: &quot;user-name-provider&quot;,
    &quot;arguments&quot;: {
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now look at the terminal window containing the SSE connection and you will see the name from your GitHub account returned.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, we explained how you can easily create a Quarkus MCP SSE server that requires authentication, obtain an access token and use it to access the MCP server tool in dev mode with &lt;code&gt;Quarkus MCP SSE Server Dev UI&lt;/code&gt; and prod mode with both the &lt;a href=&quot;https://modelcontextprotocol.io/docs/tools/inspector&quot;&gt;MCP inspector&lt;/a&gt; and the curl tools.
You can use any MCP client that allows passing a bearer token to the server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice, that there is no real difference in how OAuth2 is done for either Quarkus MCP server or REST endpoints. The most complex part is to get the settings configured correctly for your OAuth2 provider - but when all is done you just apply a few annotations to mark relevant methods as secure and Quarkus handles the authentication for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This blog post uses the previous version of the MCP protocol. The Quarkus team is keeping a close eye on the MCP Authorization specification evolution and working on having all possible MCP Authorization scenarios supported.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stay tuned for more updates!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 28 Apr 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/secure-mcp-sse-server/
            </guid>
            
            
            
            <author>Sergey Beryozkin (https://twitter.com/sberyozkin)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.21.4 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-21-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.21.4, the fourth maintenance release for our 3.21 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.21, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.21.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.21&quot;&gt;Quarkus 3.21 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.21.4&quot;&gt;3.21.4&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 24 Apr 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-21-4-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.21.3 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-21-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.21.3, the third maintenance release for our 3.21 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.21, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.21.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.21&quot;&gt;Quarkus 3.21 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.21.3&quot;&gt;3.21.3&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 16 Apr 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-21-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #55 - April</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-55/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Max Rydahl Andersen discusses Red Hat&amp;#8217;s Middleware engineering moving to IBM and how Quarkus remains an open-source project supported by a vibrant global community in his blog post &quot;Quarkus &amp;amp; Red Hat&amp;#8217;s evolving middleware strategy&quot;. Jeff Beck&amp;#8217;s blog post &quot;The Quarkus Edge: How Real Customers Achieve Speed, Performance, and Agility&quot; that highlights real-world success stories from telco, transportation, and banking industries, showcasing how enterprises use Quarkus to achieve massive performance gains, lower costs, and improved developer productivity in cloud-native applications. Get a hands-on look at Quarkus&apos; developer experience advantages, focusing on coding constructs, testing, and configuration and not just speed in &quot;Ten Reasons for Spring Developers to Explore Quarkus&quot; by Markus Eisele. By Markus Eisele shows Quarkus is not simply &quot;catching up&quot; to Spring Boot in AI integration; it&amp;#8217;s carving its own path, leveraging its cloud-native foundation and community agility to offer a compelling platform for building modern, high-performance AI applications in &quot;Quarkus: A Lean and Agile Foundation for Enterprise Generative AI&quot;. Check out this blog post to learn how Quarkus LangChain4j and OIDC can help to create secure agentic Google Gemini AI services in &quot;Secure Agentic AI with Quarkus and Google Gemini&quot; by Sergey Beryozkin. Jianguo_Ma shows you how to observe Red Hat Quarkus applications with Azure Application Insights using OpenTelemetry. Read &quot;Migrating from AWS Lambda to EKS: Our Journey and Key Learnings&quot; by Asim Naqvi to see the details their migration journey from AWS Lambda to EKS, the challenges we faced, our architectural decisions, and the impact of moving to Kubernetes (EKS) and Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets/discussions and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/55/&quot;&gt;Newsletter #55: April&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Fri, 11 Apr 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-55/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Optimizing Java for the Cloud-Native Era with Quarkus</title>
            <link>
                https://quarkus.io/blog/mmaler-blogpost-1-intro/
            </link>
            <description>
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/mmaler-blog-posts/optimizing-java-with-quarkus-cloud.png&quot; alt=&quot;optimizing java with quarkus cloud&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intro&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post explores how Quarkus can help organizations reduce costs, streamline development, and modernize their Java applications for today‚Äôs cloud-native environments.
It outlines the real-world benefits of adopting Quarkus and highlights how its core features address the performance and scalability challenges commonly associated with traditional Java frameworks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus is already being adopted across industries.
One example is Orange, a global telecom provider that selected Quarkus to support its 5G API initiative, and benefited from fast startup times, a lightweight footprint, and seamless integration with Kubernetes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;After evaluating multiple frameworks, Orange chose Quarkus as the optimal solution for exposing 5G APIs, thanks to its fast startup, lightweight footprint, modularity, and seamless Kubernetes deployment.
Quarkus successfully deployed 10 APIs across 4G/5G network cores, with smooth upgrades and optimized resource usage.
This solidified Quarkus as a key technology for telecom innovation.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a collection of user stories from the community, see the &lt;a href=&quot;https://quarkus.io/userstories/&quot;&gt;Quarkus user stories blog&lt;/a&gt; series.
These stories highlight how different teams and organizations are using Quarkus in the real world.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-does-quarkus-have-to-offer&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-does-quarkus-have-to-offer&quot;&gt;&lt;/a&gt;What does Quarkus have to offer?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;developer-joy-with-live-coding-and-dev-mode&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#developer-joy-with-live-coding-and-dev-mode&quot;&gt;&lt;/a&gt;Developer joy with live coding and dev mode&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus streamlines the traditional write-compile-deploy-refresh cycle by offering live coding support out of the box. As developers make changes, Quarkus automatically detects, recompiles, and redeploys the application, which eliminates the need for manual restarts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While similar functionality has existed through third-party tools, Quarkus integrates it natively and without licensing overhead. This significantly boosts productivity and enhances the developer experience.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cost-efficiency-and-performance&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cost-efficiency-and-performance&quot;&gt;&lt;/a&gt;Cost efficiency and performance&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By optimizing for low memory usage and fast startup times, Quarkus enables higher-density deployments and rapid scaling.
For comparable workloads, Quarkus typically consumes fewer resources such as CPU and memory, which can lead to significant cost savings in cloud environments.
However, organizations considering the switch should always measure and evaluate their specific workloads to validate these benefits in practice.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;reactive-at-its-core&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#reactive-at-its-core&quot;&gt;&lt;/a&gt;Reactive at its core&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At its core, Quarkus is built on Eclipse Vert.x, a high-performance reactive toolkit.
Still, it allows developers to work primarily in an imperative style while leveraging the performance benefits of its reactive underpinnings.
This hybrid approach allows developers to squeeze out even more efficiency from traditional imperative programming while offering the flexibility to adopt reactive patterns where they make sense.
Unlike traditional reactive-only frameworks, Quarkus enables developers to combine both imperative and reactive styles in a single application.
This is particularly beneficial for systems requiring high throughput and low latency, ensuring that applications remain robust under heavy load.
Quarkus&amp;#8217;s reactive model makes it ideal for event-driven architectures and microservices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A basic example of reactive messaging in Quarkus:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@ApplicationScoped
public class PriceConverter {

    @Incoming(&quot;prices&quot;)
    @Outgoing(&quot;converted-prices&quot;)
    public double convert(double priceInEuro) {
        return priceInEuro * 1.1;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this example, prices are received from one channel (&lt;code&gt;prices&lt;/code&gt;), converted, and sent to another channel (&lt;code&gt;converted-prices&lt;/code&gt;).
This pattern supports high-throughput, event-driven processing with clean and efficient logic.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An example of a reactive HTTP endpoint using reactive routes in Quarkus:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@ApplicationScoped
public class GreetingRoute {

    @Route(path = &quot;/hello&quot;, methods = HttpMethod.GET)
    public Uni&amp;lt;String&amp;gt; hello() {
        return Uni.createFrom().item(&quot;Hello from reactive route!&quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This route handles HTTP GET requests reactively using &lt;code&gt;Uni&lt;/code&gt; from Mutiny, making it easy to build non-blocking, low-latency APIs.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;which-of-your-current-development-pains-could-quarkus-solve&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#which-of-your-current-development-pains-could-quarkus-solve&quot;&gt;&lt;/a&gt;Which of your current development pains could Quarkus solve?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One often-overlooked benefit of Quarkus is how it improves onboarding and standardization across teams.
With built-in conventions, automatic service provisioning, and curated extension defaults, Quarkus helps developers get up to speed quickly and encourages consistent patterns across projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dev-services&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dev-services&quot;&gt;&lt;/a&gt;Dev Services&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus Dev Services reduce friction during development and testing by automatically provisioning required services such as databases, message brokers, or identity providers.
For example, if your application includes PostgreSQL, Kafka, or Keycloak extensions, Quarkus can spin up the necessary containers without any manual setup.
This allows you to focus on coding instead of configuring infrastructure, accelerating your local development workflow.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;vast-extension-ecosystem&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vast-extension-ecosystem&quot;&gt;&lt;/a&gt;Vast extension ecosystem&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus offers a rich extension ecosystem that simplifies integration with essential technologies such as databases, messaging systems, authentication providers, and cloud services.
In addition to official extensions, the Quarkiverse community provides a growing collection of open-source extensions maintained by contributors across the ecosystem.
This broadens the range of supported technologies and enables developers to benefit from shared solutions and community expertise.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Popular extensions include:
* &lt;code&gt;quarkus-hibernate-orm&lt;/code&gt; and &lt;code&gt;quarkus-jdbc-postgresql&lt;/code&gt; for seamless data persistence.
* &lt;code&gt;quarkus-smallrye-reactive-messaging&lt;/code&gt; and &lt;code&gt;quarkus-kafka-client&lt;/code&gt; for reactive messaging and Apache Kafka integration.
* &lt;code&gt;quarkus-oidc&lt;/code&gt; for implementing OpenID Connect authentication and securing applications.
* &lt;code&gt;quarkus-micrometer&lt;/code&gt; and &lt;code&gt;quarkus-opentelemetry&lt;/code&gt; for observability, metrics, and tracing.
* &lt;code&gt;quarkus-container-image-docker&lt;/code&gt; and &lt;code&gt;quarkus-kubernetes&lt;/code&gt; for containerization and deployment to Kubernetes platforms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These extensions are widely adopted because they reduce boilerplate, provide reliable default configurations out of the box, and follow cloud-native best practices‚Äîmaking it easy to plug Quarkus into real-world architectures.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;ok-i-would-like-to-try-it-but-is-it-easy-enough-to-migrate-my-workflow-to-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ok-i-would-like-to-try-it-but-is-it-easy-enough-to-migrate-my-workflow-to-quarkus&quot;&gt;&lt;/a&gt;‚ÄúOK, I would like to try it, but is it easy enough to migrate my workflow to Quarkus?‚Äù&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Migrating to a new framework can feel daunting, even when it promises better performance, lower costs, and an improved developer experience.
It‚Äôs like being offered a better house in a better neighborhood, but hesitating because of the hassle of packing, moving, and settling in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Quarkus, the transition doesn‚Äôt have to be disruptive.
Thanks to its compatibility with standard Java APIs, support for Jakarta EE and Spring, and a wide range of extensions, many projects can adopt Quarkus incrementally without rewriting existing code.
Whether you&amp;#8217;re coming from a traditional Java EE application server, a Spring-based stack, or another framework such as Micronaut or Dropwizard, Quarkus provides familiar APIs, tooling, and migration guides to ease the transition.
The platform supports commonly used Jakarta specifications like JAX-RS, CDI, JPA, and Bean Validation out of the box.
For Spring users, the compatibility layer includes support for widely used annotations and components.
See the &lt;a href=&quot;https://quarkus.io/guides/spring-di&quot;&gt;Spring DI guide&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Need assistance getting started?
You‚Äôre not alone.
The Quarkus team offers expert guidance throughout the migration journey, from initial architecture reviews to production readiness.
Whether you&amp;#8217;re evaluating the framework or planning a full transition, support is available to help ensure a smooth and successful adoption.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All it takes is a decision to move forward.
Your team deserves a faster, leaner, and cloud-native future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;concluding-note&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#concluding-note&quot;&gt;&lt;/a&gt;Concluding note&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus is redefining Java development by combining modern features with the robustness of the Java ecosystem.
Its focus on developer productivity, performance, and seamless integration positions it as a formidable framework for building efficient, cloud-native applications.
Whether you&amp;#8217;re looking to optimize costs, enhance development speed, or adopt a reactive approach, Quarkus is a game-changer for Java developers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The end.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/mmaler-blogpost-1-intro/
            </guid>
            
            
            
            <author>Michal Mickey Mal√©≈ô (https://twitter.com/mickeymaler)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.21.2 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-21-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.21.2, the second maintenance release for our 3.21 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;noticeable-changes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#noticeable-changes&quot;&gt;&lt;/a&gt;Noticeable changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;junit-update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#junit-update&quot;&gt;&lt;/a&gt;JUnit update&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We had to update JUnit from 5.10 to 5.12 to solve an alignment issue with Mockito.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JUnit 5.11 comes with &lt;a href=&quot;https://junit.org/junit5/docs/5.11.1/release-notes/#release-notes-5.11.0-junit-platform-bug-fixes&quot;&gt;several changes&lt;/a&gt; to how hierarchies of tests are handled
so you might have to adjust your tests accordingly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.21, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.21.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.21&quot;&gt;Quarkus 3.21 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.21.2&quot;&gt;3.21.2&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 09 Apr 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-21-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.21.1 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-21-1-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.21.1, the first maintenance release for our 3.21 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.21, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.21.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.21&quot;&gt;Quarkus 3.21 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.21.1&quot;&gt;3.21.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-21-1-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.21 - TLS Registry support for MongoDB Client</title>
            <link>
                https://quarkus.io/blog/quarkus-3-21-0-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, together with &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-20-0-released/&quot;&gt;Quarkus 3.20 LTS&lt;/a&gt;, we released Quarkus 3.21.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whereas Quarkus 3.20 LTS is the direct continuation of Quarkus 3.19, Quarkus 3.21 comes with new features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It comes with a lot of small enhancements and the support for the TLS Registry in the MongoDB Client extension.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.21, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.21.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.21&quot;&gt;Quarkus 3.21 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tls-registry-support-for-mongodb-client&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tls-registry-support-for-mongodb-client&quot;&gt;&lt;/a&gt;TLS registry support for MongoDB Client&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We continue to deploy the TLS registry we included a while ago to centralize and simplify the TLS configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this version, we added TLS registry support to the MongoDB Client extension.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-cxf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-cxf&quot;&gt;&lt;/a&gt;Quarkus CXF&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus CXF 3.21 was released and is now available in &lt;a href=&quot;https://code.quarkus.io/?extension-search=origin:platform%20quarkus-cxf&quot;&gt;Quarkus Platform 3.21&lt;/a&gt;.
Check the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.21.0.html&quot;&gt;Quarkus CXF 3.21.0&lt;/a&gt; release notes for more information about what is new in this release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been upgraded to 3.20.0.
You can consult the &lt;a href=&quot;https://camel.apache.org/blog/camel-quarkus-release-3.20.0&quot;&gt;release notes&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;amazon-services&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#amazon-services&quot;&gt;&lt;/a&gt;Amazon Services&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Amazon Services extensions have been upgraded to version 3.3.1.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.21.0.CR1&quot;&gt;3.21.0.CR1&lt;/a&gt; and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.21.0&quot;&gt;3.21.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1068 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.21 release, thanks to Ales Justin, Alexander Schwartz, Alexey Loubyansky, Andrea Boriero, Andreas Maechler, Andy Damevin, Auri Munoz, Bill Burke, Bruno Baptista, Clement Escoffier, cmoulliard, David Cotton, dc1248, Dennis Kronb√ºgel, Fabian, Felix K√∂nig, Foivos Zakkak, Francesco Nigro, Georg Leber, George Gastaldi, Georgios Andrianakis, Giancarlo Calder√≥n C√°rdenas, Guillaume Nodet, Guillaume Smet, Holly Cummins, i10320, Ioannis Canellos, Jakub Jedlicka, Jan Martiska, jcjveraa, Jose Carvajal, Karm Michal Babacek, Katia Aresti, Khosbilegt Bilegsaikhan, Ladislav Thon, Lo√Øc Mathieu, Luis Rubiera, Marco Belladelli, marko-bekhta, Martin Kouba, Martin Panzer, masecla22, Matej Novotny, Matheus Cruz, Maximilian Zellhofer, Melloware, Michal Mal√©≈ô, Michal Vav≈ô√≠k, Ozan Gunalp, Peter Palaga, PhilKes, Phillip Kr√ºger, Robert Stupp, Robert Toyonaga, Roberto Cortez, Rolfe Dlugy-Hegwer, Ryan Dens, R√ºdiger zu Dohna, Sanne Grinovero, Sergey Beryozkin, Severin Gehwolf, shjones, SpaceFox, Stephan Strate, Steve Hawkins, Stuart Douglas, Tamas Cservenak, Thom Castermans, Thomas Canava, Thomas Segismont, w0pp, Welton Rodrigo Torres Nascimento, Willem Jan Glerum, xstefank, Yoann Rodi√®re, and Yoshikazu Nojima.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-21-0-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.20 - new LTS version</title>
            <link>
                https://quarkus.io/blog/quarkus-3-20-0-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is our pleasure to announce the release of Quarkus 3.20, which is our new LTS (Long Term Support) version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This version is built on the top of Quarkus 3.19 with some additional bugfixes.
New features landed in &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-21-0-released/&quot;&gt;Quarkus 3.21&lt;/a&gt;, which was also released today.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to know more about our LTS policy, the &lt;a href=&quot;https://quarkus.io/blog/lts-releases/&quot;&gt;LTS announcement&lt;/a&gt; is a must read.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;LTS releases are supported for 12 months.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are coming from the previous LTS, Quarkus 3.15, there are a lot of exciting new features and we recommend reading the following announcements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-3-16-1-released/&quot;&gt;Quarkus 3.16 - OpenTelemetry Logging, LGTM Quarkus dashboard and too many things to list here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-3-17-0-released/&quot;&gt;Quarkus 3.17 - Observability improvements, programmatic permission checkers, MicroProfile REST Client 4.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-3-18-1-released/&quot;&gt;Quarkus 3.18 - Micrometer for WebSockets Next, Security WebAuthn based on WebAuthn4J, Kubernetes Client 7&amp;#8230;&amp;#8203;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io/blog/quarkus-3-19-1-released/&quot;&gt;Quarkus 3.19 - UBI 9 images, Micrometer to OpenTelemetry bridge, JEP 483 new AOT cache&amp;#8230;&amp;#8203;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.20, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.20 LTS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are upgrading from 3.19, there&amp;#8217;s nothing to do as 3.20 is the direct continuation of 3.19.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are upgrading from the previous LTS, Quarkus 3.15, please refer to the following migration guides:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.16&quot;&gt;Migration guide for 3.16&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.17&quot;&gt;Migration guide for 3.17&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.18&quot;&gt;Migration guide for 3.18&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.19&quot;&gt;Migration guide for 3.19&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.20&quot;&gt;Migration guide for 3.20&lt;/a&gt; - this one is empty as 3.20 is the continuation of 3.19&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; should handle most of the heavy lifting for you,
but there are still cases that should be handled manually and we recommend reading these migration guides carefully.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;platform-component-upgrades&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-component-upgrades&quot;&gt;&lt;/a&gt;Platform component upgrades&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;camel-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#camel-quarkus&quot;&gt;&lt;/a&gt;Camel Quarkus&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Camel Quarkus has been updated to 3.20.0.
You can find everything you need to know about it in the &lt;a href=&quot;https://camel.apache.org/blog/camel-quarkus-release-3.20.0&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;quarkus-cxf&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-cxf&quot;&gt;&lt;/a&gt;Quarkus CXF&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus CXF 3.20 was released and is now available in &lt;a href=&quot;https://code.quarkus.io/?extension-search=origin:platform%20quarkus-cxf&quot;&gt;Quarkus Platform 3.20&lt;/a&gt;.
Check the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-cxf/dev/release-notes/3.20.0.html&quot;&gt;Quarkus CXF 3.20.0&lt;/a&gt; release notes for more information about what is new in this release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;amazon-services&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#amazon-services&quot;&gt;&lt;/a&gt;Amazon Services&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Amazon Services extensions have been upgraded to version 3.3.1.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The core part of Quarkus 3.20.0 is a rebadged release of Quarkus 3.19.4 so nothing new here.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;1068 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.20 release, thanks to Ales Justin, Alexey Loubyansky, Andreas Maechler, Andy Damevin, Auri Munoz, brunobat, Clement Escoffier, cmoulliard, David Cotton, Dennis Kronb√ºgel, Fabian, Foivos Zakkak, Georg Leber, George Gastaldi, Georgios Andrianakis, Guillaume Smet, Jakub Jedlicka, Jan Martiska, jcjveraa, Karm Michal Babacek, Katia Aresti, Ladislav Thon, Marco Belladelli, Martin Kouba, Martin Panzer, masecla22, Maximilian Zellhofer, melloware, Michal Mal√©≈ô, Michal Vav≈ô√≠k, Ozan Gunalp, Peter Palaga, Phillip Kruger, Robert Stupp, Roberto Cortez, Rolfe Dlugy-Hegwer, Ryan Dens, R√ºdiger zu Dohna, Sergey Beryozkin, shjones, Stephan Strate, Steve Hawkins, Stuart Douglas, Thomas Canava, w0pp, Welton Rodrigo Torres Nascimento, Willem Jan Glerum, xstefank, and Yoshikazu Nojima.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The list is a bit smaller than usual as 3.20 only contains bugfixes on top of 3.19.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-20-0-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Movie similarity search using vector databases</title>
            <link>
                https://quarkus.io/blog/movie-similarity-search-using-vector-databases/
            </link>
            <description>
                &lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With LLMs becoming increasingly popular we often see them being used even for tasks that are not directly related to text generation.
Such case is using LLMs for recommendation systems. In this post we&amp;#8217;ll see how you can build such a system using &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html&quot;&gt;Quarkus LangChain4j&lt;/a&gt;
but without using LLMs. More specifically we&amp;#8217;ll create a simple movie similarity search system using a vector database. The role
of &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html&quot;&gt;Quarkus LangChain4j&lt;/a&gt; in this story is to abstract the underlying vector database through the &lt;code&gt;EmbeddingStore&lt;/code&gt; interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A relevant sample has been recently added to the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/&quot;&gt;Quarkus LangChain4j samples&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;embeddings&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#embeddings&quot;&gt;&lt;/a&gt;Embeddings&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An embedding is a way to represent unstructured data (text, images etc.) in a structured way. This is done by mapping the data into a vector.
As we are able to perform mathematical operations on vectors, such as calculating the distance between them, we can use embeddings to calculate
how close (or similar) two pieces of data are. In our case, comparing the embeddings of the movie overview can give us a measure of how similar
the two movies are. This is the premise of this post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;how-are-embeddings-created&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-are-embeddings-created&quot;&gt;&lt;/a&gt;How are embeddings created?&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are multiple ways to create embeddings. &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html&quot;&gt;Quarkus LangChain4j&lt;/a&gt; provides the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/in-process-embedding.html&quot;&gt;In-process embedding&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/llms.html&quot;&gt;Model provider&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post we&amp;#8217;ll use the former. Did I mention that we won&amp;#8217;t be using LLMs?
Instead, we&amp;#8217;ll be using &lt;a href=&quot;https://github.com/pgvector/pgvector&quot;&gt;pgvector&lt;/a&gt; which is a PostgreSQL extension that provides vector operations and indexing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our project will need the following dependencies, for &lt;a href=&quot;https://github.com/pgvector/pgvector&quot;&gt;pgvector&lt;/a&gt; and &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/in-process-embedding.html&quot;&gt;in-process embedding&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;dev.langchain4j&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;langchain4j-embeddings-bge-small-en-q&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;quarkus-langchain4j-pgvector&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To be able to use these dependencies without needing to specify versions, the BOM can be imported to the &lt;code&gt;dependencyManagement&lt;/code&gt; of the project:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkiverse.langchain4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-langchain4j-bom&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.25.0&amp;lt;/version&amp;gt;
    &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
    &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To properly use the in-process embedding model we need to configure it in the &lt;code&gt;application.properties&lt;/code&gt; file.
We also need to configure the pgvector dimension and ensure it&amp;#8217;s aligned with the dimension of the embedding model.
In our case, it&amp;#8217;s 384 (the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html&quot;&gt;Quarkus LangChain4j&lt;/a&gt; documentation provides the size used by each model).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, the &lt;code&gt;application.properties&lt;/code&gt; file should look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.langchain4j.pgvector.dimension=384
quarkus.langchain4j.embedding-model.provider=dev.langchain4j.model.embedding.onnx.bgesmallenq.BgeSmallEnQuantizedEmbeddingModel&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: We can use any other document store supported by &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html&quot;&gt;Quarkus LangChain4j&lt;/a&gt;, in fact that&amp;#8217;s one of the key benefits of using it, the abstraction
of embeddings stores.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;storing-the-embedding&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#storing-the-embedding&quot;&gt;&lt;/a&gt;Storing the embedding&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To store the embedding we&amp;#8217;ll need an &lt;code&gt;EmbeddingStoreIngestor&lt;/code&gt; The ingestor is created using the &lt;code&gt;EmbeddingModel&lt;/code&gt; and the &lt;code&gt;EmbeddingStore&lt;/code&gt;, both provided
as beans and can be easily injected. Alternatively, the user can specify a document splitter, for splitting large documents into smaller chunks, but we won&amp;#8217;t be needing that
in this post, as the movie overview are relatively small.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/similarity-search-using-vector-dbs/ingestion.png&quot; alt=&quot;ingestion&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before passing the unstructured text to the ingestor we need to wrap it in a &lt;code&gt;Document&lt;/code&gt; object. The &lt;code&gt;Document&lt;/code&gt; also contains a &lt;code&gt;Metadata&lt;/code&gt; object which holds key-value pairs.
The &lt;code&gt;Metadata&lt;/code&gt; is really handy as we can add there information needed for correlating the &lt;code&gt;Document&lt;/code&gt; with other data. In our case we&amp;#8217;ll use the &lt;code&gt;Metadata&lt;/code&gt; to store the id of the movie.
That id will help us correlate the movie overview with the actual movie.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The simplified code below shows, how the actual ingestor is created and how the embedding is stored.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@Inject
EmbeddingModel embeddingModel;

@Inject
EmbeddingStore embeddingStore;

public EmbeddingStoreIngestor createIngestor()  {
    return EmbeddingStoreIngestor.builder()
    .embeddingModel(embeddingModel)
    .embeddingStore(embeddingStore)
    .build();
}

public void ingest(Long movieId, String overview) {
      Metadata metadata = Metadata.from(Map.of(&quot;id&quot;, id));
      Document document = Document.from(overview, metadata);
      createIngestor().ingest(document);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, how exactly do we use the movie id ? This depends really on how we store the rest of the movie data. In our case, we&amp;#8217;ll store the movie data in a PostgreSQL database.
This means that the movie id, corresponds to the id of the Movie in the database.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;querying-the-embedding&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#querying-the-embedding&quot;&gt;&lt;/a&gt;Querying the embedding&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To query the embedding we&amp;#8217;ll use the &lt;code&gt;EmbeddingStore&lt;/code&gt; and the &lt;code&gt;EmbeddingModel&lt;/code&gt; in order to execute &lt;code&gt;EmbeddingSearchRequest&lt;/code&gt;.
The code is pretty straight forward. We use the movie overview to create a search request. The &lt;code&gt;EmbeddingSearchRequest&lt;/code&gt; builder
also allows us to specify the maximum number of results and also the minimum similarity threshold. The later allows us to filter
out embeddings that are not similar enough to the query embedding. In other words, it tells the store that if there are not enough similar results
to avoid adding irrelevant results to the response.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import java.util.List;

import dev.langchain4j.data.embedding.Embedding;
import dev.langchain4j.data.segment.TextSegment;
import dev.langchain4j.model.embedding.EmbeddingModel;
import dev.langchain4j.store.embedding.EmbeddingSearchRequest;
import dev.langchain4j.store.embedding.EmbeddingStore;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.transaction.Transactional;

@ApplicationScoped
public class MovieRecommendationService {

  @Inject
  EmbeddingStore&amp;lt;TextSegment&amp;gt; embeddingStore;

  @Inject
  EmbeddingModel embeddingModel;

  @Transactional
  public List&amp;lt;Movie&amp;gt; searchSimilarMovies(String overview) {

    Embedding embedding = embeddingModel.embed(overview).content();
    EmbeddingSearchRequest request = EmbeddingSearchRequest.builder()
    .queryEmbedding(embedding)
    .minScore(0.5)
    .maxResults(10)
    .build();

    return embeddingStore.search(request).matches().stream().map(m -&amp;gt; {
      Long id = m.embedded().metadata().getLong(&quot;id&quot;);
      Movie movie = Movie.findById(id);
      return movie;
    }).toList();

  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;loading-the-movies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#loading-the-movies&quot;&gt;&lt;/a&gt;Loading the movies&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To populate the movies in the database, we&amp;#8217;ll use a CSV file containing the top 1000 movies from IMDB.
The important columns for us are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;title&lt;/code&gt; the movie title&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;overview&lt;/code&gt; the movie overview&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;link&lt;/code&gt; the link to the image poster&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To easily map CSV entries to &lt;code&gt;Movie&lt;/code&gt; objects we&amp;#8217;ll use &lt;code&gt;Jackson&lt;/code&gt;. Specifically, we will use the &lt;code&gt;@JsonProperty&lt;/code&gt;
annotation to map the CSV columns to the &lt;code&gt;Movie&lt;/code&gt; fields. Also, we&amp;#8217;ll use &lt;code&gt;@JsonIgnoreProperties(ignoreUnknown = true)&lt;/code&gt;
to ignore unknown fields.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, a simplified version of our Movie entity object looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package org.acme;

import io.quarkus.hibernate.orm.panache.PanacheEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;


@Entity
@JsonIgnoreProperties(ignoreUnknown = true)
public class Movie extends PanacheEntity {

    @JsonProperty(&quot;Poster_Link&quot;)
    public String link;
    @JsonProperty(&quot;Series_Title&quot;)
    public String title;
    @JsonProperty(&quot;Overview&quot;)
    @Column(length = 1000)
    public String overview;

    public static List&amp;lt;Movie&amp;gt; searchByTitleLike(String title) {
      return find(&quot;title like ?1&quot;, &quot;%&quot; + title + &quot;%&quot;).list();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, now we are ready to load our movies from the CSV to our relational and vector databases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Key points:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Observing the &lt;code&gt;StartupEvent&lt;/code&gt; allows us to load the movies when the application starts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CSVMapper is used to map the CSV entries to &lt;code&gt;Movie&lt;/code&gt; objects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We save each movie using a @Transaction method because we need that &lt;code&gt;id&lt;/code&gt; that&amp;#8217;s often generated by the database&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We ingest the documents in a batch. This can make a huge difference especially, if we move from in-process to remote embedding models.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package org.acme;

import io.quarkus.logging.Log;
import io.quarkus.runtime.StartupEvent;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Observes;
import jakarta.transaction.Transactional;

import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.eclipse.microprofile.config.inject.ConfigProperty;

import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.dataformat.csv.CsvMapper;
import com.fasterxml.jackson.dataformat.csv.CsvSchema;

import dev.langchain4j.data.document.Document;
import dev.langchain4j.data.document.Metadata;
import dev.langchain4j.model.embedding.EmbeddingModel;
import dev.langchain4j.store.embedding.EmbeddingStore;
import dev.langchain4j.store.embedding.EmbeddingStoreIngestor;

@ApplicationScoped
public class MovieLoader {


  public void load(@Observes StartupEvent event, @ConfigProperty(name = &quot;movies.file&quot;) Path moviesFile,
                   EmbeddingStore embeddingStore, EmbeddingModel embeddingModel) throws Exception {
    if (!Files.exists(moviesFile)) {
      throw new IllegalStateException(&quot;Missing movies file: &quot; + moviesFile);
    }

    embeddingStore.removeAll();

    EmbeddingStoreIngestor ingester = EmbeddingStoreIngestor.builder()
    .embeddingModel(embeddingModel)
    .embeddingStore(embeddingStore)
    .build();

    List&amp;lt;Document&amp;gt; docs = new ArrayList&amp;lt;&amp;gt;();
    try (MappingIterator&amp;lt;Movie&amp;gt; it = new CsvMapper().readerFor(Movie.class).with(CsvSchema.emptySchema().withHeader()).readValues(moviesFile.toFile())) {
      for (Movie movie : it.readAll()) {
        Long id = save(movie).id;
        Metadata metadata = Metadata.from(Map.of(&quot;id&quot;, id, &quot;title&quot;, movie.title));
      Document document = Document.from(movie.overview, metadata);
      docs.add(document);

      }
    }

    Log.info(&quot;Ingesting movies...&quot;);
    ingester.ingest(docs);
    Log.info(&quot;Application initalized!&quot;);
  }

  @Transactional
  public Movie save(Movie m) {
    m.persist();
    return m;
  }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use the CSV mapper, we&amp;#8217;ll need to Jackson&amp;#8217;s CSV dataformat dependency:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.fasterxml.jackson.dataformat&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jackson-dataformat-csv&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The path of the movies file is specified in the &lt;code&gt;application.properties&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;movies.file=src/main/resources/movies.csv&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;bringing-it-all-together&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#bringing-it-all-together&quot;&gt;&lt;/a&gt;Bringing it all together&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The only thing that&amp;#8217;s left is to create a REST endpoint that allows us to search for similar movies. We could also use a simple UI.
Let&amp;#8217;s start with the REST endpoint. It&amp;#8217;s pretty straightforward. We need two methods, one for searching movies and one for searching similar movies.
For the former we just use the &lt;code&gt;Movie&lt;/code&gt; entity, for the latter we inject and use the &lt;code&gt;MovieRecommendationService&lt;/code&gt; we created earlier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package io.quarkiverse.langchain4j.sample;

import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import java.util.List;

@Path(&quot;/movies&quot;)
public class MovieResource {

    @Inject
    MovieRecommendationService recommendationService;

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Path(&quot;/by-title/{title}&quot;)
    public List&amp;lt;Movie&amp;gt; searchByTitle(String title) {
      return Movie.searchByTitleLike(title);
    }

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Path(&quot;/similar/{id}&quot;)
    public List&amp;lt;Movie&amp;gt; searchSimilar(Long id) {
      Movie m = Movie.findById(id);
      return recommendationService.searchSimilarMovies(m.overview);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the UI, let&amp;#8217;s just use a simple HTML page that uses the REST endpoint to search for similar movies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The key elements of that page are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;movie-box: a text field for entering the movie title&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;search-results: an unordered list for displaying the search results&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;movie-overview: div for displaying the overview of the selected movie&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;movie-poster: an image for displaying the movie poster&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;similar-results: an additional unordered list for displaying the similar movies&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s important to remember that the &lt;code&gt;Movie&lt;/code&gt; entity is using Jackson to map the CSV columns to the entity fields.
This means that when a &lt;code&gt;Movie&lt;/code&gt; is serialized to JSON, it will use the CSV column names as the field names and not
the entity field names. The HTML code below needs to take that into consideration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-html hljs&quot; data-lang=&quot;html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
	&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;{{_title_}}&amp;lt;/title&amp;gt;
		&amp;lt;meta charset=&quot;UTF-8&quot;/&amp;gt;
		&amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;/&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
    &amp;lt;h2&amp;gt;Movie Similarity Search&amp;lt;/h2&amp;gt;
    &amp;lt;input type=&quot;text&quot; id=&quot;movie-box&quot; placeholder=&quot;Enter a movie title&quot;&amp;gt;
    &amp;lt;h3 hidden=&quot;true&quot; id=&quot;movie-results-heading&quot;&amp;gt;Click on of the movies below&amp;lt;/h3&amp;gt;
    &amp;lt;ul id=&quot;search-results&quot;&amp;gt;&amp;lt;/ul&amp;gt;
    &amp;lt;img id=&quot;movie-poster&quot;&amp;gt;&amp;lt;img&amp;gt;
    &amp;lt;div id=&quot;movie-overview&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;h3 hidden=&quot;true&quot; id=&quot;similar-heading&quot;&amp;gt;Similar movies&amp;lt;/h3&amp;gt;
    &amp;lt;ul id=&quot;similar-results&quot;&amp;gt;&amp;lt;/ul&amp;gt;

    &amp;lt;script&amp;gt;
    document.getElementById(&quot;movie-box&quot;).addEventListener(&quot;input&quot;, async function() {
        const query = this.value.trim();
        if (query.length === 0) {
          document.getElementById(&quot;search-results&quot;).innerHTML = &quot;&quot;;
          return;
        }
      const response = await fetch(`/movies/by-title/${encodeURIComponent(query)}`);
        const movies = await response.json();

        if (movies.length &amp;gt; 0) {
          document.getElementById(&quot;movie-results-heading&quot;).hidden = false;
        }
        movies.forEach(movie =&amp;gt; {
          const li = document.createElement(&quot;li&quot;);
          li.textContent = movie.Series_Title;
          li.addEventListener(&quot;click&quot;, () =&amp;gt; displayMovie(movie));
          document.getElementById(&quot;search-results&quot;).appendChild(li);
        });
    });

    async function displayMovie(movie) {
      console.log(&apos;Displaying movie:&apos;, movie);
      document.getElementById(&quot;search-results&quot;).innerHTML = &quot;&quot;;
      document.getElementById(&quot;movie-poster&quot;).src = movie.Poster_Link;
      document.getElementById(&quot;movie-poster&quot;).style.display = &quot;block&quot;;
      document.getElementById(&quot;movie-overview&quot;).textContent = movie.Overview;
      document.getElementById(&quot;similar-heading&quot;).hidden = false;
      document.getElementById(&quot;movie-results-heading&quot;).hidden = true;
      document.getElementById(&quot;similar-results&quot;).innerHTML = &quot;&quot;;

      const response = await fetch(`/movies/similar/${encodeURIComponent(movie.id)}`);
      const similarMovies = await response.json();
        similarMovies.forEach(similarMovie =&amp;gt; {
           const li = document.createElement(&quot;li&quot;);
           li.textContent = similarMovie.Series_Title;
           li.addEventListener(&quot;click&quot;, () =&amp;gt; displayMovie(similarMovie));
           document.getElementById(&quot;similar-results&quot;).appendChild(li);
        });
    }
    &amp;lt;/script&amp;gt;
	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I won&amp;#8217;t go into much detail about the HTML code as it&amp;#8217;s outside the scope of this post.
The final results should look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/similarity-search-using-vector-dbs/movie-similarity-search-ui.png&quot; alt=&quot;movie similarity search ui&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The quality of the recommendations depends on the accuracy of the movie overview and also on the quality of the embeddings.
This means that better embedding models can lead to better recommendations. The vector database used could possibly also
affect the quality of the recommendations, but that&amp;#8217;s a topic for another post.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 24 Mar 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/movie-similarity-search-using-vector-databases/
            </guid>
            
            
            
            <author>Ioannis Canellos</author>
            
        </item>
        
        <item>
            <title>Sender-constraining access tokens with Quarkus OIDC</title>
            <link>
                https://quarkus.io/blog/sender-constraining-tokens/
            </link>
            <description>
                &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Single-page application (SPA) runs in the browser and uses &lt;a href=&quot;https://quarkus.io/guides/security-oidc-code-flow-authentication#overview-of-the-oidc-authorization-code-flow-mechanism&quot;&gt;OIDC authorization code flow&lt;/a&gt; to log-in users, without depending on Quarkus OIDC. When the authentication is complete, SPA sends the access token to access Quarkus on behalf of the authenticated user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Have a look at the simple diagram showing how this process works, copied to this post from the &lt;a href=&quot;https://quarkus.io/guides/security-oidc-bearer-token-authentication&quot;&gt;OIDC Bearer token guide&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sender-constraining-tokens/security-bearer-token-spa.png&quot; alt=&quot;SPA and Quarkus Service&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As illustrated in the picture above, the OIDC provider authenticates the current user, SPA receives ID and access tokens and uses the access token to access the Quarkus endpoint.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The security challenge that the OAuth2 experts have been trying to address is how to prove that the client such as SPA which is sending the token actually owns this token ? There is nothing in the HTTP &lt;code&gt;Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code&gt; header that proves that SPA did not leak the token.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Two specifications for sender-constraining access tokens have emerged over the years, &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8705&quot;&gt;RFC 8705: Mutual TLS Client Authentication and Certificate-Bound Access Tokens&lt;/a&gt; and &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9449&quot;&gt;RFC 9449: OAuth 2.0 Demonstrating Proof-of-Possession (DPoP)&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;mutual-tls-client-authentication-and-certificate-bound-access-tokens&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mutual-tls-client-authentication-and-certificate-bound-access-tokens&quot;&gt;&lt;/a&gt;Mutual TLS Client Authentication and Certificate-Bound Access Tokens&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8705&quot;&gt;Mutual TLS Client Authentication and Certificate-Bound Access Tokens&lt;/a&gt; specification describes how access tokens can be cryptographically bound to the MTLS client certificate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By proving that the access token is bound to the client certificate, the Quarkus application can get a high degree of confidence that the current access token is constrained to, owned by the client which authenticated to Quarkus over MTLS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sender-constraining-tokens/oidc-mtls-binding.png&quot; alt=&quot;OIDC DPoP&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Implementing the cryptographic binding is not complex in this case. The current access token is expected to contain a confirmation with the SHA-256 certificate thumbprint and it must match the thumbprint of the current MTLS client certificate. If the token is in JWT format, then it must include a confirmation claim. If the token is binary then the confirmation must be included in the remote token introspection response.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Such a binding can only be successful if the OpenId Connect provider has access to the same client certificate which is used during the MTLS authentication to Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The downside of using the MTLS token binding is that correctly configuring the OpenId Connect provider, ensuring that browsers can request an X509 certiticate authentication when SPA redirects the user to authenticate to the OIDC provider is complex.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Keycloak user, check the &lt;a href=&quot;https://www.keycloak.org/docs/latest/server_admin/#con-advanced-settings_server_administration_guide&quot;&gt;OAuth 2.0 Mutual TLS Certificate Bound Access Tokens Enabled&lt;/a&gt; in the Advanced Configuration section of the &lt;a href=&quot;https://www.keycloak.org/docs/latest/server_admin&quot;&gt;Keycloak Server Administration documentation&lt;/a&gt; and the &lt;a href=&quot;https://tech.aufomm.com/how-to-use-certificate-bound-access-token-with-kong-and-keycloak/&quot;&gt;How to Use Certificate-Bound Access Token with Kong and Keycloak&lt;/a&gt; community blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As far as Quarkus is concerned, you only need to set a single OIDC configuration property, &lt;code&gt;quarkus.oidc.token.binding.certificate=true&lt;/code&gt;, in addition to the Vert.x HTTP MTLS configuration, to enforce the MTLS token binding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://quarkus.io/guides/security-oidc-bearer-token-authentication#mutual-tls-token-binding&quot;&gt;Quarkus OIDC Mutual TLS Token Binding&lt;/a&gt; documentation for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;demonstrating-proof-of-possession-dpop&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#demonstrating-proof-of-possession-dpop&quot;&gt;&lt;/a&gt;Demonstrating Proof-of-Possession (DPoP)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9449&quot;&gt;Demonstrating Proof-of-Possession (DPoP)&lt;/a&gt; specification describes how access tokens can be cryptographically bound to special JWT tokens called DPoP proofs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sender-constraining-tokens/oidc-dpop.png&quot; alt=&quot;OIDC DPoP&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The SPA client generates a private and public key pair, and creates a DPoP proof token to complete the access token acquisition from the OIDC provider. It then forwards this DPoP token to Quarkus with a new DPoP proof. The access token must be bound to the DPoP proof by containing a public JSON Web Key (JWK) key thumbprint which matches the thumbprint of the public JWK key contained in the DPoP proof.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This binding can only be successful if the client uses the same public and private key pair for creating the DPoP proof to request the access token in the previous step and creating another DPoP proof for submitting it alongside the DPoP access token to Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus OIDC will also enforce &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9449#name-checking-dpop-proofs&quot;&gt;other DPoP proof check requirements&lt;/a&gt;. Support for custom &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9449#name-resource-server-provided-no&quot;&gt;DPoP nonce providers&lt;/a&gt; is also planned.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Adoption of DPoP, compared to that of the MTLS token binding, is expected to progress faster, because DPoP is an &lt;code&gt;application-level&lt;/code&gt; protocol, with no expectation that the transport-level MTLS authentication takes place. However, correctly creating DPoP proofs at the SPA level is not straightforward and requires care.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Keycloak user, then enabling an experimental &lt;code&gt;dpop&lt;/code&gt; feature is sufficient to get started. Also check the &lt;a href=&quot;https://www.keycloak.org/docs/latest/server_admin/#con-advanced-settings_server_administration_guide&quot;&gt;OAuth 2.0 Demonstrating Proof-of-Possession at the Application Layer (DPoP)&lt;/a&gt; in the Advanced Configuration section of the &lt;a href=&quot;https://www.keycloak.org/docs/latest/server_admin&quot;&gt;Keycloak Server Administration documentation&lt;/a&gt; and the &lt;a href=&quot;https://tech.aufomm.com/how-to-use-demonstrating-proof-of-possession-dpop-token-with-kong-and-keycloak/&quot;&gt;How to Use Demonstrating Proof-of-Possession (DPoP) Token with Kong and keycloak&lt;/a&gt; community blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As far as Quarkus is concerned, you only need to set a single OIDC configuration property, &lt;code&gt;quarkus.oidc.token.authorization-scheme=dpop&lt;/code&gt; to accept DPoP tokens and enforce their binding to the accompanying DPoP proofs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://quarkus.io/guides/security-oidc-bearer-token-authentication#demonstrating-proof-of-possession-dpop&quot;&gt;Quarkus OIDC Demonstrating Proof of Possession (DPoP)&lt;/a&gt; documentation for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;financial-grade-api-fapi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#financial-grade-api-fapi&quot;&gt;&lt;/a&gt;Financial-Grade API (FAPI)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://openid.net/wg/fapi/&quot;&gt;Financial-Grade API (FAPI)&lt;/a&gt; is a general high-security API profile built on top of OAuth2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8705&quot;&gt;RFC 8705: Mutual TLS Client Authentication and Certificate-Bound Access Tokens&lt;/a&gt; and &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9449&quot;&gt;RFC 9449: OAuth 2.0 Demonstrating Proof-of-Possession (DPoP)&lt;/a&gt; specifications are included in the Financial-Grade API 2.0 &lt;a href=&quot;https://openid.net/specs/fapi-security-profile-2_0-final.html#name-general&quot;&gt;General Security Profile&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, we have discussed two important OAuth2 specifications for sender-constraining access tokens, &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8705&quot;&gt;RFC 8705: Mutual TLS Client Authentication and Certificate-Bound Access Tokens&lt;/a&gt; and &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9449&quot;&gt;RFC 9449: OAuth 2.0 Demonstrating Proof-of-Possession (DPoP)&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both of these token security elevation technologies can be easily supported in Quarkus OIDC, by using a single configuration property only, without having to write a lot of custom code and configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please experiment with &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8705&quot;&gt;Mutual TLS Client Authentication and Certificate-Bound Access Tokens&lt;/a&gt; and &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc9449&quot;&gt;Demonstrating Proof-of-Possession (DPoP)&lt;/a&gt; in Quarkus and let us know what you think.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/sender-constraining-tokens/
            </guid>
            
            
            
            <author>Sergey Beryozkin (https://twitter.com/sberyozkin)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.19.4 - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-19-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We released Quarkus 3.19.4, the third (we skipped 3.19.0) maintenance release for our 3.19 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next week, we will release both:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Quarkus 3.20 LTS, our next LTS release with 1-year maintenance - it is based on 3.19&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quarkus 3.21, a regular release including new features&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.19, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.19.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.19&quot;&gt;Quarkus 3.19 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.19.4&quot;&gt;3.19.4&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-19-4-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.15.4 released - LTS maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-15-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.15.4, our next maintenance release for the 3.15 LTS stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.15. However, as part of fixing a security issue,
one small potentially breaking change had to be applied: &lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/45877&quot;&gt;#45877&lt;/a&gt;.
This may affect you if you consume Netty allocator metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.15, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update --stream=3.15&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.15.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.15.4&quot;&gt;the full changelog of 3.15.4 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-15-4-released/
            </guid>
            
            
            
            <author>Jan Marti≈°ka (https://twitter.com/janmartiska)</author>
            
        </item>
        
        <item>
            <title>How Orange leverages Quarkus for seamless access to Telco network capabilities</title>
            <link>
                https://quarkus.io/blog/orange-telco-core-network-api-management-with-quarkus/
            </link>
            <description>
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-user-stories/orange/orange-logo.png&quot; alt=&quot;Orange&quot; width=&quot;256&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a global telecommunications leader, &lt;a href=&quot;https://www.orange.com&quot;&gt;Orange&lt;/a&gt; has always been at the forefront of innovation.
Along with Deutsche Telekom, Telef√≥nica, and Vodafone, Orange co-founded the &lt;a href=&quot;https://camaraproject.org&quot;&gt;Camara Project&lt;/a&gt;, an initiative aimed at simplifying the consumption of 5G APIs for third-party application developers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To achieve this goal, Orange needed a flexible and lightweight framework capable of handling constrained API exposure while ensuring compatibility with existing network core systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After a rigorous evaluation of multiple frameworks and toolkits ‚Äî including Quarkus, Ktor, Micronaut, and Vert.x ‚Äî Orange selected Quarkus as the ideal solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/patriceconil/&quot;&gt;Patrice Conil&lt;/a&gt;, software craftsman at Orange, told us why.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-quarkus-a-framework-evaluation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-quarkus-a-framework-evaluation&quot;&gt;&lt;/a&gt;Why Quarkus? A Framework Evaluation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The team at Orange identified application startup time as a barrier to dynamic Kubernetes pod management.
So they embarked on a comparative study to test alternatives to Spring Boot in a well-defined API wrapper exposure context.
Key evaluation criteria included:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learning Curve: How easily could a Spring developer transition?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kotlin Compatibility: Could the framework work seamlessly with Kotlin?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Runtime footprint: Could it operate efficiently in a constrained environment?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ease of Deployment: How smoothly could it be deployed on Kubernetes?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After extensive testing, Quarkus stood out for multiple reasons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Simplicity: A relatively simple learning curve, especially for those familiar with JAX-RS / Jakarta REST.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dev Mode: Very fast startup, live reload and zero configuration Dev Services (Vault, Redis) result in great developer productivity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modularity: Only required dependencies were embedded, keeping applications lean.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Documentation: Well-organized, versioned documentation with working examples.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Native Compilation: The ability to generate compact native binaries for Kubernetes deployment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Despite the strong competition from a vibrant JVM ecosystem, these advantages made Quarkus the preferred choice for exposing 5G APIs at Orange.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;lessons-learned-from-adopting-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#lessons-learned-from-adopting-quarkus&quot;&gt;&lt;/a&gt;Lessons Learned from Adopting Quarkus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;migration-development-experience&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#migration-development-experience&quot;&gt;&lt;/a&gt;Migration &amp;amp; Development Experience&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Transitioning from Spring to Quarkus was not overly complex, especially for those familiar with JAX-RS / Jakarta REST.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://quarkus.io/guides/dev-services&quot;&gt;Dev Services&lt;/a&gt; significantly enhanced productivity in dev and test modes, but required careful consideration for their CI/CD environments, where no container runtime is available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The modular approach ensured applications remained lightweight but introduced a large number of small dependencies to manage.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;spec-first-api-development&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#spec-first-api-development&quot;&gt;&lt;/a&gt;Spec-First API Development&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As spec-first practitioners, integrating OpenAPI specification generation was a crucial requirement that Quarkus handled effectively.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;java-kotlin-interoperability&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#java-kotlin-interoperability&quot;&gt;&lt;/a&gt;Java &amp;amp; Kotlin Interoperability&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While Quarkus supports Kotlin, writing full Kotlin extensions proved challenging at times.
The team retained some Java code, and Java-Kotlin interoperability worked smoothly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;native-compilation-performance&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#native-compilation-performance&quot;&gt;&lt;/a&gt;Native Compilation &amp;amp; Performance&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Native compilation produced compact native executables, but the process of producing them was lengthy.
The team reserved it for the final build stage when absolutely necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some fine-tuning was required to prevent class pruning issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When building native executables, the call tree is analyzed to determine which classes and methods are used. Everything that is not used is pruned to reduce the size of the executable and the RSS usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In some cases, e.g. when using reflection, you will have to declare explicitly that a class is used so that it ends up being included in the native executable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus provides tooling to simplify this configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;reactive-programming-mutiny&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#reactive-programming-mutiny&quot;&gt;&lt;/a&gt;Reactive Programming &amp;amp; Mutiny&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having worked extensively with Reactor, the transition to Mutiny had a learning curve.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While effective and more intuitive thanks to its navigable API, it was perceived as more verbose for the simple cases.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;architecture-overview&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#architecture-overview&quot;&gt;&lt;/a&gt;Architecture Overview&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Orange designed a microservices-based architecture to expose 5G APIs efficiently.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;microservices-api-wrappers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#microservices-api-wrappers&quot;&gt;&lt;/a&gt;Microservices &amp;amp; API Wrappers&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each API wrapper was implemented as a dedicated microservice for better version control.
The team leveraged Reactive APIs wherever possible, since there are a lot of time-consuming asynchronous tasks to be performed on the core network side and saving resources is a business goal.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cicd-deployment&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cicd-deployment&quot;&gt;&lt;/a&gt;CI/CD &amp;amp; Deployment&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each microservice had its own GitLab repository with an independent build pipeline for its Docker image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Renovate was used to automate dependency upgrades.
A dedicated deployment project pushed new Docker images to an OpenShift cluster using Kustomize + ArgoCD.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;infrastructure-components&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#infrastructure-components&quot;&gt;&lt;/a&gt;Infrastructure Components&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additional services included:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Vault for secrets management&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redis for caching&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Neo4j for database operations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kafka for messaging&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vert.x HTTP Proxy was used for routing and backend protection.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;results-impact&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#results-impact&quot;&gt;&lt;/a&gt;Results &amp;amp; Impact&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After implementing Quarkus in production, Orange successfully &lt;strong&gt;deployed ten APIs&lt;/strong&gt; across various 4G/5G network cores.
Over time, the team performed &lt;strong&gt;multiple Quarkus version upgrades (2.11 ‚Üí 3.14)&lt;/strong&gt;, all well-managed through Renovate with minimal code adaptation‚Äîexcept for necessary adjustments during the migration to Jakarta EE.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/orange-telco-core-network-api-management-with-quarkus/
            </guid>
            
            
            
            <author>Thomas Segismont</author>
            
        </item>
        
        <item>
            <title>Quarkus &amp; Red Hat&apos;s evolving middleware strategy</title>
            <link>
                https://quarkus.io/blog/quarkus-redhat-strategy/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the past weeks, we&amp;#8217;ve received questions about the &lt;a href=&quot;https://www.redhat.com/en/blog/evolving-our-middleware-strategy&quot;&gt;recent announcement&lt;/a&gt; that Red Hat&amp;#8217;s Middleware engineering and product teams, which include Quarkus, are moving to IBM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We want to take this opportunity to acknowledge this change while reaffirming what has always been true:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Quarkus is an open-source project driven by a global community of contributors, spanning companies, individuals, and open-source enthusiasts.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From its inception, Quarkus has been shaped by &lt;strong&gt;real-world adoption&lt;/strong&gt; across industries, with companies &lt;a href=&quot;https://quarkus.io/userstories/&quot;&gt;sharing their user-stories&lt;/a&gt;, leveraging Quarkus&amp;#8217;s unmatched performance and developer joy in the Java ecosystem. We recently celebrated our &lt;a href=&quot;https://quarkus.io/1000contributors/&quot;&gt;&lt;strong&gt;1000th contributor milestone&lt;/strong&gt;&lt;/a&gt;, a testament to the strength of this diverse and thriving community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Speaking as Quarkus contributors employed by Red Hat and soon IBM, we love our project and intend to keep making it awesome. IBM and Red Hat have clearly communicated that the current and future contributions to Quarkus are a key component of the middleware strategy. IBM has already been an active contributor to Quarkus, and we look forward to increased contribution - alongside the many other individuals and companies who contribute, innovate, and drive Quarkus forward.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, &lt;strong&gt;Quarkus is already on the path to becoming part of &lt;a href=&quot;https://www.commonhaus.org/&quot;&gt;Commonhaus&lt;/a&gt; an open-source foundation&lt;/strong&gt;, further ensuring its long-term independence and success as a truly community-driven project. The move to the foundation and the Red Hat/IBM move could look suspicious timing-wise, but the two are unrelated. We described our reasons in a &lt;a href=&quot;https://quarkus.io/blog/quarkus-in-a-foundation/&quot;&gt;previous blog post&lt;/a&gt;, but if anything, this announcement reaffirms the importance of a foundation-hosted project for its stability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To our contributors and users: your involvement has always been what makes Quarkus thrive. Keep building, experimenting, and shaping the future of Java with us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;-- The Quarkus Team&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 13 Mar 2025 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-redhat-strategy/
            </guid>
            
            
            
            <author>Max Rydahl Andersen (https://twitter.com/maxandersen)</author>
            
        </item>
        
    </channel>
</rss>
